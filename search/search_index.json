{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Webslate - Python Basics","text":"<p>Welcome to the Webslate documentation for Python Basics.</p>"},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Inheritance</li> <li>search</li> <li>algorithms</li> <li>basics</li> <li>bits</li> <li>classes</li> <li>controls</li> <li>array</li> <li>graph</li> <li>heap</li> <li>linked_list</li> <li>priority_queue</li> <li>queue</li> <li>stack</li> <li>binary-search-tree</li> <li>binary-tree</li> <li>general</li> <li>tree</li> <li>data_structures</li> <li>bytearray</li> <li>bytes</li> <li>memoryview</li> <li>binary</li> <li>boolean</li> <li>array</li> <li>list</li> <li>tuple</li> <li>linear</li> <li>dictionaries</li> <li>set</li> <li>non_linear</li> <li>complex</li> <li>float</li> <li>integer</li> <li>numeric</li> <li>string</li> <li>data_types</li> <li>defs</li> <li>functions</li> <li>interview</li> <li>arrays</li> <li>strings</li> <li>leetcode</li> <li>calculations</li> <li>number-systems</li> <li>math</li> <li>shift_left</li> <li>bit_wise</li> <li>operators</li> <li>problems</li> <li>recursive</li> <li>sorting</li> <li>utilities</li> </ul>"},{"location":"Inheritance","title":"Inheritance","text":"<p>This section covers Inheritance.</p> <ul> <li>simple_inheritance.py</li> </ul>"},{"location":"Inheritance/inheritance_readme","title":"Inheritance Readme","text":""},{"location":"Inheritance/inheritance_readme#inheritance","title":"Inheritance","text":"<ul> <li> <p>Inheritance allows us to define a class that inherits all features and methods from the another class</p> </li> <li> <p>Parent Class or base class: Parent class is the class being inherited from</p> </li> <li>Pass keyword when you do not want to add any other properties or methods to the class</li> </ul> <p>class Student(Person):    pass</p> <p>Add /_/_init__() Function</p> <p>The init() function is called automatically every time the class is being used to create a new object.</p> <p>When you add the init() function, the child class no longer inherit the parent's /_/_init__() function</p> <p>The child's init() function overrides the inheritence of the parent's init() function</p> <p>To keep the inheritence of the parent's //_init__(), add a call to the parent's //_init__()</p> <p>class Student(Person):   def init(self, fname, lname):     Person.init(self, fname, lname)</p>"},{"location":"Inheritance/inheritance_readme#super","title":"Super()","text":"<p>Super() function that will make the child class inherit all the methods and properties from its parent.</p> <p>super().init()</p> <p>If you add a method in the child class with thhe same name as a function in the parent class, the inheritance of the parent method will be overridden.</p> <p>def myfunc():   x = 300   print(x)</p> <p>myfunc()</p> <p>def myfunc():   x = 300   def myinnerfunc():     print(x)   myinnerfunc()</p> <p>myfunc()</p> <p>def myfunc():   global x   x = 300</p> <p>myfunc()</p> <p>print(x)</p>"},{"location":"Inheritance/simple_inheritance","title":"Simple Inheritance","text":"<p>File Name: simple_inheritance.py <pre><code>from stylepy import h1,h2,h3,h4,h5,h6\nclass Parent:\n    parent_name1 = \"Sivan\"\n    def __init__(self, name=\"\"):\n        h4(\" Parent class is created\")\n        self.parent_name = \"Sivan\"\n    def get_parent_name(self):\n        h4(f\" Parent Name is {self.parent_name}\")\n\n    def grace_us(self):\n        h4(\" All is well\")\n\n\nclass Child(Parent):\n    def __init__(self, name, parent_name=\"\"):\n        # Parent.__init__(self, name=parent_name)\n        super().__init__(name=parent_name)\n\n        # print(\" Overriding Parent's Init class\")\n        self.name = name\n        h4(\" Child Name is Vinayagar\")\n\n\n# child_class = Child(name= \"Vinayagar\")\n# # print(\" Trying to call parent init\")\n# print(child_class.parent_name)\n\nchild_class = Child(\"Vinayagar\", \"Sivan\")\nh3(\" Trying to call parent init\")\nchild_class.get_parent_name()\n\n\n\nh3(\" To use global variable inside a function we need use a keyword : Global\")\n\nx = 5\n\nh4(\"Initial glbal varibale value is x : \" , x)\ndef myfunc():\n    global x\n    x = 300\n    h5(\"Set the global variable x inside a function \", x)\n    def myfunc2():\n\n        x = 100\n        h6(\"second Local variable is\", x)\n    myfunc2()\n\nmyfunc()\nh3(\"global variable is x \", x)\n</code></pre></p>"},{"location":"algorithms/search","title":"Search","text":"<p>This section covers search.</p> <ul> <li>binary_search.py</li> </ul>"},{"location":"algorithms/search/binary_search","title":"Binary Search","text":"<p>File Name: binary_search.py ```python from stylepy import h1,h2,h3,h4,h5,h6 def binary_search_in_recursive(input_array, search_value, left, right):     if(left &gt; right): # Reached the end and unable to search.         return False</p> <pre><code>mid_point = (left + right) // 2 # 6 is midpoint first time.\nif (input_array[mid_point] == search_value):\n    return True\nelif(input_array[mid_point] &gt; search_value):\n    return binary_search_in_recursive(input_array, search_value, left, mid_point -1)\n\nreturn binary_search_in_recursive(input_array, search_value, mid_point + 1, right)\n</code></pre> <p>def binary_search_in_iterative(input_array, search_value):     left = 0     right = len(input_array) - 1</p> <pre><code>while(left &lt;= right):\n        mid_point = (left + right) // 2\n        if (input_array[mid_point] == search_value):\n            return True\n        elif (input_array[mid_point] &gt; search_value):\n            right = mid_point - 1\n        else:\n            left = mid_point + 1\n\nreturn False\n</code></pre> <p>h3(\"\"\"</p> <p>Sample Problem: Imagine you are working with a dataset of recorded temperatures in a city, logged every hour over a week.  This dataset is sorted by the temperature values. You want to find the first occurrence of a specific temperature, say 15\u00b0C, in this dataset. \"\"\")</p> <p>h1('&gt;&gt;&gt; Binary Search in Recursive');</p> <p>input_array = [10, 11, 12, 13, 14, 15, 15, 15, 16, 17, 18, 19, 20] left_index = 0 right_index = len(input_array) - 1 print(f\"binary_search_in_recursive(19) is {binary_search_in_recursive(input_array, 19, left_index, right_index)}\"); print(f\"binary_search_in_recursive(18) is {binary_search_in_recursive(input_array, 18, left_index, right_index)}\");</p> <p>h1('\\n\\n&gt;&gt;&gt; Binary Search in Recursive');</p> <p>print(f\"binary_search_in_iterative(15) is {binary_search_in_iterative(input_array, 15)}\"); print(f\"binary_search_in_iterative(21) is {binary_search_in_iterative(input_array, 21)}\");```</p>"},{"location":"algorithms/search/binary_search#documentation","title":"Documentation","text":"<p>h1('&gt;&gt;&gt; Binary Search in Recursive');</p> <p>input_array = [10, 11, 12, 13, 14, 15, 15, 15, 16, 17, 18, 19, 20] left_index = 0 right_index = len(input_array) - 1 print(f\"binary_search_in_recursive(19) is {binary_search_in_recursive(input_array, 19, left_index, right_index)}\"); print(f\"binary_search_in_recursive(18) is {binary_search_in_recursive(input_array, 18, left_index, right_index)}\");</p> <p>h1('\\n\\n&gt;&gt;&gt; Binary Search in Recursive');</p> <p>print(f\"binary_search_in_iterative(15) is {binary_search_in_iterative(input_array, 15)}\"); print(f\"binary_search_in_iterative(21) is {binary_search_in_iterative(input_array, 21)}\");</p>"},{"location":"basics","title":"Basics","text":"<p>This section covers basics.</p> <ul> <li>a_basics.py</li> <li>b_variable_scope.py</li> <li>b_variables.py</li> <li>c_if.py</li> <li>d_data_types.py</li> <li>e_strings.py</li> <li>errors.py</li> <li>f_numbers.py</li> <li>g_boolean.py</li> <li>g_modules.py</li> <li>h_operators.py</li> <li>i_range.py</li> <li>j_sequence_data_types.py</li> <li>rough.py</li> </ul>"},{"location":"basics/a_basics","title":"A Basics","text":"<p>File Name: a_basics.py ```python</p>"},{"location":"basics/a_basics#basic-statement","title":"Basic Statement","text":"<p>from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('\\n # Basic Example')</p>"},{"location":"basics/a_basics#print-statement-without-parenthesis","title":"Print Statement without parenthesis.","text":"<p>h2('\\n &gt;&gt;&gt;&gt; Print Statement without parenthesis throws SyntaxError')</p>"},{"location":"basics/a_basics#syntaxerror-missing-parentheses-in-call-to-print-did-you-mean-print","title":"SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?","text":""},{"location":"basics/a_basics#print-concatenation-with-variable","title":"print \"Concatenation with variable\"","text":""},{"location":"basics/a_basics#print-statement","title":"Print Statement","text":"<p>h3('\\n &gt;&gt;&gt;&gt; Print Statement ') h6('hello venkat, welcome to python')</p>"},{"location":"basics/a_basics#print-statement-support-comma-separated-arguments","title":"Print Statement support comma separated arguments.","text":"<p>h4('\\n &gt;&gt;&gt;&gt; Print Statement support n number of comma separated arguments.')</p>"},{"location":"basics/a_basics#maximum-number-of-parameters-you-can-pass-to-a-function-like-print","title":"Maximum number of parameters you can pass to a function like print()","text":""},{"location":"basics/a_basics#it-is-primarily-limited-by-the-amount-of-memory-available-on-your-system","title":"It is primarily limited by the amount of memory available on your system.","text":"<p>h4('hello venkat,', 'welcome to ', 'python')</p>"},{"location":"basics/a_basics#concatenation","title":"Concatenation","text":"<p>h5('\\n &gt;&gt;&gt;&gt; Print Statement Simple Concatenation') h6('hello venkat, welcome to python' + '3')</p>"},{"location":"basics/a_basics#concatenation-with-int-variable","title":"Concatenation with int variable","text":"<p>h6('\\n &gt;&gt;&gt;&gt; Concatenation with int variable and string throws TypeError') version = 3</p>"},{"location":"basics/a_basics#your-will-get-typeerror-unsupported-operand-types-for-int-and-str","title":"Your will get TypeError: unsupported operand type(s) for +: 'int' and 'str'","text":""},{"location":"basics/a_basics#printversion-hello-venkat-welcome-to-python","title":"print(version + 'hello venkat, welcome to python')","text":""},{"location":"basics/a_basics#your-will-get-typeerror-can-only-concatenate-str-not-int-to-str","title":"Your will get TypeError: can only concatenate str (not \"int\") to str.","text":""},{"location":"basics/a_basics#printhello-venkat-welcome-to-python-version","title":"print('hello venkat, welcome to python' + version)","text":"<p>h5('\\n &gt;&gt;&gt;&gt; Concatenation of int variable and string Issue fix should be with str() function')</p>"},{"location":"basics/a_basics#fix-is-below","title":"Fix is below.","text":"<p>h6('hello venkat, welcome to python' + str(version))</p>"},{"location":"basics/a_basics#concatenation-with-string-variable","title":"Concatenation with string variable","text":"<p>h5('\\n &gt;&gt;&gt;&gt; Concatenation with string variable') version = '3' print('hello venkat, welcome to python' + version)</p>"},{"location":"basics/a_basics#concatenation-with-string-variable-wrapped-in-string-literal","title":"Concatenation with string variable wrapped in String literal.","text":"<p>h5('\\n &gt;&gt;&gt;&gt; String variable wrapped in String literal.') version = '3' h6(f\"hello venkat, welcome to python{version}\")</p>"},{"location":"basics/a_basics#simple-hello-world-function-throws-indentationerror-when-function-body-statement-with-zero-indentation","title":"Simple Hello World Function throws IndentationError when function body statement with zero indentation.","text":"<p>h5('\\n &gt;&gt;&gt;&gt; Simple Hello World Function throws IndentationError when function body statement with zero indentation.') h6(' &gt;&gt;&gt;&gt; Fix is 4 tabs after def statement') def helloWorld():</p>"},{"location":"basics/a_basics#you-will-get-indentationerror-expected-an-indented-block-after-function-definition-on-line-47","title":"You will get IndentationError: expected an indented block after function definition on line 47","text":""},{"location":"basics/a_basics#in-python-the-execution-order-is-typically-from-top-to-bottom-line-by-line","title":"In Python, the execution order is typically from top to bottom, line by line.","text":""},{"location":"basics/a_basics#python-first-compiles-your-code-into-bytecode-before-it-executes-it-during-the-compilation-phase-it-checks-for-syntax-errors","title":"Python first compiles your code into bytecode before it executes it. During the compilation phase, it checks for syntax errors.","text":""},{"location":"basics/a_basics#if-there-is-an-indentationerror-during-compilation-anywhere-in-your-code-python-will-not-execute-any-part-of-the-script-because-the-error-is-caught-during-the-compilation-phase","title":"if there is an IndentationError during compilation anywhere in your code, Python will not execute any part of the script because the error is caught during the compilation phase.","text":""},{"location":"basics/a_basics#printnhello-world-from-helloworld","title":"print('\\nHello World from helloWorld()')","text":"<p>h5('\\nHello World from helloWorld()')</p>"},{"location":"basics/a_basics#calling-the-function","title":"Calling the function","text":"<p>helloWorld()</p> <p>fruits = 'Apple'</p> <p>h4('\\nReversing fruit value using slicing') h6(fruits[::-1])```</p>"},{"location":"basics/b_variable_scope","title":"B Variable Scope","text":"<p>File Name: b_variable_scope.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p>"},{"location":"basics/b_variable_scope#variable-scope","title":"Variable Scope","text":"<p>h1('\\n &gt;&gt;&gt;&gt; Variable Scope Example')</p>"},{"location":"basics/b_variable_scope#helloworld-function-with-outside-variable","title":"helloWorld Function with outside variable","text":"<p>h2('\\n &gt;&gt;&gt;&gt; helloWorld Function with outside variable')</p> <p>type = 'World' def helloWorld():     h6('Hello ' + type + ' from helloWorld()')</p>"},{"location":"basics/b_variable_scope#calling-the-function","title":"Calling the function","text":"<p>helloWorld()</p>"},{"location":"basics/b_variable_scope#helloworld-function-with-hoisting-variable-throws-nameerror-name-hoistedvariable-is-not-defined","title":"helloWorld Function with hoisting variable throws <code>NameError: name 'hoistedVariable' is not defined</code>","text":"<p>h6('\\n &gt;&gt;&gt;&gt; helloWorld Function with hoisting variable throws <code>NameError</code>')</p>"},{"location":"basics/b_variable_scope#def-helloworld","title":"def helloWorld():","text":""},{"location":"basics/b_variable_scope#printhello-hoistedvariable-from-helloworld","title":"print('Hello ' + hoistedVariable + ' from helloWorld()')","text":""},{"location":"basics/b_variable_scope#helloworld","title":"helloWorld()","text":""},{"location":"basics/b_variable_scope#hoistedvariable-hoisted-world","title":"hoistedVariable = 'hoisted world'","text":""},{"location":"basics/b_variable_scope#greet-function","title":"Greet Function","text":"<p>h4('\\n &gt;&gt;&gt;&gt; Greet Function passed with <code>name</code> variable') def greet(name):     print('Hello ' + name)</p>"},{"location":"basics/b_variable_scope#greet-will-throws-typeerror-greet-missing-1-required-positional-argument-name","title":"greet() # will throws TypeError: greet() missing 1 required positional argument: 'name'","text":""},{"location":"basics/b_variable_scope#print-when-no-parameter-passed-throws-typeerror-greet-missing-1-required-positional-argument-name","title":"print(\" &gt;&gt;&gt;&gt; when no parameter passed throws TypeError: greet() missing 1 required positional argument: 'name'\")","text":"<p>h4(\" &gt;&gt;&gt;&gt; passing name parameter returns Hello John\") name = 'John' greet(name)</p>"},{"location":"basics/b_variable_scope#global-variable","title":"Global Variable","text":"<p>h4('\\n &gt;&gt;&gt;&gt; Global and Local Variable Samples') myAge = 21</p> <p>def afterGraduation():     myAge = 24     # myAge will be overwritten as 24.     h6(f\"inside afterGraduation: I'm {myAge} years old\") </p>"},{"location":"basics/b_variable_scope#myage-will-return-global-value-21","title":"myAge will return global value 21.","text":"<p>h6(f\"outside before afterGraduation call: I'm {myAge} year old\")  afterGraduation() h6(f\"outside after afterGraduation call: I'm {myAge} year old\") </p>"},{"location":"basics/b_variable_scope#global-variable-with-global-keyword","title":"Global Variable with global keyword.","text":"<p>h4('\\n &gt;&gt;&gt;&gt; Global Variable with global keyword')</p> <p>manhood = \"bachelor\"</p> <p>def afterMarriage():     global manhood     h6(f\"inside afterMarriage before change: I'm {manhood}\")      manhood = \"Husband\"     h6(f\"inside afterMarriage after change: I'm {manhood}\") </p>"},{"location":"basics/b_variable_scope#manhood-will-return-global-value-husband","title":"manhood will return global value Husband.","text":"<p>h6(f\"outside before afterMarriage: I'm {manhood}\") afterMarriage() h6(f\"outside after afterMarriage: I'm {manhood}\")```</p>"},{"location":"basics/b_variables","title":"B Variables","text":"<p>File Name: b_variables.py <pre><code>from stylepy import h1, h2, h3, h4, h5, h6\nfrom stylepy import spaceComplexity\nfrom stylepy import timeComplexity\nh1('\\n &gt;&gt;&gt;&gt; Variable Example');\nh2(\"Variable name should start with alpha-numeric characters, _ or string\")\nh3(\"Variable name should not start with numbers, hyphen\")\nh4(\"Variable names are case sensitive\");\n\n# Below code throws `SyntaxError: invalid decimal literal`.\n# 1fruit = 'hello'\n\n# Below code throws `SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?`\n# -adhi = 'graduated'\n# SyntaxError: invalid syntax\n# =adhi = 'graduated'\n\n# Multiple Variables\nh5(\"\\n&gt;&gt;&gt;&gt; Multiple Variables with String literal\");\nx, y, z = 1, 2, \"Three\"\nh5(f\"X is {x}, Y is {y}, Z is {z}\")\n\n# Swapping example\nh6(\"\\n&gt;&gt;&gt;&gt; Swapping String Variables Using unpacking return with String literal\");\na = 'apple'\nb = 'bat'\nb, a = a, b # Time and Space complexity is O(1), Constant Time, which is faster.\ntimeComplexity(\"O(1)\", \"Because the operation is simply swapping references to the string objects\")\nspaceComplexity(\"O(1)\", \"No additional space is needed to perform the swap.\")\n\nh4(f\"After Unpacking: A value is {a}, B value is {b}\")\n# Alternative solution using Additional memory\nh5(\"\\n&gt;&gt;&gt;&gt; Alternative solution using Additional memory with String literal\");\nc = b\nb = a\na = c\nh4(f\"After using additional memory: A value is {a}, B value is {b}\")\ntimeComplexity('O(1)', 'Each of the assignments (c = b, b = a, a = c) is a constant-time operation.')\nspaceComplexity('O(1)', 'This method introduces a single additional variable c. The space used by c does not depend on the size of the strings a and b')\n# Alternative solution without using Additional memory\nh5(\"\\n&gt;&gt;&gt;&gt; Alternative solution without using Additional memory which is slicing and return in String literal\");\na = a + b\nb = a[:len(a) - len(b)] # which is :5, so start from begining and stop before 5th position.\na = a[len(b):] # which is start from 5: and the rest.\nh4(f\"After Slicing: A value is {a}, B value is {b}\")\ntimeComplexity('O(n + m)', 'where N is the length of string a and M is the length of string b.')\nspaceComplexity('O(n + m)', 'slicing operations also create new strings that require additional space.')\n\n\n# How about in integer swapping values?\nh4(\"\\n&gt;&gt;&gt;&gt; Swapping Integer Variables Using unpacking return in String literal\");\na = 1\nb = 2\nb, a = a, b # Unpacking in Python and Destruction in JS\nh4(f\"Now Integer A position is {a}, B position is {b}\")\na = a + b\nb = a - b\na = a - b\nh4(f\"\\n&gt;&gt;&gt;&gt; After computation of a+b, a-b, a-b ==== Now Integer A position is {a}, B position is {b}\")\na ^= b\nb ^= a\na ^= b\nh5(f\"\\n&gt;&gt;&gt;&gt; After XOR Approach of a ^= b; b ^= a; a ^= b ==== Now Integer A position is {a}, B position is {b}\")\n\n# One Value to Multiple Variables\nh4(\"\\n&gt;&gt;&gt;&gt; One Value to Multiple Variables\");\nprevious = current = next = 1\nh5(f\"previous: {previous}, current: {current}, next: {next}\")\n\n# Unpack a Collection\nh4(\"\\n&gt;&gt;&gt;&gt; Unpack a Collection: list, tuple\")\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfirstFruit, secondFruit, thirdFruit = fruits\nh5(f\"firstFruit: {firstFruit}, secondFruit: {secondFruit}, thirdFruit: {thirdFruit}\")\n</code></pre></p>"},{"location":"basics/c_if","title":"C If","text":"<p>File Name: c_if.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p>"},{"location":"basics/c_if#statement","title":"Statement","text":"<p>h1('\\n &gt;&gt;&gt;&gt; Statement Example')</p>"},{"location":"basics/c_if#iseligibletovote-function","title":"isEligibleToVote Function","text":"<p>h2('\\n &gt;&gt;&gt;&gt; isEligibleToVote Function with passing age')</p> <p>def isEligibleToVote(age: int = 0) -&gt; None:     try:       if(age &gt; 0 and age &lt; 21):           print(str(age) + ' Wow, You will be soon eligible to vote')       elif(age &gt; 21):           print(str(age) + ' Congrats, You are eligible to vote!')       else:           print(str(age) + ' Invalid <code>age</code> parameter')     except Exception as e:       print('Got error for param \"' + age + '\"\\nError is ', e)</p>"},{"location":"basics/c_if#example-usage","title":"Example usage","text":"<p>h3('\\n &gt;&gt;&gt;&gt; Passing nothing consider default parameter if provided') isEligibleToVote() h4('\\n &gt;&gt;&gt;&gt; Passing <code>16</code> return \"Wow, You will be soon eligible to vote\"') isEligibleToVote(16) h5('\\n &gt;&gt;&gt;&gt; Passing <code>19</code> return \"Wow, You will be soon eligible to vote\"') isEligibleToVote(19) h6('\\n &gt;&gt;&gt;&gt; Passing <code>25</code> return \"Congrats, You are eligible to vote!\"') isEligibleToVote(25) h4('\\n &gt;&gt;&gt;&gt; Passing <code>\\'\\'</code> as parameter throws TypeError: \\'&lt;\\' not supported between instances of \\'str\\' and \\'int\\'') isEligibleToVote('')```</p>"},{"location":"basics/d_data_types","title":"D Data Types","text":"<p>File Name: d_data_types.py ```python from stylepy import h1, h2, h3, h4, h5, h6 from stylepy import blockquote from stylepy import pretty_json h1('\\n &gt;&gt;&gt;&gt; Data Type Example') h2('15 Types of Data Types') h3('&gt;&gt;&gt;&gt; 1st. Text Type') h4('1. string\\n') h5('&gt;&gt;&gt;&gt; 2nd Numeric Type') h4('2. int, 3. float, 4. complex\\n') h5('&gt;&gt;&gt;&gt; 3rd Sequence Type') h4('5. list, 6. tuple, 7. range\\n') h5('&gt;&gt;&gt;&gt; 4th Mapping Type') h4('8. dict\\n') h5('&gt;&gt;&gt;&gt; 5th Set Type') h4('9. set, 10. frozenset\\n') h5('&gt;&gt;&gt;&gt; 6th Boolean Type') h4('11. bool\\n') h5('&gt;&gt;&gt;&gt; 7th Binary Type') h4('11. bytes, 12. byteArray, 13. memoryView\\n') h5('&gt;&gt;&gt;&gt; 8th None Type') h4('11. None\\n')</p> <p>greet = 'welcome' # String castToString = str(3)</p>"},{"location":"basics/d_data_types#find-variable-type","title":"Find Variable Type","text":"<p>h3(f\"&gt;&gt;&gt; Type of greet is {type(greet)}\") h4(f\"&gt;&gt;&gt; Type of castToString is {type(castToString)}\")</p>"},{"location":"basics/d_data_types#number-data-type-variables","title":"Number Data Type Variables","text":"<p>currentYear = 2024 # int for year h3(f\"\\n&gt;&gt;&gt; Type of currentYear is {type(currentYear)}\") castToInteger = int(2024.00) h4(f\"&gt;&gt;&gt; Type of castToInteger is {type(castToInteger)}\")</p> <p>weight = 75.50 # Float for Weight in Kg h3(f\"\\n&gt;&gt;&gt; Type of weight is {type(weight)}\") castToFloat = float('75.50') h4(f\"&gt;&gt;&gt; Type of castToFloat is {type(castToFloat)}\")</p> <p>h3(\"\\n&gt;&gt;&gt; List Type\") fruits = [\"apple\", \"banana\", \"cherry\"] # List for fruits h4(f\"&gt;&gt;&gt; Type of fruits is {type(fruits)}\") fruits.append(\"grapes\") h4('Fruits List: ', fruits) blockquote(fruits) # blockquote</p> <p>h3(\"\\n&gt;&gt;&gt; Tuple Type\") configuration = ('2MB','30 Minutes') # Tuple  h6(f\"&gt;&gt;&gt; Type of configuration is {type(configuration)}\") h6('configuration Tuple: ', configuration)</p> <p>h3(\"\\n&gt;&gt;&gt; Dict Type\") employeeDictionary = {\"name\" : \"John\", \"age\" : 36} # Dict h4(f\"&gt;&gt;&gt; Type of employeeDictionary is {type(employeeDictionary)}\") h5(employeeDictionary) #pretty json h6('employee dictionary: ', employeeDictionary) config = {True : \"dummyValue\", 1 : \"actualConfigValue\"} # Dict key value will be same True or 1 so latest value will be overriden. h6('config dictionary: ', config)</p> <p>h3(\"\\n&gt;&gt;&gt; Boolean Type\") eligibleToVote = True # Boolean h4(f\"&gt;&gt;&gt; Type of eligibleToVote is {type(eligibleToVote)}\") h5('eligibleToVote: ', eligibleToVote)</p> <p>sunRiseToday = 'east' sunRiseTodayInWest = True if sunRiseToday == 'west' else False h6(f\"\\n&gt;&gt;&gt; Type of sunRiseTodayInWest is {sunRiseTodayInWest}\") h6('sunRiseTodayInWest: ', sunRiseTodayInWest)</p>"},{"location":"basics/d_data_types#todo","title":"TODO","text":""},{"location":"basics/d_data_types#add-bytes","title":"Add Bytes","text":""},{"location":"basics/d_data_types#add-none-examples","title":"Add None examples```","text":""},{"location":"basics/e_strings","title":"E Strings","text":"<p>File Name: e_strings.py ```python</p>"},{"location":"basics/e_strings#python-modulepy-basicse_stringspy","title":"python module.py basics/e_strings.py","text":"<p>import sys from stylepy import timeComplexity from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('\\n &gt;&gt;&gt;&gt; String Type Example')</p> <p>def format_size(size_bytes):     # Define the conversion constants     KB_FACTOR = 1024     MB_FACTOR = KB_FACTOR ** 2     GB_FACTOR = KB_FACTOR ** 3     TB_FACTOR = KB_FACTOR ** 4</p> <pre><code># Perform the conversions and format the output\nif size_bytes &gt;= TB_FACTOR:\n    return f\"{size_bytes / TB_FACTOR:.2f} TB\"\nelif size_bytes &gt;= GB_FACTOR:\n    return f\"{size_bytes / GB_FACTOR:.2f} GB\"\nelif size_bytes &gt;= MB_FACTOR:\n    return f\"{size_bytes / MB_FACTOR:.2f} MB\"\nelif size_bytes &gt;= KB_FACTOR:\n    return f\"{size_bytes / KB_FACTOR:.2f} KB\"\nelse:\n    return f\"{size_bytes} bytes\"\n</code></pre> <p>h2('\\n &gt;&gt;&gt;&gt; What is maximum value can be stored inside python string variable?') h3('Below is the Max size') max_size = sys.maxsize formatted_size = format_size(max_size) h6(f\"Max size: {formatted_size}\")</p> <p>h4('\\n &gt;&gt;&gt;&gt; Single line using single quote') h5('Single quote is same as double quote for string data type')</p> <p>h5('\\n &gt;&gt;&gt;&gt; Single line using double quote') h6(\"Single quote is same as double quote for string data type\");</p> <p>h4('\\n &gt;&gt;&gt;&gt; Multi line using single quote') h5('''       Multi line statement can be       created using 3 single quotes. ''');</p> <p>h6('\\n &gt;&gt;&gt;&gt; Multi line using double quote') print(\"\"\"       Multi line statement can be       created using 3 double quotes.     \"\"\")</p> <p>greet = 'welcome';</p> <p>h2('\\n &gt;&gt;&gt;&gt; Slicing Example') h3('&gt;&gt;&gt;&gt; Accessing one specific character in string variable') h4(' &gt;&gt;&gt;&gt; Find the 3rd character from 0th index') h5(greet[3]); # return <code>c</code></p> <p>h5('\\n &gt;&gt;&gt;&gt; number after colon executed with <code>-1</code> which will considered as start:stop'); h6('\\n &gt;&gt;&gt;&gt; Accessing 3rd to 5th specific character in the string variable') h5(' &gt;&gt;&gt;&gt; Find the characters from 0th index to 5th index') h6(greet[3:6]); # return <code>com</code></p> <p>h5('\\n &gt;&gt;&gt;&gt; Accessing from 0 to 5th specific character in the string variable') h6(' &gt;&gt;&gt;&gt; Find the characters from 0th index to 5th index') h5(greet[:6]); # return <code>welcom</code></p> <p>h5('\\n &gt;&gt;&gt;&gt; Accessing from 3rd to end of the string variable') h6(' &gt;&gt;&gt;&gt; Find the characters from 0th index to last index') h5(greet[3:]); # return <code>come</code></p> <p>h4('\\n &gt;&gt;&gt;&gt; Accessing from last to 4 characters in the string variable') h5(' &gt;&gt;&gt;&gt; Find the characters from last index to 4 characters') h6(greet[-4:]); # return <code>come</code></p> <p>h4('\\n &gt;&gt;&gt;&gt; Accessing from last to 4 characters but skip last character in the string variable') h5(' &gt;&gt;&gt;&gt; Find the characters from last index to 4 characters with skipping last character') h6(greet[-4:-1]); # return <code>come</code></p> <p>h4('\\n &gt;&gt;&gt;&gt; Iteration Example') h5(' &gt;&gt;&gt;&gt; Iterate the Greet String and print each charactor') for character in greet:     h6(f\"character: {character}\")</p> <p>h4('\\n &gt;&gt;&gt;&gt; Find Length Example') h5(' &gt;&gt;&gt;&gt; Find a Length of greet String') h6('greet length', len(greet))</p> <p>h4('\\n &gt;&gt;&gt;&gt; <code>in / not in</code> Exist Check Example') h5(' &gt;&gt;&gt;&gt; Find whether <code>w</code> string exist in greet variable using <code>in</code> keyword') timeComplexity('O(n)', 'In Python, strings are typically implemented as arrays of characters. The operation \\'w\\' in greet is essentially a search operation where Python checks each character in the string greet to see if it matches \\'w\\'') h6('w' in greet) </p> <p>h5('\\n &gt;&gt;&gt; Use <code>in</code> statement in <code>if</code> statement as well') if 'w' in greet:     h6('w exist in greet variable')</p> <p>h5('\\n &gt;&gt;&gt; Use <code>in</code> statement in <code>if</code> statement as well') if 'u' not in greet:     h6('u Not exist in greet variable')</p> <p>h4('\\n &gt;&gt;&gt;&gt; Format Example') designation = 'Full Stack engineer' company = 'Meta Inc' location = 'Singapore' product = 'Meta Enterprise Platform' h5(' &gt;&gt;&gt;&gt; format() method takes unlimited number of argument. Example'); about = 'I am currently {} at {} and working in {}.' h6(about.format(designation, company, location))</p> <p>h5('\\n &gt;&gt;&gt;&gt; format() with index numbers') info = 'hey i work for {1} in {0} as {2}' h6(info.format(location, company, designation))</p> <p>h5('\\n &gt;&gt;&gt;&gt; format() with missing index numbers, means not giving all the index') h6('&gt;&gt;&gt;&gt; Error: cannot switch from manual field specification to automatic field numbering')</p>"},{"location":"basics/e_strings#info1-hey-i-work-for-1-in-as","title":"info1 = 'hey i work for {1} in {} as {}'","text":""},{"location":"basics/e_strings#printinfo1formatlocation-company-designation","title":"print(info1.format(location, company, designation))","text":""},{"location":"basics/e_strings#print-below-string-code-throws-error-gn","title":"print('''&gt;&gt;&gt;&gt; Below String code throws Error: g\\n","text":""},{"location":"basics/e_strings#hey-i-work-for-1-in-as-nthrows-value","title":"hey i work for {1} in {} as {}\\nthrows: Value","text":""},{"location":"basics/e_strings#error-cannot-switch-from-manual-field-specification-to-automatic-field-numbering","title":"Error: cannot switch from manual field specification to automatic field numbering","text":""},{"location":"basics/e_strings#formatlocation-company-designation","title":"'''.format(location, company, designation))```","text":""},{"location":"basics/e_strings#documentation","title":"Documentation","text":"<p>greet = 'welcome';</p> <p>h2('\\n &gt;&gt;&gt;&gt; Slicing Example') h3('&gt;&gt;&gt;&gt; Accessing one specific character in string variable') h4(' &gt;&gt;&gt;&gt; Find the 3rd character from 0th index') h5(greet[3]); # return <code>c</code></p> <p>h5('\\n &gt;&gt;&gt;&gt; number after colon executed with <code>-1</code> which will considered as start:stop'); h6('\\n &gt;&gt;&gt;&gt; Accessing 3rd to 5th specific character in the string variable') h5(' &gt;&gt;&gt;&gt; Find the characters from 0th index to 5th index') h6(greet[3:6]); # return <code>com</code></p> <p>h5('\\n &gt;&gt;&gt;&gt; Accessing from 0 to 5th specific character in the string variable') h6(' &gt;&gt;&gt;&gt; Find the characters from 0th index to 5th index') h5(greet[:6]); # return <code>welcom</code></p> <p>h5('\\n &gt;&gt;&gt;&gt; Accessing from 3rd to end of the string variable') h6(' &gt;&gt;&gt;&gt; Find the characters from 0th index to last index') h5(greet[3:]); # return <code>come</code></p> <p>h4('\\n &gt;&gt;&gt;&gt; Accessing from last to 4 characters in the string variable') h5(' &gt;&gt;&gt;&gt; Find the characters from last index to 4 characters') h6(greet[-4:]); # return <code>come</code></p> <p>h4('\\n &gt;&gt;&gt;&gt; Accessing from last to 4 characters but skip last character in the string variable') h5(' &gt;&gt;&gt;&gt; Find the characters from last index to 4 characters with skipping last character') h6(greet[-4:-1]); # return <code>come</code></p> <p>h4('\\n &gt;&gt;&gt;&gt; Iteration Example') h5(' &gt;&gt;&gt;&gt; Iterate the Greet String and print each charactor') for character in greet:     h6(f\"character: {character}\")</p> <p>h4('\\n &gt;&gt;&gt;&gt; Find Length Example') h5(' &gt;&gt;&gt;&gt; Find a Length of greet String') h6('greet length', len(greet))</p> <p>h4('\\n &gt;&gt;&gt;&gt; <code>in / not in</code> Exist Check Example') h5(' &gt;&gt;&gt;&gt; Find whether <code>w</code> string exist in greet variable using <code>in</code> keyword') timeComplexity('O(n)', 'In Python, strings are typically implemented as arrays of characters. The operation \\'w\\' in greet is essentially a search operation where Python checks each character in the string greet to see if it matches \\'w\\'') h6('w' in greet) </p> <p>h5('\\n &gt;&gt;&gt; Use <code>in</code> statement in <code>if</code> statement as well') if 'w' in greet:     h6('w exist in greet variable')</p> <p>h5('\\n &gt;&gt;&gt; Use <code>in</code> statement in <code>if</code> statement as well') if 'u' not in greet:     h6('u Not exist in greet variable')</p> <p>h4('\\n &gt;&gt;&gt;&gt; Format Example') designation = 'Full Stack engineer' company = 'Meta Inc' location = 'Singapore' product = 'Meta Enterprise Platform' h5(' &gt;&gt;&gt;&gt; format() method takes unlimited number of argument. Example'); about = 'I am currently {} at {} and working in {}.' h6(about.format(designation, company, location))</p> <p>h5('\\n &gt;&gt;&gt;&gt; format() with index numbers') info = 'hey i work for {1} in {0} as {2}' h6(info.format(location, company, designation))</p> <p>h5('\\n &gt;&gt;&gt;&gt; format() with missing index numbers, means not giving all the index') h6('&gt;&gt;&gt;&gt; Error: cannot switch from manual field specification to automatic field numbering')</p>"},{"location":"basics/e_strings#info1-hey-i-work-for-1-in-as_1","title":"info1 = 'hey i work for {1} in {} as {}'","text":""},{"location":"basics/e_strings#printinfo1formatlocation-company-designation_1","title":"print(info1.format(location, company, designation))","text":""},{"location":"basics/e_strings#print-below-string-code-throws-error-gn_1","title":"print('''&gt;&gt;&gt;&gt; Below String code throws Error: g\\n","text":""},{"location":"basics/e_strings#hey-i-work-for-1-in-as-nthrows-value_1","title":"hey i work for {1} in {} as {}\\nthrows: Value","text":""},{"location":"basics/e_strings#error-cannot-switch-from-manual-field-specification-to-automatic-field-numbering_1","title":"Error: cannot switch from manual field specification to automatic field numbering","text":""},{"location":"basics/e_strings#formatlocation-company-designation_1","title":"'''.format(location, company, designation))","text":""},{"location":"basics/errors","title":"Errors","text":"<p>File Name: errors.py ```python from stylepy import h1,h2,h3,h4,h5,h6</p> <p>h1('\\nSyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers')</p> <p>print(\"\\nModuleNotFoundError: No module named 'utils'\") h5(\"soluton: \\nimport sys \\n sys.path.append('../')\")</p> <p>h5(\"\\n ImportError: cannot import name 'failure_count' from 'testUtils'\") h6(\"Soluton: Actual issue, function was missing\")</p> <p>h5(\"SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?\")</p> <p>h6('TypeError: can only concatenate str (not \"int\") to str')</p> <p>h5(\"NameError: name 'hoistedVariable' is not defined\") h6('undefined errors')</p> <p>h5(\"TypeError: greet() missing 1 required positional argument: 'name'\")</p> <p>h6('SyntaxError: non-default argument follows default argument')</p> <p>h5(\"TypeError: isEligibleToVote() missing 1 required positional argument: 'aaaa'\") h6('Solution: We should provide default value else it will be considered required parameter')</p> <p>h5('ValueError: Exceeds the limit (4300 digits) for integer string conversion: value has 5000 digits; use sys.set_int_max_str_digits() to increase the limit') h6('Solution: you need to set like <code>sys.set_int_max_str_digits(10000)</code>')</p> <p>h5('SyntaxError: trailing comma not allowed without surrounding parentheses') h6('Import statement should not end with comma')</p> <p>h5(\"AttributeError: 'str' object has no attribute 'reversed'\") h6('There is no method called reversed')</p> <p>h5(\"TypeError: 'palindromSolutions' object is not callable\") h6(\"when you simply try to call the class as function\")```</p>"},{"location":"basics/f_numbers","title":"F Numbers","text":"<p>File Name: f_numbers.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('\\n &gt;&gt;&gt;&gt; Number Data Type Example')</p> <p>h2('\\n &gt;&gt;&gt;&gt; Integer Data Type Example') age = 25 h3(f'Int age ({age}) can be whole number, positive or negative, without decimals, of unlimited length.') h4('examples: 35656222554887711, -3255522, 25')</p> <p>h3('\\n &gt;&gt;&gt;&gt; Float Data Type Example') weight = 76.50 h4(f'Float weight ({weight}) can be number, positive or negative, containing one or more decimals') h5('examples: 1.10, 1.0, -35.59, 35e3, 12E4, -87.7e100')</p> <p>h4('\\n &gt;&gt;&gt;&gt; Complex Data Type Example') something = 1j h5(f'complex something ({something}) are written with a \"j\" as the imaginary part') h6('examples: 1.10, 1.0, -35.59, 35e3, 12E4, -87.7e100')</p> <p>h5('\\n &gt;&gt;&gt;&gt; Type Case Functions'); h6('examples: float(weight), int(age), complex()');```</p>"},{"location":"basics/g_boolean","title":"G Boolean","text":"<p>File Name: g_boolean.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('\\n &gt;&gt;&gt;&gt; Boolean Data Type Example') h2('\\n &gt;&gt;&gt; When boolean returns <code>False</code>')</p> <p>h5('For False ', bool(False)); h6('For Zero ', bool(0)); h5('For Empty String ', bool('')); h6('For Empty List ', bool([])); h6('For Empty Tuple ', bool(())); h5('For Empty Dictionary ', bool({})); h6('For None ', bool(None));</p> <p>h3('\\n &gt;&gt;&gt; When boolean returns <code>True</code>') h5('For greater than Zero ', bool(1)); h6('For atleast one String ', bool('a')); h5('For atleast one item in List ', bool(['a'])); h6('For atleast one item in Tuple ', bool(('a'))); h5('For atleast one item in Dictionary ', bool({'a': 'A'}));```</p>"},{"location":"basics/g_modules","title":"G Modules","text":"<p>File Name: g_modules.py <code>python import random from stylepy import h2 h2(random.randrange(1, 10))</code></p>"},{"location":"basics/h_operators","title":"H Operators","text":"<p>File Name: h_operators.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('\\n &gt;&gt;&gt;&gt; Operators Example') h5('Arithmetic operators: (+,-,,/,//,%,)') h5('Assignment operators: (=,+=,-=,=,/=,//=,**=,\\=,^=,&gt;&gt;=,&lt;&lt;=)') h5('Comparison operators: (==,!=,&gt;,&gt;=,&lt;,&lt;=)') h5('Logical operators: (and ,or ,not)') h5('Membership operators: (in ,not in)') h5('Identity operators: (is, is not)') h5('Bitwise Operators: (&amp;,|,^,~,&lt;&lt;,&gt;&gt;)')</p> <p>h2('\\n Arithmetic Interesting Operators') h3 (' &gt;&gt;&gt; Exponentiation Operator') x = 2 y = 5 h4('when x is 2 and y = 5') h5('Exponentiation: x ** y is 2 to power of 5 aka 2^5 = ', x**y)</p> <p>h4 ('\\n &gt;&gt;&gt; Floor Division Operator') fruits = 10 share_people = 3 h4('when fruits are 10 and people are 3 and we need to share the fruits') h5('then we can use Floor Division ') h6('Maximum can be shared: fruits // share_people = ', fruits // share_people)```</p>"},{"location":"basics/i_range","title":"I Range","text":"<p>File Name: i_range.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('\\n &gt;&gt;&gt;&gt; Range Data Type Example') h5('\\n &gt;&gt;&gt;&gt; Print Until 7 <code>range(8)</code> wrap with list') h5(list(range(8)))</p> <p>h5('\\n &gt;&gt;&gt;&gt; Print from 2 to 7 <code>range(2, 8)</code> wrap with list') h6(list(range(2, 8)))</p> <p>h4('\\n &gt;&gt;&gt;&gt; Print from 0 to 20 increment 2 like 2 Table') h5('Using <code>range(0, 13, 2)</code> wrap with list') h6(list(range(0, 13, 2)))</p> <p>h4('\\n &gt;&gt;&gt;&gt; Print from 0 to 20 increment 2 like 4 Table') h5('Using <code>range(0, 13, 4)</code> wrap with list') h6(list(range(0, 13, 4)))</p> <p>h4('\\n &gt;&gt;&gt;&gt; Print from 0 to 20 increment 2 like 7 Table') h5('Using <code>range(0, 13, 7)</code> wrap with list') h6(list(range(0, 13, 7)))</p> <p>h5('\\n Type value of type(range(2, 8)) is below') h6(type(range(2, 8)))</p>"},{"location":"basics/i_range#def-squarenumber","title":"def square(number):","text":""},{"location":"basics/i_range#return-number-2","title":"return number ** 2","text":""},{"location":"basics/i_range#numbers-1-2-3-4-5","title":"numbers = [1, 2, 3, 4, 5]","text":""},{"location":"basics/i_range#squared_numbers-listmapsquare-numbers","title":"squared_numbers = list(map(square, numbers))","text":"<p>h2('\\n &gt;&gt;&gt;&gt; Print Fibonacci Sequence until 10th Number')</p> <p>def fibonacci(n):     a, b = 0, 1     for _ in range(n):         yield a         a, b = b, a + b</p>"},{"location":"basics/i_range#example-generate-first-10-fibonacci-numbers","title":"Example: Generate first 10 Fibonacci numbers","text":"<p>fib_sequence = list(fibonacci(10)) h4(fib_sequence)```</p>"},{"location":"basics/j_sequence_data_types","title":"J Sequence Data Types","text":"<p>File Name: j_sequence_data_types.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('\\n &gt;&gt;&gt;&gt; Sequence Data Type Example')</p> <p>h2('\\n &gt;&gt;&gt;&gt; List Data Type Example') h3(' &gt;&gt;&gt; Create N number of List element with same value') h4([7] * 4);</p> <p>h3('\\n &gt;&gt;&gt;&gt; Tuple Data Type Example') h4((1,2) * 4);</p> <p>h5('\\n &gt;&gt;&gt;&gt; Complex Data Type Example')```</p>"},{"location":"basics/rough","title":"Rough","text":"<p>File Name: rough.py ```python</p>"},{"location":"basics/rough#table-0-7","title":"table = [0] * (7)","text":""},{"location":"basics/rough#printtable","title":"print(table)","text":""},{"location":"basics/rough#def-using_front_and_backword","title":"def using_front_and_back(word):","text":""},{"location":"basics/rough#mid_point-lenword-2-5","title":"mid_point = len(word) // 2 # 5","text":""},{"location":"basics/rough#last_index-lenword-9","title":"last_index = len(word) # 9","text":""},{"location":"basics/rough#mid_index-mid_point-1","title":"mid_index = mid_point -1","text":""},{"location":"basics/rough#first_part","title":"first_part = ''","text":""},{"location":"basics/rough#second_part","title":"second_part = ''","text":""},{"location":"basics/rough#for-rest_index-in-rangelast_index-1-mid_point-1-1","title":"for rest_index in range(last_index - 1, mid_point - 1, -1):","text":""},{"location":"basics/rough#printfi-mid_index-wordmid_index-and-j-rest_index-wordrest_index","title":"# print(f'i: {mid_index} {word[mid_index]} and j: {rest_index} {word[rest_index]}')","text":""},{"location":"basics/rough#first_part-wordrest_index","title":"first_part += word[rest_index]","text":""},{"location":"basics/rough#second_part-wordmid_index","title":"second_part += word[mid_index]","text":""},{"location":"basics/rough#mid_index-1","title":"mid_index -= 1","text":""},{"location":"basics/rough#return-first_part-second_part","title":"return first_part + second_part","text":""},{"location":"basics/rough#printusing_front_and_backevil-olive","title":"print(using_front_and_back('EVIL OLIVE'))","text":""},{"location":"basics/rough#printusing_front_and_backrise-sir","title":"print(using_front_and_back('RISE SIR'))","text":""},{"location":"basics/rough#def-is_palindrome","title":"def is_palindrome():","text":""},{"location":"basics/rough#start-0","title":"start = 0","text":""},{"location":"basics/rough#end-9","title":"end = 9","text":""},{"location":"basics/rough#word-evil-olive","title":"word = 'EVIL OLIVE'","text":""},{"location":"basics/rough#while-start-end","title":"while start &lt; end:","text":""},{"location":"basics/rough#if-wordstart-wordend","title":"if word[start] != word[end]:","text":""},{"location":"basics/rough#return-false","title":"return False","text":""},{"location":"basics/rough#start-1","title":"start +=1","text":""},{"location":"basics/rough#end-1","title":"end -=1","text":"<pre><code>    # print('start: ', start, word[start], ' end: ', end, word[end]);\n</code></pre>"},{"location":"basics/rough#def-is_palindromes","title":"def is_palindrome(s):","text":""},{"location":"basics/rough#s-slower-convert-to-lower-case-but-keep-spaces","title":"s = s.lower()  # Convert to lower case, but keep spaces","text":""},{"location":"basics/rough#start-end-0-lens-1","title":"start, end = 0, len(s) - 1","text":""},{"location":"basics/rough#while-start-end_1","title":"while start &lt; end:","text":""},{"location":"basics/rough#skip-spaces-in-the-start-pointer","title":"# Skip spaces in the start pointer","text":""},{"location":"basics/rough#while-start-end-and-sstart","title":"while start &lt; end and s[start] == \" \":","text":""},{"location":"basics/rough#start-1_1","title":"start += 1","text":""},{"location":"basics/rough#skip-spaces-in-the-end-pointer","title":"# Skip spaces in the end pointer","text":""},{"location":"basics/rough#while-end-start-and-send","title":"while end &gt; start and s[end] == \" \":","text":""},{"location":"basics/rough#end-1_1","title":"end -= 1","text":""},{"location":"basics/rough#compare-characters","title":"# Compare characters","text":""},{"location":"basics/rough#if-sstart-send","title":"if s[start] != s[end]:","text":""},{"location":"basics/rough#return-false_1","title":"return False","text":""},{"location":"basics/rough#start-1_2","title":"start += 1","text":""},{"location":"basics/rough#end-1_2","title":"end -= 1","text":""},{"location":"basics/rough#return-true","title":"return True","text":""},{"location":"basics/rough#phrases-evil-olive-taco-cat-huh-do-geese-see-god-bore-me-rob-rise-sir-madam-dive-vid","title":"phrases = [\"EVIL OLIVE\", \"TACO CAT\", \"HUH\", \"DO GEESE SEE GOD\", \"BORE ME ROB\", \"RISE SIR\", \"MADAM\", \"DIVE VID\"]","text":""},{"location":"basics/rough#results-phrase-is_palindromephrase-for-phrase-in-phrases","title":"results = {phrase: is_palindrome(phrase) for phrase in phrases}","text":""},{"location":"basics/rough#printresults","title":"print(results)","text":"<p>''' Decrement Iteration (9-5) Additional Index (4-0)</p> <p>20 - 19  10</p> <p>19-10 = 9 10 -1 = 9, 0 === 9-0 '''```</p>"},{"location":"bits","title":"Bits","text":"<p>This section covers bits.</p> <ul> <li>16_and_32_bits.py</li> <li>1_to_3_bits.py</li> <li>4_and_8_bits.py</li> <li>64_and_128_bits.py</li> <li>basics.py</li> <li>data_types_bits.py</li> </ul>"},{"location":"bits/and_32_bits","title":"And 32 Bits","text":"<p>File Name: 16_and_32_bits.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('16 and 32 Bit Basics')</p> <p>h2('16 Bits') h4('Note: 16 bits can represent numbers from 0 to 65,535 (2^16 - 1).') h4(''' | Decimal | Binary            | |---------|-------------------| | 0       | 0000000000000000  | | 1       | 0000000000000001  | | 2       | 0000000000000010  | | 3       | 0000000000000011  | | 4       | 0000000000000100  | | 5       | 0000000000000101  | | 6       | 0000000000000110  | | 7       | 0000000000000111  | | 8       | 0000000000001000  | | 9       | 0000000000001001  | | 10      | 0000000000001010  | ''')</p> <p>h2('32 Bits') h4('Note: 32 bits can represent numbers from 0 to 4,294,967,295 (2^32 - 1). Full binary representation for numbers larger than 16 bits is quite lengthy, so only the least significant 16 bits are shown for brevity.') h4(''' | Decimal | Binary (only showing least significant 16 bits for brevity) | |---------|------------------------------------------------------------| | 0       | 0000000000000000                                           | | 1       | 0000000000000001                                           | | 2       | 0000000000000010                                           | | ...     | ...                                                        | | 10      | 0000000000001010                                           | ''')```</p>"},{"location":"bits/1_to_3_bits","title":"1 To 3 Bits","text":"<p>File Name: 1_to_3_bits.py ```python</p>"},{"location":"bits/1_to_3_bits#import-data_typescommonutils-as-utils","title":"import data_types.commonUtils as utils","text":"<p>from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('1, 2 and 3 Bit Basics')</p> <p>h2('1 Bit') h6(''' | Decimal | Binary | |---------|--------| | 0       | 0      | | 1       | 1      | ''')</p> <p>h2('2 Bit') h4(''' | Decimal | Binary | |---------|--------| | 0       | 00     | | 1       | 01     | | 2       | 10     | | 3       | 11     | ''')</p> <p>h2('3 Bit') h4('In the 3-bit table, only decimal numbers up to 7 are included, as the binary representation of 8 (1000) requires 4 bits.') h4(''' | Decimal | Binary | |---------|--------| | 0       | 000    | | 1       | 001    | | 2       | 010    | | 3       | 011    | | 4       | 100    | | 5       | 101    | | 6       | 110    | | 7       | 111    | ''')```</p>"},{"location":"bits/4_and_8_bits","title":"4 And 8 Bits","text":"<p>File Name: 4_and_8_bits.py ```python</p>"},{"location":"bits/4_and_8_bits#import-data_typescommonutils-as-utils","title":"import data_types.commonUtils as utils","text":"<p>from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('4 and 5 Bit Basics')</p> <p>h2('4 Bits') h4('Note: 4 bits can represent numbers from 0 to 15 (2^4 - 1).') h4(''' | Decimal | Binary | |---------|--------| | 0       | 0000   | | 1       | 0001   | | 2       | 0010   | | 3       | 0011   | | 4       | 0100   | | 5       | 0101   | | 6       | 0110   | | 7       | 0111   | | 8       | 1000   | | 9       | 1001   | | 10      | 1010   | ''')</p> <p>h2('8 Bits') h4('Note: 8 bits can represent numbers from 0 to 255 (2^8 - 1).') h4(''' | Decimal | Binary    | |---------|-----------| | 0       | 00000000  | | 1       | 00000001  | | 2       | 00000010  | | 3       | 00000011  | | 4       | 00000100  | | 5       | 00000101  | | 6       | 00000110  | | 7       | 00000111  | | 8       | 00001000  | | 9       | 00001001  | | 10      | 00001010  | ''')```</p>"},{"location":"bits/and_128_bits","title":"And 128 Bits","text":"<p>File Name: 64_and_128_bits.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p> <p>h1('64 and 128 Bit Basics')</p> <p>h2('64 Bits') h4('Note: 64 bits can represent numbers from 0 to 18,446,744,073,709,551,615 (2^64 - 1). Only the least significant 16 bits are shown.') h4(''' | Decimal | Binary (only showing least significant 16 bits for brevity) | |---------|------------------------------------------------------------| | 0       | 0000000000000000                                           | | 1       | 0000000000000001                                           | | 2       | 0000000000000010                                           | | ...     | ...                                                        | | 10      | 0000000000001010                                           | ''')</p> <p>h2('128 Bits') h3('Note: 128 bits can represent a very large range of numbers, from 0 up to 340,282,366,920,938,463,463,374,607,431,768,211,455 (2^128 - 1). Only the least significant 16 bits are shown for simplicity.') h4(''' | Decimal | Binary (only showing least significant 16 bits for brevity) | |---------|------------------------------------------------------------| | 0       | 0000000000000000                                           | | 1       | 0000000000000001                                           | | 2       | 0000000000000010                                           | | ...     | ...                                                        | | 10      | 0000000000001010                                           | ''')```</p>"},{"location":"bits/basics","title":"Basics","text":"<p>File Name: basics.py <pre><code>from stylepy import h1, h2, h3, h4, h5, h6\nh1('To determine whether your Mac is 32-bit or 64-bit, you can use a command in the Terminal. ') \n\nh2('Below for mac / linux system.') \n\nh3(\"uname -m \")\n\n\n# Output `x86_64``\n\n# Windows\n\n\nh4(\"wmic os get osarchitecture\")\n\n\n# Output below\n\n\n#OSArchitecture\n\n#64-bit\n\n\n# is integer variable depends on my bit system ?\n\n# In Python, the size of an integer is not constrained by the number of bits in a byte but by the available memory. Thus, integers can be of any size until the memory is exhausted.\n\n# An int in Java is always 32 bits, regardless of whether the system is 32-bit or 64-bit.\n\n# In NodeJS, all numbers are represented as double-precision 64-bit binary format IEEE 754 numbers\n\n# In Go, int and uint types are platform dependent. On a 32-bit system, these types are 32 bits, while on a 64-bit system, they are 64 bits.\n\n# In Rust, integer types have fixed sizes regardless of the platform. Types such as i32, i64, u32, u64,\n</code></pre></p>"},{"location":"bits/data_types_bits","title":"Data Types Bits","text":"<p>File Name: data_types_bits.py <pre><code>from stylepy import h1, h2, h3, h4, h5, h6\nfrom stylepy import ordered_list, bullet_list\n\nh1('Data Type Bit Sizes')\n\nh4('''\n| Data Type  | Typical Maximum Bits       | Notes                                           |\n|------------|----------------------------|-------------------------------------------------|\n| int        | Variable (system-dependent)| Limited by available memory, can be very large. |\n| float      | 64                         | Double-precision float, IEEE 754 standard.      |\n| complex    | 2x64                       | Consists of two 64-bit floats.                  |\n| bool       | 8                          | Typically stored as a byte.                     |\n| str        | Variable (system-dependent)| Dependent on length and encoding.               |\n| bytes      | Variable (system-dependent)| Dependent on the length of the sequence.        |\n| bytearray  | Variable (system-dependent)| Similar to bytes, mutable version.              |\n| list       | Variable (system-dependent)| Dependent on the number and types of elements.  |\n| tuple      | Variable (system-dependent)| Dependent on the number and types of elements.  |\n| set        | Variable (system-dependent)| Dependent on the number of elements.            |\n| dict       | Variable (system-dependent)| Dependent on the number of key-value pairs.     |\n| NoneType   | N/A                        | Represents no value, no associated bit size.    |\n''')\n\nh2('Notes')\nordered_list(\n    [\n        'The \"int\" type in Python can handle very large numbers, as its size is dynamic and adjusts based on the value it\\'s holding.',\n        'For types like \"str\", \"bytes\", \"bytearray\", \"list\", \"tuple\", \"set\", and \"dict\", the bit size depends on their content and can vary widely.',\n        '\"NoneType\" does not represent a data storage type and thus does not have an associated bit size.',\n        'The sizes for \"float\" and \"complex\" are more standardized due to the use of the IEEE 754 standard for floating-point arithmetic.',\n    ]\n)\n</code></pre></p>"},{"location":"classes","title":"Classes","text":"<p>This section covers classes.</p> <ul> <li>str.py</li> <li>change_object_properties.py</li> <li>delete-object-properties.py</li> <li>init-example.py</li> <li>methods.py</li> <li>pass-statement.py</li> <li>self-parameter.py</li> <li>simple-object.py</li> <li>simple_class.py</li> </ul>"},{"location":"classes/__str__","title":"str","text":"<p>File Name: str.py </p>"},{"location":"classes/change_object_properties","title":"Change Object Properties","text":"<p>File Name: change_object_properties.py ```python import simple_class as sc from stylepy import h1, h2, h3, h4, h5, h6</p>"},{"location":"classes/change_object_properties#without-creating-an-object-or-instance-we-cannot-workuse-the-class","title":"Without creating an object or instance we cannot work/use the class","text":""},{"location":"classes/change_object_properties#an-object-is-a-memory-it-has-all-the-features-and-functions-that-defined-in-the-class","title":"An object is a memory it has all the features and functions that defined in the class","text":""},{"location":"classes/change_object_properties#create-an-object","title":"create an object","text":"<p>def get_length1(bus):     return bus.length</p> <p>bus = sc.Bus() h1(f\"Bus length : {bus.length}\") bus.length = 10 bus.get_length = get_length1 h2(f\"Bus length : {bus.length}\") h3(f\"bus length is : {bus.get_length(bus)}\") bus.additional_param = 9</p>"},{"location":"classes/change_object_properties#we-can-assign-and-change-the-properties-from-out-side-but-it-is-a-bad-design","title":"we can assign and change the properties from out side but it is a bad design","text":"<p>h4(f\" bus additional param : {bus.additional_param}\")</p> <p>apple = sc.Fruit()</p> <p>washing_machine = sc.WashingMachine()```</p>"},{"location":"classes/classes_readme","title":"Classes Readme","text":""},{"location":"classes/classes_readme#class","title":"Class","text":"<p>A class should have a properties and methods.</p> <ul> <li> <p>Properties are like features</p> </li> <li> <p>Methods are its behaviour or functionalities</p> </li> <li> <p>Class is a back bone of OOP</p> </li> </ul> <p>keyword: class</p> <p>Class is a blue print or skeleton -&gt; assume like there is no physical form</p>"},{"location":"classes/classes_readme#instance-or-object","title":"Instance or Object","text":"<p>Instances should be created to make use of class</p> <p>class MyClass:     x=5</p> <p>instance_1 = MyClass() instance_2 = MyClass()</p>"},{"location":"classes/classes_readme#class-built-in-functions","title":"class built in functions:","text":""},{"location":"classes/classes_readme#__init__","title":"__init__()","text":"<p>Built in __init__() Function</p> <p>What you want to create when you are creating an object -&gt; All should present inside an __init__() function  -&gt; Assign values to its  properties  -&gt; Operations that are necessary to do when the object is created</p>"},{"location":"classes/classes_readme#__str__","title":"__str__()","text":"<p>__str__() Function</p> <p>It returns how the object can be represented as a string   We can override this by our own</p>"},{"location":"classes/classes_readme#methods","title":"Methods","text":"<p>Behaviour or action:</p> <p>Methods:  -&gt; In one line these are object functions, what are all the functions that object can do or it poses</p>"},{"location":"classes/classes_readme#self","title":"Self","text":"<p>The self parameter is a refrence to the current instance of the class,   Used to access variables that belongs to the class</p> <p>It doesn't have to be named self, we can call it whatever you like</p> <p>It should be the first parameter to any function in the class</p>"},{"location":"classes/classes_readme#delete","title":"Delete","text":"<p>Delete the properties of the object</p> <p>del p.height</p> <p>Delete objects as well</p>"},{"location":"classes/classes_readme#pass","title":"pass","text":"<p>pass:  class definitions cannot be empty  using pass we can make the content of the class functions can be empty.</p>"},{"location":"classes/classes_readme#class-internals","title":"Class Internals:","text":"<p>Programmers can create modular, reusable code that models or represents real-world entities or concepts in an intutive way.  Classes form the backbone object oriented programmingand facilitate the principles of encapsultion, inheritance and polymorphism</p> <p>Internals of the class:</p> <ol> <li> <p>Defining a class: First, you define a class using the 'class' keyword.  Python executes the class block, which may contain method definitions, class variables, and other statements</p> </li> <li> <p>NameSpace creation: Python creates a namespace where all its attributes and methods are stored.</p> </li> <li>Class Object Creation: Once the class definition is complete, Python creates a class object and assign it to the name provided after the class, that class allows for object creation  class Creation: First, you define a class using the 'class' keyword. Python</li> </ol>"},{"location":"classes/delete-object-properties","title":"Delete Object Properties","text":"<p>File Name: delete-object-properties.py </p>"},{"location":"classes/init-example","title":"Init Example","text":"<p>File Name: init-example.py ```python from stylepy import h1, h2, h3, h4, h5, h6</p>"},{"location":"classes/init-example#init-is-a-built-function","title":"init() is a built function","text":""},{"location":"classes/init-example#httpschatopenaicomshareeb3388df-6669-41ee-a16e-d471ec115799","title":"https://chat.openai.com/share/eb3388df-6669-41ee-a16e-d471ec115799","text":""},{"location":"classes/init-example#it-facilitates-the-initial-creation-of-object-properties-and-do-the-initial-function-calls","title":"It facilitates the initial creation of object properties and do the initial function calls","text":""},{"location":"classes/init-example#typeerror-businit-takes-0-positional-arguments-but-1-was-given","title":"TypeError: Bus.init() takes 0 positional arguments but 1 was given","text":"<p>class Bus:</p> <pre><code># Below one gives this error # TypeError: Bus.__init__() takes 0 positional arguments but 1 was given \n# def __init__():\n#     length = 4\n#     width = 2\n\n# What the above error means, The error you're encountering typically occurs when __init__() method is defined without any parameters,\n# But, python tries to call it with the \"self\" argument automatically\n\n\ndef __init__(self):\n\n    self.length = 4\n    self.width = 2\n# def __str__(self):\n#     # print(f\"length is {self.length}\")\n#     # return f\"length is {self.length}\"\n\n# If the methods are not defined with a first parameter then we cannot use the object variables, to access \n# To access object variables\n\n# def area():\n#     length = 4\n#     width = 2\n#     return length*width\n# def area(self):\n\n#     return self.length*self.width\n</code></pre> <p>bus = Bus() print(bus)</p>"},{"location":"classes/init-example#buslength","title":"bus.length","text":""},{"location":"classes/init-example#printbusarea","title":"print(bus.area())","text":"<p>print(f\"Bus object has created\")</p> <pre><code>```\n</code></pre>"},{"location":"classes/methods","title":"Methods","text":"<p>File Name: methods.py </p>"},{"location":"classes/pass-statement","title":"Pass Statement","text":"<p>File Name: pass-statement.py </p>"},{"location":"classes/self-parameter","title":"Self Parameter","text":"<p>File Name: self-parameter.py </p>"},{"location":"classes/simple-object","title":"Simple Object","text":"<p>File Name: simple-object.py <pre><code># import simple_class as sc\nfrom simple_class import Bus, Fruit, WashingMachine\n\nbus = Bus()\nprint(f\"Bus Model is {bus.model}\")\n\nfruit = Fruit()\nprint(f\"Fruit name : {fruit.name}, color: {fruit.color} \")\n\nwash_machine = WashingMachine()\n\nwash_machine.wash_clothes()\nprint(f\"Washing Machine name : {wash_machine.brand}, color: {wash_machine.model} \")\n</code></pre></p>"},{"location":"classes/simple_class","title":"Simple Class","text":"<p>File Name: simple_class.py <pre><code># Blue prints or skelentons for entities\n# Python keyword for the class is \"class\"\nfrom stylepy import h1,h2,h3\nclass Fruit:\n    name = \"Apple\"\n    color = \"red\"\n\nclass WashingMachine:\n    color = \"white\"\n    model = \"1A\"\n    brand = \"IFB\"\n    capacity = 7\n    price = 999.0\n    water_consumption = 2.5\n\n    def wash_clothes(self):\n        h3(\"washing initiated\")\n\nclass Bus:\n    length=0\n    brand = \"Volvo\"\n    model = \"V9\"\n    capacity = 50\n    fuel_type = \"Diesel\"\n    price = 250000\n\ndef get_length():\n        return Bus.length\n</code></pre></p>"},{"location":"controls","title":"Controls","text":"<p>This section covers controls.</p> <ul> <li>if.py</li> </ul>"},{"location":"controls/if","title":"If","text":"<p>File Name: if.py <pre><code>from stylepy import h1, h2, h3, h4, h5, h6\ntext = \"\"\"\nConditional operators\n1. Equality:\n  ==: Equal to\n  !=: Not equal to\n\n2. Comparison:\n  &lt;: Less than\n  &gt;: Greater than\n  &lt;=: Less than or equal to\n  &gt;=: Greater than or equal to\n\n3. Membership:\n  in: Checks if a value exists in a sequence (e.g., list, tuple, string)\n  not in: Checks if a value does not exist in a sequence\n\n4. Identity:\n  is: Checks if two variables refer to the same object\n  is not: Checks if two variables do not refer to the same object\n\n\"\"\"\n\nh1(text)\n\n#simple if and else \n\nif 10 &gt; 20 :\n  h2(\"10 is greater than 20 \")\nelif 10 &gt; 15:\n  h3(\"10 is greater than 15\")\nelse :\n  h4(\"10 is neither greater than 20 and 15\")\n\n\nh4(\"do we have ternary operator like a &gt; b ? True : False \")\nh4(\"Answer is No. However python has implemented ternary condition expression through if \")\n\n#Ternary expression\nresult = True if 0 &gt; 1 else False\nh5(\"Ternary result: \", result)\n\nh6(\"Do we have === in python? \")\nh6(\"Answer is No\")\n# === operator\n# if 10 === 10 :\n#   print(\"true with type check\")\n# else:\n#   print(\"Flase with type check\")\n\nh1(\"What is alterate to do type check? \")\n\ndef is_number(x):\n  result = 'number' if isinstance(x, (int, float, complex)) else 'Not a number'\n  h2(f\"given {x} is {result}\")\n\nis_number(42)   # True\nis_number(3.14)   # True\nis_number(5 + 2j)   # True\nis_number(\"Hello\")\n\nh3(\"Another way to check is type(variable) == data_tyep \")\n\nif type(10) == int:\n  h4(\"10 in integer\")\nelse:\n  h5(\"10 is not an integer\")\n\nh6(\"check the value is in the list, tuple, string or not\")\na = 10 \nitem_list = [10, 20, 30]\nitem_tuple = (20, 10, 30)\nitem_string = \"welcome\"\nb = \"come\"\nif a in item_list:\n  h3(f\"{a} is in the item_list\")\nelse:\n  h4(f\"{a} is not in the item_list\")\n\nif a in item_tuple:\n  h3(f\"{a} is in the item_tuple\")\nelse:\n  h4(f\"{a} is not in the item_tuple\")\n\nif b in item_string:\n  h3(f\"{b} is in the item_string\")\nelse:\n  h4(f\"{b} is not in the item_string\")\n\nh5(\"are we able to check the dictonary since it is key value pair\")\ndict_item = {\"suba\": \"Back end dev\", 'venkat': \"Front end dev\", 'Gutti': 'ML dev'}\nkey = \"suba\"\nif key in dict_item:\n  h5(f\"{key} is in the dict_item\")\nkey = \"test\"\nif key not in dict_item:\n  h6(f\"{key} is not in the dict_item\")\n\n\nvalue = \"Front end dev\"\nif value in dict_item.values():\n  h5(f\"{value} is in the dict_item\")\nvalue = \"developer\"\nif value not in dict_item.values():\n  h6(f\"{value} is not in the dict_item\")\n\nif 10 not in [1, 2, 4 ,5 ]:\n  h2(f\"10 is not in the list\")\n\n# indendity check (is and not is )\nlist1 = [1, 2 , 3 ]\nlist2 = [1, 2, 3]\nlist3 = list1\n\ndef check_same_object(obj1, obj2):\n  if obj1 is obj2:\n    h3(f\"obj1 and obj2 are in the same object\")\n  if obj1 is not obj2:\n    h4(f\"obj1 and obj2 are not in the same object\")\n\ncheck_same_object(list1, list2)\ncheck_same_object(list1, list3)\n</code></pre></p>"},{"location":"controls/if#documentation","title":"Documentation","text":"<p>h1(text)</p>"},{"location":"controls/if#simple-if-and-else","title":"simple if and else","text":"<p>if 10 &gt; 20 :   h2(\"10 is greater than 20 \") elif 10 &gt; 15:   h3(\"10 is greater than 15\") else :   h4(\"10 is neither greater than 20 and 15\")</p> <p>h4(\"do we have ternary operator like a &gt; b ? True : False \") h4(\"Answer is No. However python has implemented ternary condition expression through if \")</p>"},{"location":"controls/if#ternary-expression","title":"Ternary expression","text":"<p>result = True if 0 &gt; 1 else False h5(\"Ternary result: \", result)</p> <p>h6(\"Do we have === in python? \") h6(\"Answer is No\")</p>"},{"location":"controls/if#operator","title":"=== operator","text":""},{"location":"controls/if#if-10-10","title":"if 10 === 10 :","text":""},{"location":"controls/if#printtrue-with-type-check","title":"print(\"true with type check\")","text":""},{"location":"controls/if#else","title":"else:","text":""},{"location":"controls/if#printflase-with-type-check","title":"print(\"Flase with type check\")","text":"<p>h1(\"What is alterate to do type check? \")</p> <p>def is_number(x):   result = 'number' if isinstance(x, (int, float, complex)) else 'Not a number'   h2(f\"given {x} is {result}\")</p> <p>is_number(42)   # True is_number(3.14)   # True is_number(5 + 2j)   # True is_number(\"Hello\")</p> <p>h3(\"Another way to check is type(variable) == data_tyep \")</p> <p>if type(10) == int:   h4(\"10 in integer\") else:   h5(\"10 is not an integer\")</p> <p>h6(\"check the value is in the list, tuple, string or not\") a = 10  item_list = [10, 20, 30] item_tuple = (20, 10, 30) item_string = \"welcome\" b = \"come\" if a in item_list:   h3(f\"{a} is in the item_list\") else:   h4(f\"{a} is not in the item_list\")</p> <p>if a in item_tuple:   h3(f\"{a} is in the item_tuple\") else:   h4(f\"{a} is not in the item_tuple\")</p> <p>if b in item_string:   h3(f\"{b} is in the item_string\") else:   h4(f\"{b} is not in the item_string\")</p> <p>h5(\"are we able to check the dictonary since it is key value pair\") dict_item = {\"suba\": \"Back end dev\", 'venkat': \"Front end dev\", 'Gutti': 'ML dev'} key = \"suba\" if key in dict_item:   h5(f\"{key} is in the dict_item\") key = \"test\" if key not in dict_item:   h6(f\"{key} is not in the dict_item\")</p> <p>value = \"Front end dev\" if value in dict_item.values():   h5(f\"{value} is in the dict_item\") value = \"developer\" if value not in dict_item.values():   h6(f\"{value} is not in the dict_item\")</p> <p>if 10 not in [1, 2, 4 ,5 ]:   h2(f\"10 is not in the list\")</p>"},{"location":"controls/if#indendity-check-is-and-not-is","title":"indendity check (is and not is )","text":"<p>list1 = [1, 2 , 3 ] list2 = [1, 2, 3] list3 = list1</p> <p>def check_same_object(obj1, obj2):   if obj1 is obj2:     h3(f\"obj1 and obj2 are in the same object\")   if obj1 is not obj2:     h4(f\"obj1 and obj2 are not in the same object\")</p> <p>check_same_object(list1, list2) check_same_object(list1, list3)</p>"},{"location":"data_structures/ReadMe","title":"Data Structures Types.","text":""},{"location":"data_structures/ReadMe#linear","title":"Linear","text":"Data Structure Types Operation Types Real-time Examples Array Fixed-size, Dynamic Array Access, Insert, Delete (fixed size) 1. Days in a week: [\"Mon\", \"Tue\", ...] 2. Temperature readings: [72, 68, ...] Linked List Single, Doubly, Circular Access, Insert, Delete in Head (First Item) 1. Music playlist (each song to the next) Access, Insert, Delete in Tail (Last Item) 2. Treasure hunt (each clue to the next location) Access, Insert, Delete in Middle Node Search for a Value Stack Array-based, Linked List-based Push, Pop, Peek 1. Pile of plates (last on, first off) 2. Undo in software (last action reversed first) Queue Simple Queue, Circular Queue, Priority Queue Enqueue, Dequeue, Peek 1. Line at a bank counter 2. Call center queue"},{"location":"data_structures/ReadMe#non-linear","title":"Non Linear","text":"Data Structure Types Operation Types Real-time Examples Tree Binary Tree, AVL Tree, Red-Black Tree Insert, Delete, Traversal 1. Organizational chart of a company B-Tree, Binary Search Tree, N-ary Tree 2. Family tree showing genealogical relationships Graph Directed, Undirected, Weighted Add/Remove Vertex, Add/Remove Edge, Search, Path Finding 1. Road network (intersections and roads) Graph, Tree, Acyclic Graph 2. Facebook's friend network Heap Binary Heap, Fibonacci Heap Insert, Delete, Find Max/Min 1. Priority scheduling (higher priority first) Min Heap, Max Heap 2. Finding the largest/smallest element quickly Hash Table Chaining, Open Addressing Insert, Delete, Access 1. Book indexing (word and page number) Linear Probing, Quadratic Probing 2. User info on website by username Set Hash Set, Tree Set Add, Remove, Contains 1. Unique collection of items (tags in a blog) 2. Filtering duplicates from a list Trie Basic Trie, Compressed Trie Insert, Search, Delete 1. Auto-complete in search engines Radix Trie, Suffix Trie 2. Spell checker in word processors"},{"location":"data_structures/array/ReadMe","title":"Array Time Complexity Table","text":"Operation Array Access O(1) Search O(n) Insert O(n) Delete O(n)"},{"location":"data_structures/graph/ReadMe","title":"Data Structures Types.","text":""},{"location":"data_structures/graph/ReadMe#graph-non-linear-type","title":"Graph Non Linear Type","text":"Graph Type Add Vertex Remove Vertex Add Edge Remove Edge Search Path Finding Directed Graph O(1) O(V + E) O(1) O(E) O(V+E) O(V + E) Undirected Graph O(1) O(V + E) O(1) O(E) O(V+E) O(V + E) Weighted Graph O(1) O(V + E) O(1) O(E) O(V+E) O(V + E)"},{"location":"data_structures/heap/ReadMe","title":"Data Structures Types.","text":""},{"location":"data_structures/heap/ReadMe#heap-non-linear-type","title":"Heap Non Linear Type","text":"Heap Type Insert Delete Find Max/Min Binary Heap O(log n) O(log n) O(1) Fibonacci Heap O(1)* O(log n)* O(1)"},{"location":"data_structures/linked_list","title":"Linked List","text":"<p>This section covers linked_list.</p> <ul> <li>circular-linked-list.py</li> <li>commonUtils.py</li> <li>double-linked-list.py</li> <li>linked-list.py</li> <li>testUtils.py</li> </ul>"},{"location":"data_structures/linked_list/ReadMe","title":"Readme","text":""},{"location":"data_structures/linked_list/ReadMe#linked-list-time-complexity-table","title":"Linked List Time Complexity Table","text":"Operation Singly-Linked List Doubly-Linked List Circular Linked List Access Head O(1) O(1) O(1) Insert Head O(1) O(1) O(1) Delete Head O(1) O(1) O(1) Access Tail O(n) O(1) O(n) Insert Tail O(n) O(1) O(1) Delete Tail O(n) O(1) O(1) Access Middle O(n) O(n) O(n) Insert Middle O(n) O(n) O(n) Delete Middle O(n) O(n) O(n) Search for a Value O(n) O(n) O(n)"},{"location":"data_structures/linked_list/circular-linked-list","title":"Circular Linked List","text":"<p>File Name: circular-linked-list.py </p>"},{"location":"data_structures/linked_list/commonUtils","title":"Commonutils","text":"<p>File Name: commonUtils.py ```python from stylepy import timeComplexity from stylepy import spaceComplexity from stylepy import h1,h2,h3,h4,h5,h6 def timeComplexity(value, desc):     result = f'\\n \ud83d\udd52 Time Complexity: Approximately {value}'</p> <pre><code>if (desc):\n    result += f'\\n    Description: {desc}'\nh3(result)\n</code></pre> <p>timeComplexity(\"value\",\"desc\") def spaceComplexity(value, desc):     result = f' \ud83d\udcbe Space Complexity: Approximately {value}'</p> <pre><code>if (desc):\n    result += f'\\n    Description: {desc}'\nh3(result)\n</code></pre> <p>spaceComplexity(\"value\",\"desc\")```</p>"},{"location":"data_structures/linked_list/double-linked-list","title":"Double Linked List","text":"<p>File Name: double-linked-list.py </p>"},{"location":"data_structures/linked_list/linked-list","title":"Linked List","text":"<p>File Name: linked-list.py <pre><code>from stylepy import h1,h2,h3,h4,h5,h6\nfrom testUtils import solution_title, print_and_assert_new, getTestResult\nfrom commonUtils import timeComplexity, spaceComplexity\nfrom stylepy import h1, h2, h3, h4, h5, h6\n\nh1('\\n &gt;&gt;&gt; Linked List Implementation')\nh2('&gt;&gt;&gt; 1. Create Node Class with 2 properties 1. data and 2. next property')\nh3('&gt;&gt;&gt; 2. Create LinkedList Class with property called head')\nh3('''\n      Sample Representation of Data\n        node(\n            data=1,\n            next=node(\n                data=2,\n                next=node(\n                    data=3,\n                    next=node(\n                        data=4,\n                        next=None\n                    )\n                )\n            )\n        )\n''')\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedListWithoutTail:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        \"\"\" Append a node to the end of the list \"\"\"\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last_node = self.head\n        while last_node.next:\n            last_node = last_node.next\n        last_node.next = new_node\n\n    def print_list(self):\n        \"\"\" Print all elements of the list \"\"\"\n        cur_node = self.head\n        while cur_node:\n            print(cur_node.data, end=\" -&gt; \")\n            cur_node = cur_node.next\n        print(\"None\")\n\nclass LinkedListWithTail:\n    def __init__(self):\n        self.head = None\n        self.tail = None  # Maintaining a reference to the last node\n\n    def append(self, data):\n        \"\"\" Append a node to the end of the list in O(1) \"\"\"\n        new_node = Node(data)\n        if not self.head:  # If the list is empty\n            self.head = new_node\n            self.tail = new_node\n        else:\n            self.tail.next = new_node\n            self.tail = new_node  # Update the tail reference\n\n    def print_list(self):\n        \"\"\" Print all elements of the list \"\"\"\n        current = self.head\n        while current:\n            print(current.data, end=\" -&gt; \")\n            current = current.next\n        print(\"None\")\n\nnew_node = Node(1)\n\nsolution_title('Linked List without Tail')\nlinked_list = LinkedListWithoutTail()\nlinked_list.append(1)\nlinked_list.append(2)\nlinked_list.append(3)\n\nlinked_list.print_list()  # Outputs: 1 -&gt; 2 -&gt; 3 -&gt; None\n\nsolution_title('Linked List with Tail')\nlinked_list_2 = LinkedListWithoutTail()\nlinked_list_2.append(1)\nlinked_list_2.append(2)\nlinked_list_2.append(3)\n\nlinked_list_2.print_list()  # Outputs: 1 -&gt; 2 -&gt; 3 -&gt; None\n</code></pre></p>"},{"location":"data_structures/linked_list/linked-list#documentation","title":"Documentation","text":"<pre><code>    new_node = Node(data)\n    if self.head is None:\n        self.head = new_node\n        return\n    last_node = self.head\n    while last_node.next:\n        last_node = last_node.next\n    last_node.next = new_node\n\ndef print_list(self):\n    cur_node = self.head\n    while cur_node:\n        print(cur_node.data, end=\" -&gt; \")\n        cur_node = cur_node.next\n    print(\"None\")\n</code></pre> <p>class LinkedListWithTail:     def init(self):         self.head = None         self.tail = None  # Maintaining a reference to the last node</p> <pre><code>def append(self, data):\n    new_node = Node(data)\n    if not self.head:  # If the list is empty\n        self.head = new_node\n        self.tail = new_node\n    else:\n        self.tail.next = new_node\n        self.tail = new_node  # Update the tail reference\n\ndef print_list(self):\n    current = self.head\n    while current:\n        print(current.data, end=\" -&gt; \")\n        current = current.next\n    print(\"None\")\n</code></pre> <p>new_node = Node(1)</p> <p>solution_title('Linked List without Tail') linked_list = LinkedListWithoutTail() linked_list.append(1) linked_list.append(2) linked_list.append(3)</p> <p>linked_list.print_list()  # Outputs: 1 -&gt; 2 -&gt; 3 -&gt; None</p> <p>solution_title('Linked List with Tail') linked_list_2 = LinkedListWithoutTail() linked_list_2.append(1) linked_list_2.append(2) linked_list_2.append(3)</p> <p>linked_list_2.print_list()  # Outputs: 1 -&gt; 2 -&gt; 3 -&gt; None</p>"},{"location":"data_structures/linked_list/testUtils","title":"Testutils","text":"<p>File Name: testUtils.py ```python failures = 0</p> <p>def flag_failure():     global failures     failures = (failures or 0) + 1</p> <p>def failure_count():     return failures</p> <p>def solution_title(title):     print('=' * 70)     print(f'&gt;&gt;&gt; {title}')     print('=' * 70)</p> <p>def print_and_assert(function_name, param, expected):     try:         assert function_name(param) == expected         print(f'\u2705 Pass: {function_name.name}({param}) is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}({param}) is returning {function_name(param)} but <code>{expected}</code> is expected')</p> <p>def print_and_assert_new(function_name, params, expected):     try:         assert function_name(params) == expected         print(f'\u2705 Pass: {function_name.name}{params} is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}{params} is returning {function_name(*params)} but <code>{expected}</code> is expected')</p> <p>def getTestResult(testName):     if (failure_count() &gt; 0):         print(f\"{failure_count()} Failure in {testName} tests\")     else:         print(f\"{testName} tests are passed!\")```</p>"},{"location":"data_structures/priority_queue/priority_queue_readme","title":"Priority Queue Readme","text":""},{"location":"data_structures/priority_queue/priority_queue_readme#priority-queue","title":"Priority Queue:","text":"<p>A priority queue is a queue that arranges the elements based on the priority of the elements.</p> <p>Elements with higher priority values are typically retreived before elements with lower priority values.</p> <p>In a priority queue each element has a priority queue associated with it. When you add an element in a queue it is inserted in a position based on it's priority value.</p> <p>If you add an element with a higher priority value to priority queue, it may be inserted near the front of the queue. Element with lower priorty valued inserted at back</p> <p>There are several ways to implement a priority queue, including using an array, linkedlist, heap, or binary serach tree.</p> <p>Each method has its own advantages and disadvantages.</p> <p>Priority Queues are often used in real-time systems, where the order in which elements are processed can have significant consequences. They are also used in algorithms to improve their efficiencies, such as Dijkstra's algorithm for finding the shortest path in a graph. A* search algorithm for pathfinding.</p> <p>If two elemnets have the same priority, they are served according to their order in the queue.</p> <p>How priority is assigned to the elements in a Priority Queue?</p> <p>In a priority queue, generally, the value of an element is considered for assigning the priority.</p>"},{"location":"data_structures/queue","title":"Queue","text":"<p>This section covers queue.</p> <ul> <li>basics_queue.py</li> <li>circular.py</li> <li>queue_collections_deque.py</li> <li>queue_lifo.py</li> <li>queue_list.py</li> <li>queue_priority.py</li> </ul>"},{"location":"data_structures/queue/ReadMe","title":"Queue Time Complexity Table","text":"Operation Queue Access O(n) Search O(n) Insert (Enqueue) O(1) Delete (Dequeue) O(1) Peek O(1)"},{"location":"data_structures/queue/basics_queue","title":"Basics Queue","text":"<p>File Name: basics_queue.py <pre><code>print(\"\"\"\nQueue Class:\nThe basic FIFO queue. It is often used for thread-safe communication between threads in a multithreaded environment.\nExample: from queue import Queue\n\"\"\")\n\nfrom queue import Queue\n\nclass CustomQueue:\n  def __init__(self):\n    self.queue = Queue()\n\n  def enqueue(self, item):\n    \"\"\"Add an item to the end of the queue.\"\"\"\n    self.queue.put(item)\n\n  def dequeue(self):\n    \"\"\"Remove and return the first item from the queue.\"\"\"\n    if not self.is_empty():\n      return self.queue.get()\n    else:\n      print(\"Queue is empty\")\n      return None\n\n  def is_empty(self):\n    \"\"\"Check if the queue is empty.\"\"\"\n    return self.queue.empty()\n\n  def size(self):\n    \"\"\"Return the number of items in the queue.\"\"\"\n    return self.queue.qsize()\n\n  def peek(self):\n    \"\"\"Return the first item in the queue without removing it.\"\"\"\n    if not self.is_empty():\n      return self.queue.queue[0]\n    else:\n      print(\"Queue is empty\")\n      return None\n\n# Example usage:\nif __name__ == \"__main__\":\n  grocery_queue = CustomQueue()\n  print(\"Initial queue:\", list(grocery_queue.queue.queue))\n\n  # Adding people to the queue\n  grocery_queue.enqueue(\"Venkat\")\n  grocery_queue.enqueue(\"Suba\")\n  grocery_queue.enqueue(\"Gutti\")\n  print(\"Queue after adding people:\", list(grocery_queue.queue.queue))\n\n  # Serving people from the queue\n  serving_person = grocery_queue.dequeue()\n  print(\"Serving:\", serving_person)\n  print(\"Queue after serving:\", list(grocery_queue.queue.queue))\n\n  # Checking the next person to be served\n  next_person = grocery_queue.peek()\n  print(\"Next person to be served:\", next_person)\n</code></pre></p>"},{"location":"data_structures/queue/basics_queue#documentation","title":"Documentation","text":"<p>from queue import Queue</p> <p>class CustomQueue:   def init(self):     self.queue = Queue()</p> <p>def enqueue(self, item):     self.queue.put(item)</p> <p>def dequeue(self):     if not self.is_empty():       return self.queue.get()     else:       print(\"Queue is empty\")       return None</p> <p>def is_empty(self):     return self.queue.empty()</p> <p>def size(self):     return self.queue.qsize()</p> <p>def peek(self):     if not self.is_empty():       return self.queue.queue[0]     else:       print(\"Queue is empty\")       return None</p>"},{"location":"data_structures/queue/basics_queue#example-usage","title":"Example usage:","text":"<p>if name == \"main\":   grocery_queue = CustomQueue()   print(\"Initial queue:\", list(grocery_queue.queue.queue))</p> <p># Adding people to the queue   grocery_queue.enqueue(\"Venkat\")   grocery_queue.enqueue(\"Suba\")   grocery_queue.enqueue(\"Gutti\")   print(\"Queue after adding people:\", list(grocery_queue.queue.queue))</p> <p># Serving people from the queue   serving_person = grocery_queue.dequeue()   print(\"Serving:\", serving_person)   print(\"Queue after serving:\", list(grocery_queue.queue.queue))</p> <p># Checking the next person to be served   next_person = grocery_queue.peek()   print(\"Next person to be served:\", next_person)</p>"},{"location":"data_structures/queue/circular","title":"Circular","text":"<p>File Name: circular.py <pre><code>from stylepy import h1,h2,h3,h4,h5,h6\nprint('''''')\nh1(\"Circular Queue\")\nh2('''A circular queue, also known as a ring buffer, is a data structure that effectively uses an array and operates\nlike a regular queue with a fixed size.\n''')\nclass CircularQueue:\n  def __init__(self, capacity):\n    self.capacity = capacity\n    self.queue = [None] * capacity\n    self.head = 0\n    self.tail = 0\n    self.size = 0\n\n  def enqueue(self, item):\n    if self.size == self.capacity:\n      #print(\"Queue is full. Cannot enqueue new item.\") - Implementation 1 \n      h4(\"Queue is full. Overwriting the oldest element.\") # Implementation 2 \n      self.dequeue() \n    self.queue[self.tail] = item  \n    self.tail = (self.tail + 1) % self.capacity  # ( 1 % 4 = 1,  2 % 4 = 2,   ... 4/4 = 0 )\n    self.size += 1\n\n  def dequeue(self):\n    if self.size == 0:\n      h4(\"Queue is empty\")\n      return None\n    item = self.queue[self.head]\n    self.head = (self.head + 1) % self.capacity\n    self.size -= 1\n    return item\n\n  def peek(self):\n    if self.size == 0:\n      h4(\"Queue is empty\")\n      return None\n    return self.queue[self.head]\n\n  def display(self):\n    if self.size == 0:\n      h4(\"Queue is empty\")\n      return\n    temp = self.head\n    resources = []\n    for _ in range(self.size):\n      resources.append(self.queue[temp])\n      temp = (temp + 1) % self.capacity\n    return resources\n\n\n# Example usage\nh3(\"Database connection pool is initaiated to accommodate 5 resource\")\ncq = CircularQueue(5)\nh4(\"Resource 1 of 5 is connected\")\ncq.enqueue(\"Resource 1\")\nh4(\"Resource 2 of 5 is connected\")\ncq.enqueue(\"Resource 2\")\nh4(\"Resource 3 of 5 is connected\")\ncq.enqueue(\"Resource 3\")\nh4(\"Resource 4 of 5 is connected\")\ncq.enqueue(\"Resource 4\")\nh4(\"Resource 5 of 5 is connected\")\ncq.enqueue(\"Resource 5\")\n\nh3(\"Display the pool resource\")\nh4(cq.display())  # Output: 1 2 3 4 5\n\n\nh3(\"Which resource will get drop its connect next?\")\nh4(cq.peek())\n\nh3(\"Resource 6 is trying to connect\")\ncq.enqueue(\"Resource 6\")  # Output: Queue is full. Cannot enqueue new item.\nh4(cq.display())  # Output: 1 2 3 4 5\n\n\nh3(\"Resource 1 is dropped its connection\")\ncq.dequeue()\nh4(\"Display the pool resource\")\nh4(cq.display())  # Output: 2 3 4 5\n\n\nh3(\"Resource 6 is trying to connect\")\ncq.enqueue(\"Resource 6\")\nh4(\"There is available place for acceting new connection. New resource is connected successfully\")\n\n\nh3(\"Display the pool resource\")\nh4(cq.display())  # Output: 2 3 4 5 6 \n</code></pre></p>"},{"location":"data_structures/queue/queue_collections_deque","title":"Queue Collections Deque","text":"<p>File Name: queue_collections_deque.py <pre><code>from stylepy import h1,h2,h3,h4\nh2(\"\"\"\n- collections.deque in Python is a mutable data structure, and you can add, remove, or modify elements.\n- It is a double-ended queue, optimized for fast operations at both ends.\n\n\"\"\")\n\nfrom collections import deque\nh1(\"initialise the queue using deque \")\n# Creating a deque\nmy_deque = deque([10, 4, 5, 8])\n\nh2(\"adding value 25 to the right - using .append()\")\n# Adding an element to the right\nmy_deque.append(25)\nh3(\"Print the queue items\")\nh4(my_deque)  # Output: deque([10, 4, 5, 8, 25])\n\nh2(\"removing item from the left -  fifo using .popleft()\")\n# Removing an element from the left\nremoved_element = my_deque.popleft()\nh3(\"Removed element:\", removed_element)  # Output: Removed element: 10\nh4(my_deque)  # Output: deque([4, 5, 8, 25])\n\n\n# Removing an element from the right\nh2(\"removing item from the right -  lifo using .pop()\")\nremoved_element = my_deque.pop()\nh3(\"Removed element:\", removed_element)  # Output: Removed element: 25\nh4(my_deque)  # Output: deque([4, 5, 8])\n</code></pre></p>"},{"location":"data_structures/queue/queue_collections_deque#documentation","title":"Documentation","text":"<p>from collections import deque h1(\"initialise the queue using deque \")</p>"},{"location":"data_structures/queue/queue_collections_deque#creating-a-deque","title":"Creating a deque","text":"<p>my_deque = deque([10, 4, 5, 8])</p> <p>h2(\"adding value 25 to the right - using .append()\")</p>"},{"location":"data_structures/queue/queue_collections_deque#adding-an-element-to-the-right","title":"Adding an element to the right","text":"<p>my_deque.append(25) h3(\"Print the queue items\") h4(my_deque)  # Output: deque([10, 4, 5, 8, 25])</p> <p>h2(\"removing item from the left -  fifo using .popleft()\")</p>"},{"location":"data_structures/queue/queue_collections_deque#removing-an-element-from-the-left","title":"Removing an element from the left","text":"<p>removed_element = my_deque.popleft() h3(\"Removed element:\", removed_element)  # Output: Removed element: 10 h4(my_deque)  # Output: deque([4, 5, 8, 25])</p>"},{"location":"data_structures/queue/queue_collections_deque#removing-an-element-from-the-right","title":"Removing an element from the right","text":"<p>h2(\"removing item from the right -  lifo using .pop()\") removed_element = my_deque.pop() h3(\"Removed element:\", removed_element)  # Output: Removed element: 25 h4(my_deque)  # Output: deque([4, 5, 8])</p>"},{"location":"data_structures/queue/queue_lifo","title":"Queue Lifo","text":"<p>File Name: queue_lifo.py <pre><code>print(\"\"\"\nLifoQueue Class:\nA Last In, First Out (LIFO) queue, also known as a stack. It is useful when you need a stack-like behavior.\nExample: from queue import LifoQueue\n\"\"\")\nfrom queue import LifoQueue\n\nclass CustomLifoQueue:\n  def __init__(self):\n    self.queue = LifoQueue()\n\n  def enqueue(self, item):\n    \"\"\"Add an item to the end of the queue.\"\"\"\n    self.queue.put(item)\n\n  def dequeue(self):\n    \"\"\"Remove and return the last item from the queue.\"\"\"\n    if not self.is_empty():\n      return self.queue.get()\n    else:\n      print(\"Queue is empty\")\n      return None\n\n  def is_empty(self):\n    \"\"\"Check if the queue is empty.\"\"\"\n    return self.queue.empty()\n\n  def size(self):\n    \"\"\"Return the number of items in the queue.\"\"\"\n    return self.queue.qsize()\n\n  def peek(self):\n    \"\"\"Return the last item in the queue without removing it.\"\"\"\n    if not self.is_empty():\n      return self.queue.queue[-1]\n    else:\n      print(\"Queue is empty\")\n      return None\n\n# Example usage:\nif __name__ == \"__main__\":\n  grocery_queue = CustomLifoQueue()\n  print(\"Initial queue:\", list(grocery_queue.queue.queue))\n\n  # Adding people to the queue\n  grocery_queue.enqueue(\"Venkat\")\n  grocery_queue.enqueue(\"Suba\")\n  grocery_queue.enqueue(\"Gutti\")\n  print(\"Queue after adding people:\", list(grocery_queue.queue.queue))\n\n  # Serving people from the queue\n  serving_person = grocery_queue.dequeue()\n  print(\"Serving:\", serving_person)\n  print(\"Queue after serving:\", list(grocery_queue.queue.queue))\n\n  # Checking the next person to be served\n  next_person = grocery_queue.peek()\n  print(\"Next person to be served:\", next_person)\n</code></pre></p>"},{"location":"data_structures/queue/queue_lifo#documentation","title":"Documentation","text":"<p>from queue import LifoQueue</p> <p>class CustomLifoQueue:   def init(self):     self.queue = LifoQueue()</p> <p>def enqueue(self, item):     self.queue.put(item)</p> <p>def dequeue(self):     if not self.is_empty():       return self.queue.get()     else:       print(\"Queue is empty\")       return None</p> <p>def is_empty(self):     return self.queue.empty()</p> <p>def size(self):     return self.queue.qsize()</p> <p>def peek(self):     if not self.is_empty():       return self.queue.queue[-1]     else:       print(\"Queue is empty\")       return None</p>"},{"location":"data_structures/queue/queue_lifo#example-usage","title":"Example usage:","text":"<p>if name == \"main\":   grocery_queue = CustomLifoQueue()   print(\"Initial queue:\", list(grocery_queue.queue.queue))</p> <p># Adding people to the queue   grocery_queue.enqueue(\"Venkat\")   grocery_queue.enqueue(\"Suba\")   grocery_queue.enqueue(\"Gutti\")   print(\"Queue after adding people:\", list(grocery_queue.queue.queue))</p> <p># Serving people from the queue   serving_person = grocery_queue.dequeue()   print(\"Serving:\", serving_person)   print(\"Queue after serving:\", list(grocery_queue.queue.queue))</p> <p># Checking the next person to be served   next_person = grocery_queue.peek()   print(\"Next person to be served:\", next_person)</p>"},{"location":"data_structures/queue/queue_list","title":"Queue List","text":"<p>File Name: queue_list.py <pre><code>from stylepy import h1,h2,h3,h4,h5,h6\nclass Queue:\n    def __init__(self):\n      self.items = []\n\n    def enqueue(self, item):\n      \"\"\"Add an item to the end of the queue.\"\"\"\n      self.items.append(item)\n\n    def dequeue(self):\n      \"\"\"Remove and return the first item from the queue.\"\"\"\n      if not self.is_empty():\n        return self.items.pop(0)\n      else:\n        h4(\"Queue is empty\")\n        return None\n\n    def is_empty(self):\n      \"\"\"Check if the queue is empty.\"\"\"\n      return len(self.items) == 0\n\n    def size(self):\n      \"\"\"Return the number of items in the queue.\"\"\"\n      return len(self.items)\n\n    def peek(self):\n      \"\"\"Return the first item in the queue without removing it.\"\"\"\n      if not self.is_empty():\n        return self.items[0]\n      else:\n        h4(\"Queue is empty\")\n        return None\n\n# Example usage:\nif __name__ == \"__main__\":\n  grocery_queue = Queue()\n  h4(\"Initial queue:\", grocery_queue.items)\n\n  # Adding people to the queue\n  grocery_queue.enqueue(\"Venkat\")\n  grocery_queue.enqueue(\"Suba\")\n  grocery_queue.enqueue(\"Gutti\")\n  h4(\"Queue after adding people:\", grocery_queue.items)\n\n  # Serving people from the queue\n  serving_person = grocery_queue.dequeue()\n  h4(\"Serving:\", serving_person)\n  h4(\"Queue after serving:\", grocery_queue.items)\n\n  # Checking the next person to be served\n  next_person = grocery_queue.peek()\n  h4(\"Next person to be served:\", next_person)\n</code></pre></p>"},{"location":"data_structures/queue/queue_list#documentation","title":"Documentation","text":"<pre><code>  self.items.append(item)\n\ndef dequeue(self):\n  if not self.is_empty():\n    return self.items.pop(0)\n  else:\n    h4(\"Queue is empty\")\n    return None\n\ndef is_empty(self):\n  return len(self.items) == 0\n\ndef size(self):\n  return len(self.items)\n\ndef peek(self):\n  if not self.is_empty():\n    return self.items[0]\n  else:\n    h4(\"Queue is empty\")\n    return None\n</code></pre>"},{"location":"data_structures/queue/queue_list#example-usage","title":"Example usage:","text":"<p>if name == \"main\":   grocery_queue = Queue()   h4(\"Initial queue:\", grocery_queue.items)</p> <p># Adding people to the queue   grocery_queue.enqueue(\"Venkat\")   grocery_queue.enqueue(\"Suba\")   grocery_queue.enqueue(\"Gutti\")   h4(\"Queue after adding people:\", grocery_queue.items)</p> <p># Serving people from the queue   serving_person = grocery_queue.dequeue()   h4(\"Serving:\", serving_person)   h4(\"Queue after serving:\", grocery_queue.items)</p> <p># Checking the next person to be served   next_person = grocery_queue.peek()   h4(\"Next person to be served:\", next_person)</p>"},{"location":"data_structures/queue/queue_priority","title":"Queue Priority","text":"<p>File Name: queue_priority.py <pre><code>print(\"\"\"\nPriorityQueue Class:\nA priority queue, where elements are dequeued based on their priority. Elements must be comparable.\nExample: from queue import PriorityQueue\n\"\"\")\n\nprint(\"\"\"\n- Elements are popped from the queue based on their priority. Lower values have higher priority.\n- The elements are dequeued in ascending order of priority.\n- In case of ties in priority, the elements are dequeued in the order they were added.\n- The elements in the priority queue are tuples, and the priority is determined by the first element of each tuple. \n- The element with the lowest value in the first position will have the highest priority\n\"\"\")\n\nprint(\"\"\"\nPriorityQueue uses a heap data structure internally \n      to efficiently maintain the order of elements based on their priorities\n\"\"\")\n\nprint(\"\"\"\nthe ordering of strings in the PriorityQueue is based on lexicographical order,\nwhich means it's based on the ASCII values of the characters.\nThe comparison is done character by character from left to right,\nand the first differing character determines the order.\n\n\"\"\")\nfrom queue import PriorityQueue\n\nclass CustomPriorityQueue:\n  def __init__(self):\n    self.queue = PriorityQueue()\n\n  def enqueue(self, item, priority):\n    \"\"\"Add an item to the queue with a specified priority.\"\"\"\n    self.queue.put((priority, item))\n\n  def dequeue(self):\n    \"\"\"Remove and return the item with the highest priority from the queue.\"\"\"\n    if not self.is_empty():\n      return self.queue.get()[1]\n    else:\n      print(\"Queue is empty\")\n      return None\n\n  def is_empty(self):\n    \"\"\"Check if the queue is empty.\"\"\"\n    return self.queue.empty()\n\n  def size(self):\n    \"\"\"Return the number of items in the queue.\"\"\"\n    return self.queue.qsize()\n\n  def peek(self):\n    \"\"\"Return the item with the highest priority in the queue without removing it.\"\"\"\n    if not self.is_empty():\n      return self.queue.queue[0][1]\n    else:\n      print(\"Queue is empty\")\n      return None\n\n# Example usage:\nif __name__ == \"__main__\":\n  grocery_queue = CustomPriorityQueue()\n  print(\"Initial queue:\", list(grocery_queue.queue.queue))\n\n  # Adding people to the queue with priorities\n  grocery_queue.enqueue(\"Venkat\", 2)\n  grocery_queue.enqueue(\"Suba\", 1)\n  grocery_queue.enqueue(\"Gutti\", 3)\n  print(\"Queue after adding people:\", list(grocery_queue.queue.queue))\n\n  # Serving people from the queue\n  serving_person = grocery_queue.dequeue()\n  print(\"Serving:\", serving_person)\n  print(\"Queue after serving:\", list(grocery_queue.queue.queue))\n\n  # Checking the next person to be served\n  next_person = grocery_queue.peek()\n  print(\"Next person to be served:\", next_person)\n</code></pre></p>"},{"location":"data_structures/queue/queue_priority#documentation","title":"Documentation","text":"<p>from queue import PriorityQueue</p> <p>class CustomPriorityQueue:   def init(self):     self.queue = PriorityQueue()</p> <p>def enqueue(self, item, priority):     self.queue.put((priority, item))</p> <p>def dequeue(self):     if not self.is_empty():       return self.queue.get()[1]     else:       print(\"Queue is empty\")       return None</p> <p>def is_empty(self):     return self.queue.empty()</p> <p>def size(self):     return self.queue.qsize()</p> <p>def peek(self):     if not self.is_empty():       return self.queue.queue0     else:       print(\"Queue is empty\")       return None</p>"},{"location":"data_structures/queue/queue_priority#example-usage","title":"Example usage:","text":"<p>if name == \"main\":   grocery_queue = CustomPriorityQueue()   print(\"Initial queue:\", list(grocery_queue.queue.queue))</p> <p># Adding people to the queue with priorities   grocery_queue.enqueue(\"Venkat\", 2)   grocery_queue.enqueue(\"Suba\", 1)   grocery_queue.enqueue(\"Gutti\", 3)   print(\"Queue after adding people:\", list(grocery_queue.queue.queue))</p> <p># Serving people from the queue   serving_person = grocery_queue.dequeue()   print(\"Serving:\", serving_person)   print(\"Queue after serving:\", list(grocery_queue.queue.queue))</p> <p># Checking the next person to be served   next_person = grocery_queue.peek()   print(\"Next person to be served:\", next_person)</p>"},{"location":"data_structures/stack/ReadMe","title":"Stack Time Complexity Table","text":"Operation Stack Access O(n) Search O(n) Insert (Push) O(1) Delete (Pop) O(1) Peek O(1)"},{"location":"data_structures/tree/ReadME","title":"Data Structures Types.","text":""},{"location":"data_structures/tree/ReadME#tree-non-linear-type","title":"Tree Non Linear Type","text":"Tree Type Insert Delete Traversal Binary Tree O(n) O(n) O(n) AVL Tree O(log n) O(log n) O(n) Red-Black Tree O(log n) O(log n) O(n)"},{"location":"data_structures/tree/binary-search-tree/binary-tree-vs-binary-search-tree","title":"Difference between Binary Tree vs Binary Search Tree (BST)","text":"<p>In General, a Binary Tree allows nodes to be added without any specific order, whereas a Binary Search Tree requires nodes to be inserted and maintained in a sorted manner, making search operations more efficient.</p> Feature Binary Tree Binary Search Tree (BST) Node Arrangement Any order Sorted order Search Efficiency Generally slower Faster Insertion Rule No specific rule Left &lt; Parent &lt; Right Ordering Not ordered Ordered Traversal Outcome Not sorted In-order gives sorted list Use Case General purpose Search-oriented tasks Balancing Not necessarily balanced May need balancing"},{"location":"data_structures/tree/binary-tree","title":"Binary-tree","text":"<p>This section covers binary-tree.</p> <ul> <li>binary-tree.py</li> <li>find-maximum-depth.py</li> <li>traversal.py</li> </ul>"},{"location":"data_structures/tree/binary-tree/binary-tree","title":"Binary Tree","text":"<p>File Name: binary-tree.py <pre><code>from stylepy import h1\nh1('\\n &gt;&gt;&gt; Binary Tree Implementation')\nprint('- each node has at most two children')\nprint('- referred to as the left child and the right child.')\nprint('- no specific ordering in terms of how nodes are arranged.')\nprint('    A')\nprint('   / \\\\')\nprint('  B   C')\nprint(' /   / \\\\')\nprint('D   E   F')\n</code></pre></p>"},{"location":"data_structures/tree/binary-tree/find-maximum-depth","title":"Find Maximum Depth","text":"<p>File Name: find-maximum-depth.py </p>"},{"location":"data_structures/tree/binary-tree/traversal","title":"Traversal","text":"<p>File Name: traversal.py </p>"},{"location":"data_structures/tree/general","title":"General","text":"<p>This section covers general.</p> <ul> <li>simple-tree.py</li> </ul>"},{"location":"data_structures/tree/general/simple-tree","title":"Simple Tree","text":"<p>File Name: simple-tree.py ```python</p>"},{"location":"data_structures/tree/general/simple-tree#from-testutils-import-solution_title-print_and_assert_new-gettestresult","title":"from testUtils import solution_title, print_and_assert_new, getTestResult","text":""},{"location":"data_structures/tree/general/simple-tree#from-commonutils-import-timecomplexity-spacecomplexity","title":"from commonUtils import timeComplexity, spaceComplexity","text":"<p>print('\\n &gt;&gt;&gt; Simple Tree Implementation')</p> <p>class TreeNode:     def init(self, value):         self.value = value         self.children = []</p> <pre><code>def add_child(self, child_node):\n    self.children.append(child_node)\n\ndef traverse_child(self):\n    nodes = [self]\n    while len(nodes) &gt; 0:\n        current_node = nodes.pop()\n        print('&gt;', current_node.value)\n        nodes += current_node.children\n</code></pre> <p>ceo = TreeNode('CEO') finance = TreeNode('Finance Head') marketing = TreeNode('Marketing Head') it = TreeNode('IT Head')</p> <p>ceo.add_child(finance) ceo.add_child(marketing) ceo.add_child(it)</p> <p>finance_lead = TreeNode('Finance Lead') marketing_lead = TreeNode('Marketing Lead') it_lead = TreeNode('IT Lead')</p> <p>finance.add_child(finance_lead) marketing.add_child(marketing_lead) it.add_child(it_lead)</p> <p>ceo.traverse_child()```</p>"},{"location":"data_types","title":"Data Types","text":"<p>This section covers data_types.</p> <ul> <li>commonUtils.py</li> </ul>"},{"location":"data_types/commonUtils","title":"Commonutils","text":"<p>File Name: commonUtils.py <pre><code>import pprint\nfrom stylepy import timeComplexity\nfrom stylepy import spaceComplexity\nfrom stylepy import h1,h2,h3,h4,h5,h5,h6\ndef timeComplexity(value, desc):\n    result = f'\\n \ud83d\udd52 Time Complexity: Approximately {value}'\n\n    if (desc):\n        result += f'\\n    Description: {desc}'\n    h4(result)\n\n\ntimeComplexity(\"value\", \"desc\")\n\ndef spaceComplexity(value, desc):\n    result = f' \ud83d\udcbe Space Complexity: Approximately {value}'\n\n    if (desc):\n        result += f'\\n    Description: {desc}'\n    h4(result)\n\nspaceComplexity(\"value\", \"desc\")\n\ndef print_h1(text):\n    h1(f\"\\n{'=' * 40}\\n{text}\\n{'=' * 40}\")\n\n\ndef print_h2(text):\n    h2(f\"\\n{'-' * 35}\\n{text}\\n{'-' * 35}\")\n\n\ndef print_h3(text):\n    h3(f\"\\n{text}\\n{'-' * 30}\")\n\n\ndef print_h4(*text):\n    combined_text = \" \".join(str(t) for t in text)  # Join all elements of text into one string\n    h4(f\"\\n{combined_text}\\n{'-' * 25}\")\n\ndef print_h5(text):\n    h5(f\"\\n{text}\\n{'-' * 20}\")\n\ndef print_h6(*text):\n    combined_text = \" \".join(str(t) for t in text)  # Join all elements of text into one string\n    h6(f\"\\n{combined_text}\\n{'-' * 15}\")\n\ndef print_span(*text):\n    combined_text = \" \".join(str(t) for t in text)  # Join all elements of text into one string\n    # Using ANSI escape code for bold text\n    h4(f\"&gt; \\033[1m{combined_text}\\033[0m\")\n\ndef print_ordered_list(items):\n    for i, item in enumerate(items, start=1):\n        h5(f\"{i}. {item}\")\n\n\ndef print_bullet_list(items, bullet_char='*'):\n    for item in items:\n        print(f\"{bullet_char} {item}\")\n\n\ndef print_blockquote(items, indent_char='&gt; ', emoji='\ud83d\udcac', new_line = False):\n    if (new_line):\n        print('\\n')\n    for item in items:\n        h6(f\"{emoji} {indent_char}{item}\")\n\n\ndef pretty_json(input):\n    pprint.pprint(input, width=50, indent=2)\n\ndef print_tabular_list(data, col_widths=None):\n    # Calculate column widths based on the data if not provided\n    if col_widths is None:\n        col_widths = [max(len(str(item)) for item in column) for column in zip(*data)]\n\n    def print_divider():\n        line = \"+\" + \"+\".join(\"-\" * width for width in col_widths) + \"+\"\n        h4(line)\n\n    def print_header_divider():\n        line = \"-\" * (sum(col_widths) + len(col_widths) - 1)\n        h5(line)\n\n    # Print the header row\n    print_divider()\n    header = data[0]\n    formatted_header = \"|\".join(\n        f\"{item:&lt;{col_widths[i]}}\" for i, item in enumerate(header))\n    h6(\"|\" + formatted_header + \"|\")\n    print_header_divider()\n\n    # Print the rest of the rows\n    for row in data[1:]:\n        formatted_row = \"|\".join(\n            f\"{item:&lt;{col_widths[i]}}\" for i, item in enumerate(row))\n        h5(\"|\" + formatted_row + \"|\")\n        print_header_divider()\n</code></pre></p>"},{"location":"data_types/binary/bytearray","title":"Bytearray","text":"<p>This section covers bytearray.</p> <ul> <li>basics.py</li> </ul>"},{"location":"data_types/binary/bytearray/basics","title":"Basics","text":"<p>File Name: basics.py ```python</p>"},{"location":"data_types/binary/bytearray/basics#python-modulepy-data_typesbinarybytearraybasicspy","title":"python module.py data_types/binary/bytearray/basics.py","text":""},{"location":"data_types/binary/bytearray/basics#python-m-data_typesbinarybytearray-data_typesbinarybytearraybasicspy","title":"python -m data_types.binary.bytearray data_types/binary/bytearray/basics.py","text":"<p>import sys import os</p>"},{"location":"data_types/binary/bytearray/basics#add-the-parent-directory-of-data_types-to-the-system-path","title":"Add the parent directory of 'data_types' to the system path","text":"<p>sys.path.append(os.path.abspath(os.path.join(os.path.dirname(file), '..', '..', '..')))</p> <p>from data_types import commonUtils as utils</p> <p>utils.print_h1('Byte Array Basics')</p> <p>utils.print_blockquote([])```</p>"},{"location":"data_types/binary/bytes","title":"Bytes","text":"<p>This section covers bytes.</p> <ul> <li>basics.py</li> </ul>"},{"location":"data_types/binary/bytes/basics","title":"Basics","text":"<p>File Name: basics.py ```python</p>"},{"location":"data_types/binary/bytes/basics#python-modulepy-data_typesbinarybytesbasicspy","title":"python module.py data_types/binary/bytes/basics.py","text":""},{"location":"data_types/binary/bytes/basics#python-m-data_typesbinarybytes-data_typesbinarybytesbasicspy","title":"python -m data_types.binary.bytes data_types/binary/bytes/basics.py","text":"<p>import sys import os</p>"},{"location":"data_types/binary/bytes/basics#add-the-parent-directory-of-data_types-to-the-system-path","title":"Add the parent directory of 'data_types' to the system path","text":"<p>sys.path.append(os.path.abspath(os.path.join(os.path.dirname(file), '..', '..', '..')))</p> <p>import data_types.commonUtils as utils</p> <p>utils.print_h1('Byte Basics')</p> <p>utils.print_blockquote([])```</p>"},{"location":"data_types/binary/memoryview","title":"Memoryview","text":"<p>This section covers memoryview.</p> <ul> <li>basics.py</li> </ul>"},{"location":"data_types/binary/memoryview/basics","title":"Basics","text":"<p>File Name: basics.py ```python</p>"},{"location":"data_types/binary/memoryview/basics#python-modulepy-data_typesbinarymemoryviewbasicspy","title":"python module.py data_types/binary/memoryview/basics.py","text":""},{"location":"data_types/binary/memoryview/basics#python-m-data_typesbinarymemoryview-data_typesbinarymemoryviewbasicspy","title":"python -m data_types.binary.memoryview data_types/binary/memoryview/basics.py","text":"<p>import data_types.commonUtils as utils</p> <p>utils.print_h1('Memory View Basics')</p> <p>utils.print_blockquote([])```</p>"},{"location":"data_types/boolean","title":"Boolean","text":"<p>This section covers boolean.</p> <ul> <li>basics.py</li> </ul>"},{"location":"data_types/boolean/basics","title":"Basics","text":"<p>File Name: basics.py <pre><code># python module.py data_types/boolean/basics.py\n# python -m data_types.boolean.basics data_types/boolean/basics.py\n\nimport data_types.commonUtils as utils\n\nutils.print_h1('Boolean Basics')\n\nshow_gender = False\nactively_looking_for_job = True\n\nutils.print_blockquote([\n  'Can Show Gender details in general? ' +\n  'No' if show_gender == False else 'Yes',\n  'Are you looking for job? ' + 'Yes' if actively_looking_for_job == True else 'No',\n  'True is treated as the integer 1 print(True == 1)   # Outputs: True ',\n  'False is treated as the integer print(False == 0)   # Outputs: True'\n])\n\nutils.print_blockquote([\n  'Arithmetic with booleans',\n  'print(True + True)  # Outputs: 2 (equivalent to 1 + 1)',\n  'print(True * 10)    # Outputs: 10 (equivalent to 1 * 10)',\n])\n\npost_graduated = False\n\nutils.print_blockquote([\n  'I have variable called post_graduated set to False'\n  'Trying to delete post_graduated by `del post_graduated` ',\n  'Try to print (print(post_graduated)) then system throws NameError: name post_graduated is not defined',\n  'Use Try/Catch to make sure if its deleted '\n])\n\ndel post_graduated\n\n# Throws NameError: name post_graduated is not defined\n# print(post_graduated)\n\ntry:\n    print(post_graduated)  # Try to access the variable\nexcept NameError:\n    utils.print_span(\"post_graduated has been deleted.\")\n</code></pre></p>"},{"location":"data_types/linear/array","title":"Array","text":"<p>This section covers array.</p> <ul> <li>array.py</li> </ul>"},{"location":"data_types/linear/array/array","title":"Array","text":"<p>File Name: array.py </p>"},{"location":"data_types/linear/list","title":"List","text":"<p>This section covers list.</p> <ul> <li>basics.py</li> <li>list_advanced.py</li> </ul>"},{"location":"data_types/linear/list/basics","title":"Basics","text":"<p>File Name: basics.py <pre><code>import data_types.commonUtils as utils\n\nutils.print_h1('List Basics')\n\nutils.print_ordered_list([\n    'List is Ordered (order will not be changed)',\n    'List is Changable'\n])\n\nfruits = ['apple', 'orange', 'cherry']\nprint('\\nCreated fruits list: ', fruits)\nprint('Access Apple: fruits[0]: ', fruits[0])\nprint('Adding New Fruit: Grape')\nfruits.append('grapes')\nprint('Picking Last item from fruit:', fruits[-1])\n\nprint('Iterating the Fruits')\nfor fruit in fruits:\n    print(' - ', fruit)\n\nmarks = [78, 90, 75, 61, 90]\nprint('\\nCreated marks list: ', marks);\nmarks.reverse()\nprint('Reversed the Marks using reverse(): ', marks);\nmarks.sort()\nprint('Sort the Marks in ascending using sort(): ', marks);\nmarks.sort(reverse=True)\nprint('Sort the Marks in descending using sort(reverse=True): ', marks);\nprint('marks : ', marks)\n\nconf = [True, False]\nprint('conf =: ', conf)\n\nemployee = ['Venkat', 37, 'Developer']\nprint('employ: ', employee)\n\n\n'''\n1. How iterator internally working?\n2. When do we go for list\n3. How memory allocation working in List data type?\n4. Which data structure can be created using List?\n'''\n</code></pre></p>"},{"location":"data_types/linear/list/list_advanced","title":"List Advanced","text":"<p>File Name: list_advanced.py ```python from stylepy import span from stylepy import h1,h2,h3,h4,h5,h6 text = \"\"\" Array is a collection of emlements. List is a array in python. For advanced array we can use numpy library</p> <p>\"\"\"</p>"},{"location":"data_types/linear/list/list_advanced#slice","title":"slice","text":"<p>list1 = [10, 20, 30, 40] list2 = list1[1:3] print(\"list1 \", list1) print(\"list2 \", list2 )</p> <p>print(\"if I want to include last time then how? \") list3 = list1[2:] print(\"list 3 with last time. starting with 2nd index[2:]\", list3)</p>"},{"location":"data_types/linear/list/list_advanced#copy-the-list","title":"copy the list","text":"<p>text = \"\"\" In Python, when you assign one list to another using = (as in list3 = list1),  you are creating a reference to the same list object, not a new copy of the list.</p> <p>\"\"\" h2(text)</p> <p>list3 = list1 print(\"assign list3 = list1 and print list3 \") print(\"list3\", list3)</p> <p>print(\"Amend the first index value for the list3 and print list1 and list3\") list3[0] = 1</p> <p>print(\"list1 \", list1 ) print(\"list3 \", list3 )</p> <p>text = \"\"\" Shallow Copy: A shallow copy creates a new object but does not create new objects  for the elements within the original object. It means that  the new object is a copy of the original one,  but the elements inside the objects still refer to the same objects.</p> <p>You can use the copy() method or the [:] slicing syntax  to create a shallow copy of a list: \"\"\"</p> <p>h2(text)</p> <p>original_list = [1, 2, 3, 4, 5]</p>"},{"location":"data_types/linear/list/list_advanced#using-copy-method","title":"Using copy() method","text":"<p>shallow_copy_1 = original_list.copy()</p>"},{"location":"data_types/linear/list/list_advanced#using-slicing-syntax","title":"Using slicing syntax","text":"<p>shallow_copy_2 = original_list[:]</p>"},{"location":"data_types/linear/list/list_advanced#assign-to-another-list","title":"Assign to another list","text":"<p>shallow_copy_3 = original_list</p>"},{"location":"data_types/linear/list/list_advanced#modifying-the-original-list","title":"Modifying the original list","text":"<p>original_list[0] = 10 h4(\"Original list\", original_list)      # Output: [10, 2, 3, 4, 5] h4(\"Shallow copy 1\", shallow_copy_1)    # Output: [1, 2, 3, 4, 5] h4(\"Shallow copy 2\", shallow_copy_2)    # Output: [1, 2, 3, 4, 5] h4(\"Shallow copy 3\", shallow_copy_3)    # Output: [10, 2, 3, 4, 5]</p> <p>del shallow_copy_3[0] h3(\"Original list after deleting shallow copy 3 \", original_list) h3(\"shallow_copy_1 list after deleting shallow copy 3 \", shallow_copy_1) h3(\"shallow_copy_2 list after deleting shallow copy 3 \", shallow_copy_2)</p> <p>print(\"The key concept is whether the elements inside the list are mutable or immutable.\") text = \"\"\" When you create a shallow copy of a list containing immutable objects,  modifying the original list's elements won't affect the shallow copy,  because the values of those elements cannot be changed \"\"\"</p> <p>h2(text)</p> <p>original_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] shallow_copy = original_list.copy()</p>"},{"location":"data_types/linear/list/list_advanced#modifying-an-element-inside-the-list","title":"Modifying an element inside the list","text":"<p>original_list0 = 10</p> <p>span(\"original list\", original_list)  # Output: [[10, 2, 3], [4, 5, 6], [7, 8, 9]] span(\"shallow_copy\", shallow_copy)   # Output: [[10, 2, 3], [4, 5, 6], [7, 8, 9]]</p> <p>text = \"\"\" What is shallow? </p> <p>shallow copy of a data structure like a list, you are creating a new structure that has the same outermost elements  as the original, but it doesn't recursively duplicate the elements inside  the structure. The depth of the copy is limited, and modifications  to the inner elements are shared between the original and the shallow copy \"\"\"</p> <p>h4(text)</p> <p>list1 = [10, 20 ,30 , 40 ]</p> <p>text = \"\"\" 1. len(): Returns the number of elements in a list.</p> <ol> <li> <p>max() and min(): Return the maximum and minimum values in a list, respectively.</p> </li> <li> <p>sum(): Returns the sum of all elements in a list.</p> </li> <li> <p>sorted(): Returns a new sorted list from the elements of the given iterable.</p> </li> <li> <p>list(): Converts an iterable (e.g., tuple, string, or another list) into a list.</p> </li> <li> <p>append(): Adds an element to the end of a list.</p> </li> <li> <p>extend(): Extends a list by appending elements from an iterable.</p> </li> <li> <p>insert(): Inserts an element at a specified position in a list.</p> </li> <li> <p>remove(): Removes the first occurrence of a specified value.</p> </li> <li> <p>pop(): Removes and returns the element at the specified index (default is the last element).</p> </li> <li> <p>index(): Returns the index of the first occurrence of a specified value in a list.</p> </li> <li> <p>count(): Returns the number of occurrences of a specified value in a list.</p> </li> <li> <p>reverse(): Reverses the order of elements in a list (in-place).</p> </li> <li> <p>copy(): Creates a shallow copy of a list.</p> </li> <li> <p>clear(): Removes all elements from a list.</p> </li> <li> <p>join(): Concatenates a list of strings into a single string using a specified delimiter.</p> </li> <li> <p>slice(): Returns a portion of a list using slicing.</p> </li> </ol> <p>\"\"\"</p> <p>print(text)```</p>"},{"location":"data_types/linear/list/list_advanced#documentation","title":"Documentation","text":""},{"location":"data_types/linear/list/list_advanced#slice_1","title":"slice","text":"<p>list1 = [10, 20, 30, 40] list2 = list1[1:3] print(\"list1 \", list1) print(\"list2 \", list2 )</p> <p>print(\"if I want to include last time then how? \") list3 = list1[2:] print(\"list 3 with last time. starting with 2nd index[2:]\", list3)</p>"},{"location":"data_types/linear/list/list_advanced#copy-the-list_1","title":"copy the list","text":"<p>h2(text)</p> <p>list3 = list1 print(\"assign list3 = list1 and print list3 \") print(\"list3\", list3)</p> <p>print(\"Amend the first index value for the list3 and print list1 and list3\") list3[0] = 1</p> <p>print(\"list1 \", list1 ) print(\"list3 \", list3 )</p> <p>h2(text)</p> <p>original_list = [1, 2, 3, 4, 5]</p>"},{"location":"data_types/linear/list/list_advanced#using-copy-method_1","title":"Using copy() method","text":"<p>shallow_copy_1 = original_list.copy()</p>"},{"location":"data_types/linear/list/list_advanced#using-slicing-syntax_1","title":"Using slicing syntax","text":"<p>shallow_copy_2 = original_list[:]</p>"},{"location":"data_types/linear/list/list_advanced#assign-to-another-list_1","title":"Assign to another list","text":"<p>shallow_copy_3 = original_list</p>"},{"location":"data_types/linear/list/list_advanced#modifying-the-original-list_1","title":"Modifying the original list","text":"<p>original_list[0] = 10 h4(\"Original list\", original_list)      # Output: [10, 2, 3, 4, 5] h4(\"Shallow copy 1\", shallow_copy_1)    # Output: [1, 2, 3, 4, 5] h4(\"Shallow copy 2\", shallow_copy_2)    # Output: [1, 2, 3, 4, 5] h4(\"Shallow copy 3\", shallow_copy_3)    # Output: [10, 2, 3, 4, 5]</p> <p>del shallow_copy_3[0] h3(\"Original list after deleting shallow copy 3 \", original_list) h3(\"shallow_copy_1 list after deleting shallow copy 3 \", shallow_copy_1) h3(\"shallow_copy_2 list after deleting shallow copy 3 \", shallow_copy_2)</p> <p>print(\"The key concept is whether the elements inside the list are mutable or immutable.\")</p> <p>h2(text)</p> <p>original_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]] shallow_copy = original_list.copy()</p>"},{"location":"data_types/linear/list/list_advanced#modifying-an-element-inside-the-list_1","title":"Modifying an element inside the list","text":"<p>original_list0 = 10</p> <p>span(\"original list\", original_list)  # Output: [[10, 2, 3], [4, 5, 6], [7, 8, 9]] span(\"shallow_copy\", shallow_copy)   # Output: [[10, 2, 3], [4, 5, 6], [7, 8, 9]]</p> <p>h4(text)</p> <p>list1 = [10, 20 ,30 , 40 ]</p> <p>print(text)</p>"},{"location":"data_types/linear/tuple","title":"Tuple","text":"<p>This section covers tuple.</p> <ul> <li>basics.py</li> </ul>"},{"location":"data_types/linear/tuple/basics","title":"Basics","text":"<p>File Name: basics.py ```python</p>"},{"location":"data_types/linear/tuple/basics#python-m-data_typescommonutils-data_typestuplesbasicspy","title":"python -m data_types.commonUtils data_types/tuples/basics.py","text":""},{"location":"data_types/linear/tuple/basics#python-m-data_typestuplesbasics-data_typestuplesbasicspy","title":"python -m data_types.tuples.basics data_types/tuples/basics.py","text":"<p>import data_types.commonUtils as utils</p> <p>utils.print_h1('Tuple Basics') utils.print_ordered_list([     'Tuple is Ordered (order will not be changed)',     'Tuple is Immutable',     'Convert to List for Mutation (Changing / Removing)' ])</p> <p>fruits = ('apple','banana', 'guava') subjects = ('english', 'science', 'maths', 'scoial') daily_cycle = ('morning', 'afternoon', 'dinner') exam_result = ('english', 80)</p> <p>fruit_list = list(fruits)</p> <p>fruits_subjects = fruits + subjects print(fruits_subjects)</p> <p>''' convert to the list [].(fruits) need to check whether order in place '''```</p>"},{"location":"data_types/non_linear/dictionaries","title":"Dictionaries","text":"<p>This section covers dictionaries.</p> <ul> <li>basics.py</li> <li>collision.py</li> </ul>"},{"location":"data_types/non_linear/dictionaries/basics","title":"Basics","text":"<p>File Name: basics.py <pre><code># python module.py data_types/dictionaries/basics.py\n# python -m data_types.dictionaries.basics data_types/dictionaries/basics.py\n\nimport data_types.commonUtils as utils\n\nutils.print_h1('Dictionary Basics')\nutils.print_ordered_list([\n    'Dictionary is Key pair values, Ordered (order will not be changed)',\n    'Dictionary is Changeable',\n    'Dictionary will not contain duplicate key',\n    'In Python 3.6, is unordered Python 3.7 is Ordered',\n    'Its good for fast lookups',\n    'Insertions, and deletions by using keys',\n    'Every Keys will be hashed using Hashing Algorithm'\n])\n\nutils.print_h3('Hashing Algorithm by Data Types')\nhashing_algorithm_by_data_types = [\n    (\" Key Type\", \" Hashing Algorithm/Method\"),\n    (\" String\", \" SipHash variant\"),\n    (\" Integer\", \" Identity hash (value itself with exceptions)\"),\n    (\" Float\", \" Based on internal representation\"),\n    (\" Boolean\", \" Same as Integer (True is 1, False is 0)\"),\n    (\" Tuple\", \" Combination of hashes of contents\"),\n    (\" Custom Object\", \" Defined by `__hash__` method (if implemented)\"),\n    (\" None\", \" Fixed hash value\")\n]\n\n# Print the table\nutils.print_tabular_list(hashing_algorithm_by_data_types)\n\nemployee = {\n    'name': 'Alice',\n    'age': 30,\n    'items': ['book', 'pen', 'notebook'],\n    'nested_dict': {\n        'key1': 'value1',\n        'key2': 'value2'\n    }\n}\n\nutils.print_blockquote([\n    'Lets take a example of below dictionary for employee.'\n])\n\nutils.pretty_json(employee)\n\nutils.print_blockquote([\n    'Lets add list and tuple as key and printing the employee again'\n])\n\nmarks = [100,70,90]\nsubjects = ('english', 70)\n# employee[marks] = 10 #throws TypeError: unhashable type: 'list'\nemployee[subjects] = 20\n\nutils.pretty_json(employee)\n\nutils.print_h1('Access')\nutils.print_blockquote([\n    'By Key: employee[\\'name\\']: ' + employee['name'],\n\n    'By get method: employee.get(\\'name\\'): ' + employee.get('name')\n])\n\n\nutils.print_h1('Exist Check / Search')\n\nname_key_exist = 'Yes' if('name' in employee) else 'No'\nname_key_exist_key_list = 'Yes' if('not_exist_key' in employee.keys()) else 'No'\n\ntry_catch_block_exist_check = ''\n\ntry:\n    value = employee['not_exist_key']\n    try_catch_block_exist_check = 'Yes'\n    # Key exists\nexcept KeyError:\n    try_catch_block_exist_check = 'No, got Key Error'\n    # Key doesn't exist\n\nutils.print_blockquote([\n    'By IN Operator: (\\'name\\' in employee): ' + name_key_exist,\n    'By keys() Method: (\\'notname\\' in employee.keys()): ' + name_key_exist_key_list,\n    'By Try Catch Block (not recommended): ' + try_catch_block_exist_check\n])\n\nutils.print_h1('Add / Insert')\n\nemployee['designation'] = 'Software Engineer'\nemployee.update({\n  'age': '34'\n})\nutils.print_blockquote([\n    'By key-value assignment: employee[\\'designation\\'] = \\'Software Engineer\\': ' + employee['designation'],\n    'By key-value assignment: employee.update({\\'age\\': \\'34\\'}): ' + employee['age'],\n])\n\n\nutils.print_h1('Remove / Delete')\nutils.print_h1('Iteration')\n</code></pre></p>"},{"location":"data_types/non_linear/dictionaries/collision","title":"Collision","text":"<p>File Name: collision.py ```python</p>"},{"location":"data_types/non_linear/dictionaries/collision#python-modulepy-data_typesdictionariescollisionpy","title":"python module.py data_types/dictionaries/collision.py","text":""},{"location":"data_types/non_linear/dictionaries/collision#python-m-data_typesdictionariescollision-data_typesdictionariescollisionpy","title":"python -m data_types.dictionaries.collision data_types/dictionaries/collision.py","text":"<p>import data_types.commonUtils as utils</p> <p>utils.print_h1('Hashing Basics') utils.print_ordered_list([     'Hashing concepts have been around since the 1950s and cryptography became prominent in the 1970s.'     'Process of converting an input (of any length) into a fixed-size string of bytes.',     'Typically for the purpose of security, indexing, or identification.',     'Output is known as a hash value or hash code.'     'Used for Data Retrieval in Hash Map / Dictionary, ',     'Used for Cryptography Security, hashing creates almost-unique identifiers for data for password storage, digital signatures, and message integrity checks',     'Used for Caching to identify data with unique hash values',     'Used for Load Balancing, consistent hashing helps in evenly distributing the load.' ])</p> <p>utils.print_h2('Collision in') utils.print_ordered_list([     'Even Modern programming languages use sophisticated hashing algorithms but collisions can still occur.',     'According to the Pigeonhole Principle, collisions (where different keys produce the same hash value) are inevitable.',     'Efficiency of a hashing algorithm lies in minimizing these collisions and dealing with them effectively when they occur.' ])</p> <p>print(''' | Language   | Hashing Algorithm           | |------------|-----------------------------| | Python     | SipHash                     | | Java       | Object.hashCode() method (varies based on object; often a variation of DJB2) | | JavaScript | V8 (Chrome, Node.js): One-at-a-time (variations) | |            | SpiderMonkey (Firefox): DJB2 (variations) | |            | JavaScriptCore (Safari): Engine-specific implementation | | C#         | .NET Framework: Marvin32 (with modifications) | | Go         | AEAD (AES-GCM) based algorithm |</p> <p>''');</p> <p>alamelu.gotara@gmail.com Code@2050 alamelu-gotara```</p>"},{"location":"data_types/non_linear/set","title":"Set","text":"<p>This section covers set.</p> <ul> <li>basics.py</li> </ul>"},{"location":"data_types/non_linear/set/basics","title":"Basics","text":"<p>File Name: basics.py <pre><code># python module.py data_types/non_linear/set/basics.py\n# python -m data_types.non_linear.set.basics data_types/set/basics.py\n\nimport data_types.commonUtils as utils\n\nutils.print_h1('Set Basics')\n</code></pre></p>"},{"location":"data_types/numeric/complex","title":"Complex","text":"<p>This section covers complex.</p> <ul> <li>basics.py</li> </ul>"},{"location":"data_types/numeric/complex/basics","title":"Basics","text":"<p>File Name: basics.py <code>python print('\\n &gt;&gt;&gt;&gt; Complex Number Example')</code></p>"},{"location":"data_types/numeric/float","title":"Float","text":"<p>This section covers float.</p> <ul> <li>commonUtils.py</li> <li>iteration.py</li> <li>testUtils.py</li> </ul>"},{"location":"data_types/numeric/float/commonUtils","title":"Commonutils","text":"<p>File Name: commonUtils.py ```python from stylepy import timeComplexity from stylepy import spaceComplexity def timeComplexity(value, desc):     result = f'\\n \ud83d\udd52 Time Complexity: Approximately {value}'</p> <pre><code>if (desc):\n    result += f'\\n    Description: {desc}'\nprint(result)\n</code></pre> <p>timeComplexity(\"value\", \"desc\") def spaceComplexity(value, desc):     result = f' \ud83d\udcbe Space Complexity: Approximately {value}'</p> <pre><code>if (desc):\n    result += f'\\n    Description: {desc}'\nprint(result)\n</code></pre> <p>spaceComplexity(\"value\", \"desc\")```</p>"},{"location":"data_types/numeric/float/iteration","title":"Iteration","text":"<p>File Name: iteration.py ```python</p>"},{"location":"data_types/numeric/float/iteration#run-command-python-m-data_typesfloatiteration-data_typesfloatiterationpy","title":"Run command - python -m data_types.float.iteration data_types/float/iteration.py","text":"<p>import data_types.integer.iterations as iterations</p> <p>print('\\n &gt;&gt;&gt;&gt; Float Iteration Example')</p> <p>mark = 78.88 weight = 68.50 height = 6.3 distance = 10.2 price = 27.50 latitude = 40.741895 longitude = -73.989308</p> <p>print('\\n &gt;&gt;&gt;&gt; Iterate using for loop with type casting to string') print(' &gt;&gt;&gt;&gt; Follow this approach on demand and Its not recommended') def iterateAfterTypeCasting(float_number):     formatted_number = \"{:.2f}\".format(float_number)     for text in formatted_number:         print(text)</p>"},{"location":"data_types/numeric/float/iteration#iterateaftertypecastingmark","title":"iterateAfterTypeCasting(mark)","text":""},{"location":"data_types/numeric/float/iteration#iterateaftertypecastingweight","title":"iterateAfterTypeCasting(weight)","text":""},{"location":"data_types/numeric/float/iteration#iterateaftertypecastingheight","title":"iterateAfterTypeCasting(height)","text":""},{"location":"data_types/numeric/float/iteration#iterateaftertypecastingdistance","title":"iterateAfterTypeCasting(distance)","text":""},{"location":"data_types/numeric/float/iteration#iterateaftertypecastingprice","title":"iterateAfterTypeCasting(price)","text":"<p>print('\\n &gt;&gt;&gt;&gt; Iterate using while loop with operators') number = 78.88</p>"},{"location":"data_types/numeric/float/iteration#handle-the-integer-part","title":"Handle the integer part","text":""},{"location":"data_types/numeric/float/iteration#handle-the-fractional-part","title":"# Handle the fractional part","text":""},{"location":"data_types/numeric/float/iteration#fractional_part-number-intnumber","title":"fractional_part = (number - int(number))","text":""},{"location":"data_types/numeric/float/iteration#fractional_part-intnumber-intnumber-100","title":"fractional_part = int((number - int(number)) * 100)","text":""},{"location":"data_types/numeric/float/iteration#rounded_fractional_part-roundfractional_part-2","title":"rounded_fractional_part = round(fractional_part, 2)","text":""},{"location":"data_types/numeric/float/iteration#rounded_fractional_part_2-intfractional_part-100-05-1000","title":"rounded_fractional_part_2 = int(fractional_part * 100 + 0.5) / 100.0","text":""},{"location":"data_types/numeric/float/iteration#printfractional_part-fractional_part","title":"print('fractional_part', fractional_part)","text":""},{"location":"data_types/numeric/float/iteration#printrounded_fractional_part-rounded_fractional_part","title":"print('rounded_fractional_part', rounded_fractional_part)","text":""},{"location":"data_types/numeric/float/iteration#printrounded_fractional_part_2-rounded_fractional_part_2","title":"print('rounded_fractional_part_2', rounded_fractional_part_2)","text":"<p>def iterateWithoutTypeCasting(float_number):     i=1</p> <pre><code>f = float_number\nwhile True:\n    if round(f, i) * (10**i) - f*(10**i) ==0:\n        break\n    i+=1\n    num = f*(10**i)\n\niterations.iterateInteger(int(num))\n</code></pre>"},{"location":"data_types/numeric/float/iteration#iteratewithouttypecastingmark","title":"iterateWithoutTypeCasting(mark)","text":""},{"location":"data_types/numeric/float/iteration#iteratewithouttypecastingweight","title":"iterateWithoutTypeCasting(weight)","text":""},{"location":"data_types/numeric/float/iteration#iteratewithouttypecastingheight","title":"iterateWithoutTypeCasting(height)","text":""},{"location":"data_types/numeric/float/iteration#iteratewithouttypecastingdistance","title":"iterateWithoutTypeCasting(distance)","text":""},{"location":"data_types/numeric/float/iteration#iteratewithouttypecastingprice","title":"iterateWithoutTypeCasting(price)","text":""},{"location":"data_types/numeric/float/iteration#iteratewithouttypecastinglatitude","title":"iterateWithoutTypeCasting(latitude)","text":"<p>iterateWithoutTypeCasting(longitude)</p>"},{"location":"data_types/numeric/float/iteration#printn-iterate-using-for-loop-with-range","title":"print('\\n &gt;&gt;&gt;&gt; Iterate using for loop with range')```","text":""},{"location":"data_types/numeric/float/testUtils","title":"Testutils","text":"<p>File Name: testUtils.py ```python failures = 0</p> <p>def flag_failure():     global failures     failures = (failures or 0) + 1</p> <p>def failure_count():     return failures</p> <p>def solution_title(title):     print('=' * 70)     print(f'&gt;&gt;&gt; {title}')     print('=' * 70)</p> <p>def print_and_assert(function_name, param, expected):     try:         assert function_name(param) == expected         print(f'\u2705 Pass: {function_name.name}({param}) is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}({param}) is returning {function_name(param)} but <code>{expected}</code> is expected')</p> <p>def print_and_assert_new(function_name, params, expected):     try:         assert function_name(params) == expected         print(f'\u2705 Pass: {function_name.name}{params} is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}{params} is returning {function_name(*params)} but <code>{expected}</code> is expected')</p> <p>def getTestResult(testName):     if (failure_count() &gt; 0):         print(f\"{failure_count()} Failure in {testName} tests\")     else:         print(f\"{testName} tests are passed!\")```</p>"},{"location":"data_types/numeric/integer","title":"Integer","text":"<p>This section covers integer.</p> <ul> <li>iterations.py</li> </ul>"},{"location":"data_types/numeric/integer/iterations","title":"Iterations","text":"<p>File Name: iterations.py <pre><code># python module.py data_types/numeric/integer/iterations.py\n# python -m data_types.numeric/integer data_types/numeric/integer/iterations.py\n\nimport data_types.commonUtils as utils\n\nutils.print_h1('Integer Iterations')\n\nutils.print_blockquote([\n  'Types are short, long, int32, int64',\n  'Binary, Octal, and Hexadecimal Integers',\n  'Underscores in Numeric Literals (Python 3.6+) ex: large_num = 1_000_000'\n])\n\nsalary = 9000\nincrement = 500\n\nprint('\\n &gt;&gt;&gt;&gt; Iterate using for loop with type casting')\nprint(' &gt;&gt;&gt;&gt; Follow this approach on demand and Its not recommended')\nfor text in str(salary):\n    print(text)\n\n# print('\\n &gt;&gt;&gt;&gt; Iterate using while loop')\n# def iterateInteger(integer_number):\n#     stack = []\n#     while integer_number &gt; 0:\n#         digit = integer_number % 10\n#         stack.append(digit)\n#         integer_number //= 10\n\n#     while stack:\n#         print(stack.pop())\n\n# iterateInteger(salary)\n\n# def iterateInteger(integer_number):\n#     stack = []\n#     while integer_number &gt; 0:\n#         digit = integer_number % 10\n#         stack.append(digit)\n#         integer_number //= 10\n\n#     while stack:\n#         print(stack.pop())\n\ndef find_digit_position(number, digit_to_find):\n    original_number = number\n    position = 1\n    while number &gt;= 10:\n        if number % 10 == digit_to_find:\n            return len(str(original_number)) - position + 1\n        number //= 10\n        position += 1\n    # Check the last digit\n    return 1 if number == digit_to_find else -1\n\n# Test the function with the number 9000 and digit 9\nfind_digit_position_number = 8778890942\nfind_number = 0\nprint(f'Position of {find_number} from {find_digit_position_number} is ', find_digit_position(find_digit_position_number, find_number))\n</code></pre></p>"},{"location":"data_types/string","title":"String","text":"<p>This section covers string.</p> <ul> <li>basics.py</li> <li>iterations.py</li> <li>slicing.py</li> </ul>"},{"location":"data_types/string/basics","title":"Basics","text":"<p>File Name: basics.py ```python import data_types.commonUtils as utils</p> <p>utils.print_h1('String Basics Example')</p> <p>language = 'Python'</p> <p>mid_index = (len(language) // 2) - 1 # decrement by 1 since length is 6 and index from 0 - 5</p> <p>utils.print_ordered_list([   f'Finding Length using len(str): \"{language}\" is , {len(language)}',   f'Middle character index of \"{language}\" is {mid_index} and char is {language[mid_index]} Using ',   f'6 different ways of String concatenations (+, %, join, format, fstring, += Operator)',   f'6 different ways of String Substring (slicing, find, index, regEx, strip, partition)'   f'7 different ways of Contains String check (in, find, index, count, regEx, startswith, endswith)'   f'In Python, strings are immutable in nature' ])</p> <p>greet = 'Hello' name = 'Venkat.R'</p> <p>print('\\n') six_ways_of_string_concatenation = [     (\" Approach\", \" Example Code\", \" Time Complexity\", \" Space Complexity\"),     (\" Using + Operator\", \" greet + name\", \" O(n + m)\", \" O(n + m)\"),     (\" Using % Operator\", \" '%s%s' % (greet, name)\", \" O(n + m)\", \" O(n + m)\"),     (\" Using join() Method\", \" ''.join([greet, name])\", \" O(n)\", \" O(n)\"),     (\" Using format() Method\", \" '{}{}'.format(greet, name)\", \" O(n + m)\", \" O(n + m)\"),     (\" Using f-String (Python 3.6+)\", \" f'{greet}{name}'\", \" O(n + m)\", \" O(n + m)\"),     (\" Using String Concatenation with +=\", \" greet += name\", \" O(nm)\", \" O(nm)\") ]</p> <p>utils.print_tabular_list(six_ways_of_string_concatenation)</p> <p>utils.print_h6('We have greet variable hold \"Hello\" and name hold \"Venkat.R\"') concatenated_by_plus_operator = greet + ' ' + name utils.print_span('Using + Operator: ', concatenated_by_plus_operator) utils.print_span('Using String join method: ', ''.join([greet, ' ', name])) utils.print_span('Using % Operator: ', \"%s %s\" % (greet, name)) utils.print_span('Using String format() Method: ', '{} {}'.format(greet, name)) utils.print_span('Using f-String (Python 3.6+): ', f'{greet} {name}') greet += name utils.print_span('Using String Concatenation with +=: ', greet, '\\n')</p> <p>six_ways_of_substring_methods = [     (\" Approach\", \" Example Code\", \" Time Complexity\", \" Space Complexity\"),     (\" Slicing\", \" 'Python'[1:4]\", \" O(k)\", \" O(k)\"),     (\" str.split() &amp; Indexing\", \" 'a,'.split(',')[1]\", \" O(n)\", \" O(n)\"),     (\" str.find() or str.index() &amp; Slicing\", \" s = 'P'; s[s.find('th'):]\", \" O(n)\", \" O(k)\"),     (\" Regular Expression (re module)\", \" re.search('y.*o', 'Python').group()\", \" O(n)\", \" O(k)\"),     (\" str.strip()/str.rstrip()/str.lstrip()\", \"' P '.strip()\", \" O(n)\", \" O(n)\"),     (\" str.partition() &amp; Indexing\", \" 'P'.partition('-')[0]\", \" O(n)\", \" O(n)\") ]</p> <p>utils.print_tabular_list(six_ways_of_substring_methods)</p> <p>word = 'An Apple' utils.print_h6('We have word variable hold \"An Apple\"') utils.print_span('Using Slice Notation: [start:stop:step]', word[3:]) slice_object = slice(3, None) utils.print_span('Using Slice Object (it is flexibility assiging as variable, argument, dynamic slicing):', word[slice_object]) utils.print_span('Using split() split multiple occurrence, returns list: ', word.split(' ')[1]) utils.print_span('Using partition() split first occurrence, returns tuple: ', word.partition(' ')[1]) utils.print_span('Using find() return index, -1 when not found:', word[word.find('A'):]) utils.print_span('Using index() return index, ValueError when not found:', word[word.index(' A'):]) import re utils.print_span('Using Regular Expression():', re.search('Ap.*e', word).group()) utils.print_span('Using strip():', word.strip('An'))</p> <p>seven_ways_of_contain_check = [     (\" Approach\", \" Example Code\", \" Time Complexity\", \" Space Complexity\"),     (\" in Operator\", \" 'apple' in 'apple pie'\", \" O(n)\", \" O(1)\"),     (\" str.find() Method\", \" 'apple pie'.find('apple') != -1\", \" O(n)\", \" O(1)\"),     (\" str.index() Method\", \" try: 'apple'.index('pl') except ValueError: pass\", \" O(n)\", \" O(1)\"),     (\" str.count() Method\", \" 'apple'.count('pl') &gt; 0\", \" O(n)\", \" O(1)\"),     (\" Regular Expression (re module)\", \" import re; bool(re.search('pl', 'apple'))\", \" O(n)\", \" O(1)\"),     (\" str.startswith() Method\", \" 'apple pie'.startswith('apple')\", \" O(k)\", \" O(1)\"),     (\" str.endswith() Method\", \" 'apple pie'.endswith('pie')\", \" O(k)\", \" O(1)\") ]</p> <p>utils.print_tabular_list(seven_ways_of_contain_check)</p> <p>utils.print_span('Most Efficient Method is <code>in</code>: apple pie contain apple?', 'apple' in 'apple pie')</p> <p>seven_ways_of_string_comparison_methods = [     (\" Approach\", \" Example Code\", \" O(Time) \", \" O(Space)\"),     (\" Equality Operator ==\", \" str1 == str2\", \" O(n)\", \" O(1)\"),     (\" str.casefold()\", \" str1.casefold() == str2.casefold()\", \" O(n)\", \" O(n)\"),     (\" str.lower() or str.upper()\", \" str1.lower() == str2.lower()\", \" O(n)\", \" O(n)\"),     (\" locale.strcoll() for Locale Compare\", \" import locale; locale.strcoll(str1, str2)\", \" Locale-Specific\", \" Locale-Specific\"),     (\" str.startswith() or str.endswith()\", \" str1.startswith(str2) or str1.endswith(str2)\", \" O(k)\", \" O(1)\"),     (\" Lexicographical Compare using &gt; or &lt;\", \" str1 &gt; str2 or str1 &lt; str2\", \" O(n)\", \" O(1)\"),     (\" Identity Operator Not for value is\", \" str1 is str2\", \" O(1)\", \" O(1)\") ]</p> <p>utils.print_tabular_list(seven_ways_of_string_comparison_methods)</p> <p>def char_and_ascii(s):     return [(char, ord(char)) for char in s]</p>"},{"location":"data_types/string/basics#example-usage","title":"Example usage","text":"<p>result = char_and_ascii(\"An Apple\") print(result)</p> <p>str1 = \"apple\" str2 = \"apple pie\"</p> <p>utils.print_h6('Compare the strings lexicographically str1, str2 ', str1, str2) if str1 &lt; str2:     utils.print_span(f\"{str1} comes before {str2} lexicographically\") elif str1 &gt; str2:     utils.print_span(f\"{str1} comes after {str2} lexicographically\") else:     utils.print_span(\"The strings are equal\")   </p> <p>char_conversion_functions = [     (\" Function\", \" Description\", \" Example Input\", \" Example Output\"),     (\" <code>ord()</code>\", \" Converts a character to its Unicode code point.\", \" <code>ord('A')</code>\", f' {ord(\"A\")}  '),     (\" <code>chr()</code>\", \" Converts a Unicode code point to its character.\", \" <code>chr(65)</code>\", f' {chr(65)} '),     (\" <code>hex()</code>\", \" Converts an integer to a lowercase hexadecimal string.\", \" <code>hex(255)</code>\", f' {hex(255)}  '),     (\" <code>bin()</code>\", \" Converts an integer to a binary string.\", \" <code>bin(7)</code>\", \" '0b111'\"),     (\" <code>int()</code>\", \" Converts a string or number to an integer (base 10 by default, can specify base).\", \" <code>int('0xff', 16)</code>\", \" 255\"),     (\" <code>format()</code>\", \" Formats a number into a string, can specify format (like hexadecimal).\", \" <code>format(255, 'x')</code>\", \" 'ff'\") ]</p> <p>utils.print_tabular_list(char_conversion_functions)</p> <p>utils.print_h6('Palindrome Check using StringIO')</p> <p>import io</p> <p>def is_palindrome(s):     # Create a StringIO object to manipulate the string     buffer = io.StringIO()</p> <pre><code># Remove spaces and convert to lowercase\ns = s.replace(\" \", \"\").lower()\n\n# Write the string in reverse to the buffer\nfor char in reversed(s):\n    buffer.write(char)\n\n# Get the reversed string from the buffer\nreversed_s = buffer.getvalue()\n\n# Close the buffer\nbuffer.close()\n\n# Check if the original string and the reversed string are the same\nreturn s == reversed_s\n</code></pre>"},{"location":"data_types/string/basics#example-usage_1","title":"Example usage","text":"<p>utils.print_span(\"'A man a plan a canal Panama' is\", is_palindrome(\"A man a plan a canal Panama\"))  # True utils.print_span(\"'Hello is'\", is_palindrome(\"Hello\"))                      # False</p> <p>print(''' +----------------------+------------------------+ |       Category       |      Decimal Range     | +----------------------+------------------------+ |      Basic Latin     |        0 to 127        | |         Latin-1      |       128 to 255       | |    Latin-Extended    |       256 to 383       | |         Greek        |       913 to 969       | |       Cyrillic       |      1024 to 1279      | |        Symbols       |      8192 to 11263     | |   Numbers &amp; Digits   |        48 to 57        | |       Exponents      |      8304 to 8343      | |        Complex       |    119808 to 120831    | |      Upper Case      |        65 to 90        | |      Lower Case      |        97 to 122       | +----------------------+------------------------+</p> <p>''')</p> <p>def get_unicode_characters(string):     unicode_characters = []     for char in string:         unicode_characters.append(ord(char))     return unicode_characters</p> <p>char = 'Venkatraman' print(f\"get_unicode_characters('{char}')\", get_unicode_characters(char))```</p>"},{"location":"data_types/string/iterations","title":"Iterations","text":"<p>File Name: iterations.py <pre><code>from stylepy import h1,h2,h3\nh1('\\n &gt;&gt;&gt;&gt; String Iteration Example')\n\ngreet = 'welcome'\n\nh3('\\n &gt;&gt;&gt;&gt; Iterate using for loop')\nfor word in greet:\n    print(word)\n\nh3('\\n &gt;&gt;&gt;&gt; Iterate using while loop')\nindex = 0\nwhile index &lt; len(greet):\n    print(greet[index])\n    index += 1\n</code></pre></p>"},{"location":"data_types/string/slicing","title":"Slicing","text":"<p>File Name: slicing.py <pre><code>from stylepy import h1,h2,h3,h4,h5,h6\nh1('\\n &gt;&gt;&gt;&gt; String Slicing Example')\nprint('s[start:end] extracts the substring from index start to lesser than end index / end - 1.')\nprint('s[start:end:step] extracts the substring from index start to lesser than end index / end - 1')\n\ngreet = \"welcome\"\ndebit_card = \"1234-5678-9012-3456\"\nslicing_detailed_desc = '''Avul Pakir Jainulabdeen Abdul Kalam BR (/\u02c8\u0251\u02d0bd\u0259l k\u0259\u02c8l\u0251\u02d0m/ \u24d8; 15 October 1931 \u2013 27 July 2015) was an Indian aerospace scientist and statesman who served as the 11th president of India from 2002 to 2007. He was born and raised in Rameswaram, Tamil Nadu and studied physics and aerospace engineering. He spent the next four decades as a scientist and science administrator, mainly at the Defence Research and Development Organisation (DRDO) and Indian Space Research Organisation (ISRO) and was intimately involved in India's civilian space programme and military missile development efforts.[1] He thus came to be known as the Missile Man of India for his work on the development of ballistic missile and launch vehicle technology.[2][3][4] He also played a pivotal organisational, technical, and political role in India's Pokhran-II nuclear tests in 1998, the first since the original nuclear test by India in 1974.[5]'''\ntutorial_site = 'https://webslate.io/blogs/algorithms/big-o-notations'\nemail_id = 'username@example.com'\nphone_number = '+1-800-555-1234'\nfile_name = 'slicing.pdf'\ntransaction_timestamp = '2023-01-15 09:30:00'\n\nh4('\\n &gt;&gt;&gt;&gt; Get last four digit of debit card', '[-4:]')\nprint(debit_card[-4:])\n\nh4('\\n &gt;&gt;&gt;&gt; Get short description from long string', '[:140]')\nprint(slicing_detailed_desc[:140], '...')\n\nh4('\\n &gt;&gt;&gt;&gt; Get Mobile Country and Area Code', '[0:6]')\nprint(phone_number[0:6])\n\nh4('\\n &gt;&gt;&gt;&gt; Get US Mobile Number without Country Code', '[3:]')\nprint(phone_number[3:])\n\nh4('\\n &gt;&gt;&gt;&gt; Get File extension', '[-3]')\nprint(file_name[-3:])\n\nh4('\\n &gt;&gt;&gt;&gt; Get Transaction Date', '[0:10]')\nprint(transaction_timestamp[:10])\nprint('\\n &gt;&gt;&gt;&gt; Get Transaction Date in DD-MM-YYYY', '[0:10]')\nprint(f'{transaction_timestamp[8:10]}-{transaction_timestamp[5:7]}-{transaction_timestamp[:4]}')\n\nh4('\\n &gt;&gt;&gt;&gt; Get Transaction Year', '[0:4]')\nprint(transaction_timestamp[:4])\n\nh4('\\n &gt;&gt;&gt;&gt; Get Transaction Month', '[5:7]')\nprint(transaction_timestamp[5:7])\n\nh4('\\n &gt;&gt;&gt;&gt; Get Transaction Time with seconds', '[-8:] / [11:]')\nprint(transaction_timestamp[-8:])\nprint(transaction_timestamp[11:])\n\nh4('\\n &gt;&gt;&gt;&gt; Get Transaction hour in Time without seconds', '[-8:-3]')\nprint(transaction_timestamp[-8:-3])\n\nh4('\\n &gt;&gt;&gt;&gt; Get Time String Revered', '[::-1]')\nprint(transaction_timestamp[::-1])\n</code></pre></p>"},{"location":"defs","title":"Defs","text":"<p>This section covers defs.</p> <ul> <li>commonUtils.py</li> <li>count_pair_for_max.py</li> <li>print-even-numbers.py</li> <li>print_all_primes.py</li> <li>print_even_sequence.py</li> <li>split.py</li> <li>testUtils.py</li> </ul>"},{"location":"defs/commonUtils","title":"Commonutils","text":"<p>File Name: commonUtils.py ```python from stylepy import timeComplexity from stylepy import spaceComplexity from stylepy import h1,h2,h3,h4,h5,h5,h6 def timeComplexity(value, desc):     result = f'\\n \ud83d\udd52 Time Complexity: Approximately {value}'</p> <pre><code>if (desc):\n    result += f'\\n    Description: {desc}'\nh4(result)\n</code></pre> <p>timeComplexity(\"value\",\"desc\") def spaceComplexity(value, desc):     result = f' \ud83d\udcbe Space Complexity: Approximately {value}'</p> <pre><code>if (desc):\n    result += f'\\n    Description: {desc}'\nh4(result)\n</code></pre> <p>spaceComplexity(\"value\",\"desc\")```</p>"},{"location":"defs/count_pair_for_max","title":"Count Pair For Max","text":"<p>File Name: count_pair_for_max.py ```python from stylepy import h1,h2,h3,h4,h5,h6 from testUtils import print_and_assert, getTestResult</p> <p>h2('\\n &gt;&gt;&gt; Find Two Sum is equal Max Number in list') h2(' &gt;&gt;&gt;&gt; Count Pairs for Sum of 2 numbers = Max Number')</p> <p>def count_pairs_which_sum_to_max(number_list):     max_number = max(number_list)     count = 0</p> <pre><code>for left in range(0, len(number_list)):\n    # print('left is', left)\n    for right in range(left + 1, len(number_list)):\n        left_value = number_list[left]\n        right_value = number_list[right]\n        if (left_value + right_value == max_number):\n            print(left_value, right_value, max_number)\n            count += 1\n\nreturn count\n</code></pre> <p>h2('\\n &gt;&gt;&gt; Test Cases') print_and_assert(count_pairs_which_sum_to_max, [1,2,3,4,5,6], [2,4,6])</p> <p>getTestResult('Find Two Sum is equal Max Number in list')```</p>"},{"location":"defs/print-even-numbers","title":"Print Even Numbers","text":"<p>File Name: print-even-numbers.py ```python from testUtils import print_and_assert, getTestResult from stylepy import h1 def print_event_numbers(number_list):     even_numbers = []     for number in number_list:         if (number % 2 == 0):              even_numbers.append(number)     return even_numbers</p> <p>h1('\\n &gt;&gt;&gt; Print Event Numbers List Test Cases') print_and_assert(print_event_numbers, [1,2,3,4,5,6], [2,4,6]) print_and_assert(print_event_numbers, [0], [0]) print_and_assert(print_event_numbers, [], []) print_and_assert(print_event_numbers, [], []) print_and_assert(print_event_numbers, [], []) print_and_assert(print_event_numbers, [], [])</p> <p>getTestResult('Print Event Numbers List')```</p>"},{"location":"defs/print_all_primes","title":"Print All Primes","text":"<p>File Name: print_all_primes.py ```python from stylepy import h1 from testUtils import print_and_assert, getTestResult</p> <p>def is_prime_using_power_of_point_5(n):     if n &lt;= 1:         return False     # for i in range(2, int(n**0.5) + 1):     for i in range(2, (n//2) + 1):         if n % i == 0:             return False     return True</p> <p>def is_prime_using_floor_division(number_in_element):     if number_in_element &lt; 2:         return False     for i in range(2, (number_in_element//2) + 1):         if number_in_element % i == 0:             return False     return True</p> <p>def is_prime(number_in_element):     if number_in_element &lt; 2:         return False     for i in range(2, number_in_element):         if number_in_element % i == 0:             return False     return True</p> <p>def print_all_primes_from_array(array):     prime_numbers = []     for k in array:         if is_prime(k):             prime_numbers.append(k)     return prime_numbers</p> <p>def print_all_primes_from_range(number_range):     prime_numbers = []     for k in range(0, number_range + 1):         if is_prime(k):             prime_numbers.append(k)     return prime_numbers</p> <p>h1('\\n &gt;&gt;&gt; Print All Prime Numbers from Range Test Cases') print_and_assert(print_all_primes_from_range, 5, [2,3,5]) print_and_assert(print_all_primes_from_range, 10, [2,3,5,7]) print_and_assert(print_all_primes_from_range, 20, [2,3,5,7,11,13,17,19]) print_and_assert(print_all_primes_from_range, 20, [2,3,5,7,11,13,17,19,21]) getTestResult('Print All Prime Numbers from Range')</p> <p>h1('\\n &gt;&gt;&gt; Print All Prime Numbers from Input Array Test Cases') print_and_assert(print_all_primes_from_array, [1,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,19,20], [2,3,5,7,11,13,17,19]) getTestResult('Print All Prime Numbers from Input Array')```</p>"},{"location":"defs/print_even_sequence","title":"Print Even Sequence","text":"<p>File Name: print_even_sequence.py ```python from stylepy import h3,h2,h4 def print_even_sequence(array):   for a in array:     if a % 2 == 0:       print(\"\\nSequence for {0}\".format(a))       for k in range(0,a):         print(k, end=\" \")</p> <p>print_even_sequence([10, 22, 33, 44, 55, 66, 77]) h2('\\n Here O(a * k) , where a = size of array and k is largest even')</p> <p>h3('\\n\\n \ud83d\udd52 Time Complexity: Approximately O(n \u00d7 m) \\n In the worst case, where n is the length of the array and m is the average size of the even numbers. However, the actual time complexity can vary significantly based on the contents of the input array.') h3('\\n \ud83d\udcbe Space Complexity: O(1) \\n As it only uses a constant amount of additional memory.')```</p>"},{"location":"defs/split","title":"Split","text":"<p>File Name: split.py ```python from stylepy import h1,h4,h2,h3 h1('\\n &gt;&gt;&gt;&gt; Split String Example');</p> <p>original = \"Hello, World!\" target = original.split(\",\") h3(\"Using Native Split function: \", target)</p>"},{"location":"defs/split#faced-taberror-inconsistent-use-of-tabs-and-spaces-in-indentation","title":"Faced <code>TabError: inconsistent use of tabs and spaces in indentation</code>","text":"<p>def splitString(text, sepearator):   word = ''   splitted_list = []</p> <p>for char in text:     if char == sepearator:         splitted_list.append(word)         word = ''     else:         word += char</p> <p>if word != '':       splitted_list.append(word)</p> <p>return splitted_list</p> <p>h4('Using Custom function: ', splitString(original, ',')) h4('Custom Def Time and Space Complexity is O(n)')```</p>"},{"location":"defs/testUtils","title":"Testutils","text":"<p>File Name: testUtils.py ```python failures = 0</p> <p>def flag_failure():     global failures     failures = (failures or 0) + 1</p> <p>def failure_count():     return failures</p> <p>def solution_title(title):     print('=' * 70)     print(f'&gt;&gt;&gt; {title}')     print('=' * 70)</p> <p>def print_and_assert(function_name, param, expected):     try:         assert function_name(param) == expected         print(f'\u2705 Pass: {function_name.name}({param}) is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}({param}) is returning {function_name(param)} but <code>{expected}</code> is expected')</p> <p>def print_and_assert_new(function_name, params, expected):     try:         assert function_name(params) == expected         print(f'\u2705 Pass: {function_name.name}{params} is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}{params} is returning {function_name(*params)} but <code>{expected}</code> is expected')</p> <p>def getTestResult(testName):     if (failure_count() &gt; 0):         print(f\"{failure_count()} Failure in {testName} tests\")     else:         print(f\"{testName} tests are passed!\")```</p>"},{"location":"functions","title":"Functions","text":"<p>This section covers functions.</p> <ul> <li>lambda.py</li> <li>simple_function.py</li> </ul>"},{"location":"functions/lambda","title":"Lambda","text":"<p>File Name: lambda.py <pre><code>text = \"\"\"\n\nWhat is lambda in python? \n\nIt is anonymous function \nIt can take many number of arguments\nIt can only have one expression\nIt is written as a single line of execution\nIt does not support type annotations\nIt can be immediately invoked (IIFE)\n\n\nLambda functions are frequently used with\nhigher-order functions, which take one or more functions as arguments \nor return one or more functions.\nfilter(), sort(), sorted(), min(), and max()\n\nA lambda function can't contain any statements.\nStatements like return, pass, assert, or\nraise will raise a Syntax Error exception\n\"\"\"\n\n# SyntaxError: Lambda expression parameters cannot be parenthesized\n# greet = lambda (name, greeting) : f'Hi Mr. {name}, Good {greeting}!'\n\n# greet = lambda name, greeting : f'Hi Mr. {name}, Good {greeting}!'\n# greet = (lambda name: str, greeting: str)(f'Hi Mr. {name}, Good {greeting}!')\n# print(greet('Venkat', 'Morning'))\n\n# Throws type_annotation = (lambda x: int, y: int ,z: int : x + y + z)(2, 5, 7)\n#                            ^\n# SyntaxError: invalid syntax\n\nprint(text)\nprint(\"\"\"  \"\"\" )\nprint(\"anonymous function\")\nprint(\"--------------------------------\")\nadd_value = lambda x : x + 10\nprint(\"Add Value\", add_value(2))\n\nprint(\"\"\"  \"\"\" )\nprint(\"More than one arguments for lambda\")\nprint(\"--------------------------------\")\nadd_value_more_arguments = (lambda x, y ,z : x + y + z)(2, 5, 7)\nprint(\"Add Value(more arguments)\", add_value_more_arguments)\n\nprint(\"\"\"  \"\"\" )\nprint(\"Type annotation is not supported\")\nprint(\"--------------------------------\")\n# type_annotation = (lambda x: int, y: int ,z: int : x + y + z)(2, 5, 7)\n# print(\"Type annotation is not supported\", type_annotation)\nprint(\"\"\"  \"\"\" )\nprint(\"Square number without lambda\")\nprint(\"--------------------------------\")\ndef square(a):\n  return a**2\n\nprint(' square(7): ',  square(7))\n\nnumbers = [1, 2, 3, 4, 5,]\nsquared = list(map(square, numbers))\nprint(\"Numbers: \", numbers,)\nprint(\"Squared Numbers\", squared)\n\nprint(\"\"\"  \"\"\" )\nprint(\"Square number with lambda\")\nprint(\"--------------------------------\")\nnumbers = [1, 2, 3, 4, 5,]\nsquared = list(map((lambda x: x**2), numbers))\nprint(\"Squared numbers\", squared)\n\nprint(\"\"\"  \"\"\" )\nprint(\"Exception traceback with lamda\")\nprint(\"--------------------------------\")\n# div_by_zero = (lambda x: x / 0)(10)\n# print(\"Lambda: Divide by Zero\", div_by_zero)\n# Throws ZeroDivisionError: division by zero\n\nprint(\"\"\"  \"\"\" )\nprint(\"Exception traceback with function\")\nprint(\"--------------------------------\")\ndef div_by_zero_func(x):\n  return  x / 0\n# print(\"Function: Divide by Zero\", div_by_zero_func(10))\n# Throws ZeroDivisionError: division by zero\n\nprint(\"\"\"  \"\"\" )\nprint(\"A lambda function can't contain any statements\")\nprint(\"--------------------------------\")\n\ntest = lambda x:  x + 10 \nprint(\"Test \", test(2))\n</code></pre></p>"},{"location":"functions/lambda#documentation","title":"Documentation","text":""},{"location":"functions/lambda#syntaxerror-lambda-expression-parameters-cannot-be-parenthesized","title":"SyntaxError: Lambda expression parameters cannot be parenthesized","text":""},{"location":"functions/lambda#greet-lambda-name-greeting-fhi-mr-name-good-greeting","title":"greet = lambda (name, greeting) : f'Hi Mr. {name}, Good {greeting}!'","text":""},{"location":"functions/lambda#greet-lambda-name-greeting-fhi-mr-name-good-greeting_1","title":"greet = lambda name, greeting : f'Hi Mr. {name}, Good {greeting}!'","text":""},{"location":"functions/lambda#greet-lambda-name-str-greeting-strfhi-mr-name-good-greeting","title":"greet = (lambda name: str, greeting: str)(f'Hi Mr. {name}, Good {greeting}!')","text":""},{"location":"functions/lambda#printgreetvenkat-morning","title":"print(greet('Venkat', 'Morning'))","text":""},{"location":"functions/lambda#throws-type_annotation-lambda-x-int-y-int-z-int-x-y-z2-5-7","title":"Throws type_annotation = (lambda x: int, y: int ,z: int : x + y + z)(2, 5, 7)","text":""},{"location":"functions/lambda#_1","title":"^","text":""},{"location":"functions/lambda#syntaxerror-invalid-syntax","title":"SyntaxError: invalid syntax","text":"<p>print(text) print(\"\"\"  \"\"\" ) print(\"anonymous function\") print(\"--------------------------------\") add_value = lambda x : x + 10 print(\"Add Value\", add_value(2))</p> <p>print(\"\"\"  \"\"\" ) print(\"More than one arguments for lambda\") print(\"--------------------------------\") add_value_more_arguments = (lambda x, y ,z : x + y + z)(2, 5, 7) print(\"Add Value(more arguments)\", add_value_more_arguments)</p> <p>print(\"\"\"  \"\"\" ) print(\"Type annotation is not supported\") print(\"--------------------------------\")</p>"},{"location":"functions/lambda#type_annotation-lambda-x-int-y-int-z-int-x-y-z2-5-7","title":"type_annotation = (lambda x: int, y: int ,z: int : x + y + z)(2, 5, 7)","text":""},{"location":"functions/lambda#printtype-annotation-is-not-supported-type_annotation","title":"print(\"Type annotation is not supported\", type_annotation)","text":"<p>print(\"\"\"  \"\"\" ) print(\"Square number without lambda\") print(\"--------------------------------\") def square(a):   return a**2</p> <p>print(' square(7): ',  square(7))</p> <p>numbers = [1, 2, 3, 4, 5,] squared = list(map(square, numbers)) print(\"Numbers: \", numbers,) print(\"Squared Numbers\", squared)</p> <p>print(\"\"\"  \"\"\" ) print(\"Square number with lambda\") print(\"--------------------------------\") numbers = [1, 2, 3, 4, 5,] squared = list(map((lambda x: x**2), numbers)) print(\"Squared numbers\", squared)</p> <p>print(\"\"\"  \"\"\" ) print(\"Exception traceback with lamda\") print(\"--------------------------------\")</p>"},{"location":"functions/lambda#div_by_zero-lambda-x-x-010","title":"div_by_zero = (lambda x: x / 0)(10)","text":""},{"location":"functions/lambda#printlambda-divide-by-zero-div_by_zero","title":"print(\"Lambda: Divide by Zero\", div_by_zero)","text":""},{"location":"functions/lambda#throws-zerodivisionerror-division-by-zero","title":"Throws ZeroDivisionError: division by zero","text":"<p>print(\"\"\"  \"\"\" ) print(\"Exception traceback with function\") print(\"--------------------------------\") def div_by_zero_func(x):   return  x / 0</p>"},{"location":"functions/lambda#printfunction-divide-by-zero-div_by_zero_func10","title":"print(\"Function: Divide by Zero\", div_by_zero_func(10))","text":""},{"location":"functions/lambda#throws-zerodivisionerror-division-by-zero_1","title":"Throws ZeroDivisionError: division by zero","text":"<p>print(\"\"\"  \"\"\" ) print(\"A lambda function can't contain any statements\") print(\"--------------------------------\")</p> <p>test = lambda x:  x + 10  print(\"Test \", test(2))</p>"},{"location":"functions/simple_function","title":"Simple Function","text":"<p>File Name: simple_function.py ```python</p> <p>from stylepy import h4 def returning_one():   return 1</p> <p>def returning_one_with_comma():   return 1,</p> <p>def returning_one_two_three():   return 1,2,3</p> <p>h4(type(returning_one()), 'returning_one: ', returning_one()) h4(type(returning_one_with_comma()), 'returning_one_with_comma: ', returning_one_with_comma()) h4(type(returning_one_two_three()), 'returning_one_two_three: ', returning_one_two_three())```</p>"},{"location":"interview","title":"Interview","text":"<p>This section covers interview.</p> <ul> <li>find_sum_of_integer_array.py</li> <li>string_substitute.py</li> </ul>"},{"location":"interview/find_sum_of_integer_array","title":"Find Sum Of Integer Array","text":"<p>File Name: find_sum_of_integer_array.py ```python from utilities.testUtils import solution_title, print_and_assert_new, getTestResult from utilities.commonUtils import timeComplexity, spaceComplexity</p> <p>print('\\n &gt;&gt;&gt; Find Sum of Duplicated Integer Array') print('''</p>"},{"location":"interview/find_sum_of_integer_array#_1","title":"Find Sum Of Integer Array","text":""},{"location":"interview/find_sum_of_integer_array#_2","title":"Find Sum Of Integer Array","text":""},{"location":"interview/find_sum_of_integer_array#given-an-array-nums-write-a-function-to-calculate-the-sum-of-distinct-elements-in-the-array","title":"Given an array nums, write a function to calculate the sum of distinct elements in the array.","text":""},{"location":"interview/find_sum_of_integer_array#_3","title":"Find Sum Of Integer Array","text":""},{"location":"interview/find_sum_of_integer_array#example","title":"Example","text":""},{"location":"interview/find_sum_of_integer_array#input-781717-output-16","title":"Input: [7,8,1,7,1,7] Output: 16","text":""},{"location":"interview/find_sum_of_integer_array#why-because-the-distinct-numbers-in-the-array-are-178-the-sum-of-which-is-16","title":"why: Because the distinct numbers in the array are 1,7,8, the sum of which is 16","text":""},{"location":"interview/find_sum_of_integer_array#_4","title":"Find Sum Of Integer Array","text":""},{"location":"interview/find_sum_of_integer_array#_5","title":"Find Sum Of Integer Array","text":"<p>''')</p> <p>class FindSumOfIntegerArray(object):     def quick(self, numbers_list):         unique_numbers = set(numbers_list)         sum = 0         for number in unique_numbers:           sum += number         return sum     def brute_force(self, numbers_list):         unique_number_keys = {}         sum = 0         for number in numbers_list:           if number not in unique_number_keys:             unique_number_keys[number] = 1             sum += number         return sum     def sub_optimal(self, numbers_list):         pass     def optimal(self, numbers_list):         pass</p>"},{"location":"interview/find_sum_of_integer_array#parameters-and-expected-values","title":"Parameters and Expected Values.","text":"<p>param1 = [7,8,1,7,1,7] expect1 = 16</p> <p>param2 = [7,8,1,7,1,7,4,5] expect2 = 25</p> <p>param3 = [7,8,1,7,1,7,9,6,3] expect3 = 34</p> <p>solution = FindSumOfIntegerArray() solution_title('FindSumOfIntegerArray - Using Set') print_and_assert_new(solution.quick, param1, expected=expect1) print_and_assert_new(solution.quick, param2, expected=expect2) print_and_assert_new(solution.quick, param3, expected=expect3) getTestResult('FindSumOfIntegerArray - Using Set')</p> <p>timeComplexity('O(n)', 'Creating Set and Iterating over the elements for sum') spaceComplexity('O(n)', 'In  worst case (all elements are unique), the set will contain as many elements as the original list.')</p> <p>solution_title('FindSumOfIntegerArray - Using Hash Table') print_and_assert_new(solution.brute_force, param1, expected=expect1) print_and_assert_new(solution.brute_force, param2, expected=expect2) print_and_assert_new(solution.brute_force, param3, expected=expect3) getTestResult('FindSumOfIntegerArray - Using Hash Table')</p>"},{"location":"interview/find_sum_of_integer_array#timecomplexityon-desc_goes_here","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/find_sum_of_integer_array#spacecomplexityon-desc_goes_here","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/find_sum_of_integer_array#solution_titlefindsumofintegerarray-sub-optimal","title":"solution_title('FindSumOfIntegerArray - Sub Optimal')","text":""},{"location":"interview/find_sum_of_integer_array#print_and_assert_newsolutiontimeoptimized-param1-expectedexpect1","title":"print_and_assert_new(solution.timeOptimized, param1, expected=expect1)","text":""},{"location":"interview/find_sum_of_integer_array#print_and_assert_newsolutiontimeoptimized-param2-expectedexpect2","title":"print_and_assert_new(solution.timeOptimized, param2, expected=expect2)","text":""},{"location":"interview/find_sum_of_integer_array#print_and_assert_newsolutiontimeoptimized-param3-expectedexpect3","title":"print_and_assert_new(solution.timeOptimized, param3, expected=expect3)","text":""},{"location":"interview/find_sum_of_integer_array#gettestresultfindsumofintegerarray-sub-optimal","title":"getTestResult('FindSumOfIntegerArray - Sub Optimal')","text":""},{"location":"interview/find_sum_of_integer_array#timecomplexityon-desc_goes_here_1","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/find_sum_of_integer_array#spacecomplexityon-desc_goes_here_1","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/find_sum_of_integer_array#solution_titlefindsumofintegerarray-optimal","title":"solution_title('FindSumOfIntegerArray - Optimal')","text":""},{"location":"interview/find_sum_of_integer_array#print_and_assert_newsolutiontimeoptimized-param1-expectedexpect1_1","title":"print_and_assert_new(solution.timeOptimized, param1, expected=expect1)","text":""},{"location":"interview/find_sum_of_integer_array#print_and_assert_newsolutiontimeoptimized-param2-expectedexpect2_1","title":"print_and_assert_new(solution.timeOptimized, param2, expected=expect2)","text":""},{"location":"interview/find_sum_of_integer_array#print_and_assert_newsolutiontimeoptimized-param3-expectedexpect3_1","title":"print_and_assert_new(solution.timeOptimized, param3, expected=expect3)","text":""},{"location":"interview/find_sum_of_integer_array#gettestresultfindsumofintegerarray-optimal","title":"getTestResult('FindSumOfIntegerArray - Optimal')","text":""},{"location":"interview/find_sum_of_integer_array#timecomplexityon-m-desc_goes_here","title":"timeComplexity('O(n + m)', 'desc_goes_here')","text":""},{"location":"interview/find_sum_of_integer_array#spacecomplexityon-m-desc_goes_here","title":"spaceComplexity('O(n + m)', 'desc_goes_here')```","text":""},{"location":"interview/string_substitute","title":"String Substitute","text":"<p>File Name: string_substitute.py ```python</p>"},{"location":"interview/string_substitute#python-modulepy-interviewstring_substitutepy","title":"python module.py  interview/string_substitute.py","text":"<p>from utilities.testUtils import solution_title, print_and_assert_new, getTestResult</p>"},{"location":"interview/string_substitute#from-utilitiescommonutils-import-timecomplexity-spacecomplexity","title":"from utilities.commonUtils import timeComplexity, spaceComplexity","text":"<p>print('\\n &gt;&gt;&gt; Substituting character') print('''      * Encodes text by substituting character with another one provided in the pair.      * For example pair \"ab\" defines all \"a\" chars will be replaced with \"b\" and all \"b\" chars will be replaced with \"a\"      * Examples:      *      substitutions = [\"ab\"], input = \"aabbcc\", output = \"bbaacc\"       *      substitutions = [\"ab\", \"cd\"], input = \"adam\", output = \"bcbm\"      *      substitutions = ['ab', 'cd'], input = 'AdAm', output = 'BcBm'      *      * @param list substitutions      * @param string text      * @return string          * NOTE: substitutions is lowercase but input can be mix char. So output must follow same case as input  ''')</p> <p>class StringSubstitute(object):     def quick(self, sub, text):         def ucase(s):             if 'a' &lt;= s &lt;= 'z':  # Check if the character is lowercase                 return chr(ord(s) - 32)             return s</p> <pre><code>    def lcase(s):\n        if 'A' &lt;= s &lt;= 'Z':  # Check if the character is uppercase\n            return chr(ord(s) + 32)\n        return s\n\n    swapper = {}\n    for char in sub: \n      swapper[char[0]] = char[1]\n      swapper[char[1]] = char[0]\n    op = ''\n\n    for s in text:\n      if ord(s) &lt; 96 and lcase(s) in swapper:\n        op += ucase(swapper[lcase(s)])\n      elif s in swapper:\n        op += swapper[s]\n      else:\n        op += s\n    return op\ndef brute_force(self, s):\n    pass\ndef sub_optimal(self, s):\n    pass\ndef optimal(self, s):\n    pass\n</code></pre>"},{"location":"interview/string_substitute#parameters-and-expected-values","title":"Parameters and Expected Values.","text":"<p>param1 = [\"ab\"] param11 = \"aabbcc\" expect1 = \"bbaacc\"</p> <p>param2 = [\"ab\", \"cd\"] param22 = \"adam\" expect2 = \"bcbm\"  </p> <p>param3 = ['ab', 'cd'] param33 = 'AdAm' expect3 = 'BcBm'</p> <p>solution = StringSubstitute() solution_title('StringSubstitute - Quick One') print_and_assert_new(solution.quick, param1, param11, expected=expect1) print_and_assert_new(solution.quick, param2, param22, expected=expect2) print_and_assert_new(solution.quick, param3, param33, expected=expect3)</p>"},{"location":"interview/string_substitute#gettestresultstringsubstitute-quick-one","title":"getTestResult('StringSubstitute - Quick One')","text":""},{"location":"interview/string_substitute#timecomplexityon-desc_goes_here","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/string_substitute#spacecomplexityon-desc_goes_here","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/string_substitute#solution_titlestringsubstitute-brute-force","title":"solution_title('StringSubstitute - Brute Force')","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutionbrute_force-param1-param11-expectedexpect1","title":"print_and_assert_new(solution.brute_force, param1, param11, expected=expect1)","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutionbrute_force-param2-param22-expectedexpect2","title":"print_and_assert_new(solution.brute_force, param2, param22, expected=expect2)","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutionbrute_force-param3-param33-expectedexpect3","title":"print_and_assert_new(solution.brute_force, param3, param33, expected=expect3)","text":""},{"location":"interview/string_substitute#gettestresultstringsubstitute-brute-force","title":"getTestResult('StringSubstitute - Brute Force')","text":""},{"location":"interview/string_substitute#timecomplexityon-desc_goes_here_1","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/string_substitute#spacecomplexityon-desc_goes_here_1","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/string_substitute#solution_titlestringsubstitute-sub-optimal","title":"solution_title('StringSubstitute - Sub Optimal')","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutiontimeoptimized-param1-param11-expectedexpect1","title":"print_and_assert_new(solution.timeOptimized, param1, param11, expected=expect1)","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutiontimeoptimized-param2-param22-expectedexpect2","title":"print_and_assert_new(solution.timeOptimized, param2, param22, expected=expect2)","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutiontimeoptimized-param3-param33-expectedexpect3","title":"print_and_assert_new(solution.timeOptimized, param3, param33, expected=expect3)","text":""},{"location":"interview/string_substitute#gettestresultstringsubstitute-sub-optimal","title":"getTestResult('StringSubstitute - Sub Optimal')","text":""},{"location":"interview/string_substitute#timecomplexityon-desc_goes_here_2","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/string_substitute#spacecomplexityon-desc_goes_here_2","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"interview/string_substitute#solution_titlestringsubstitute-optimal","title":"solution_title('StringSubstitute - Optimal')","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutiontimeoptimized-param1-param11-expectedexpect1_1","title":"print_and_assert_new(solution.timeOptimized, param1, param11, expected=expect1)","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutiontimeoptimized-param2-param22-expectedexpect2_1","title":"print_and_assert_new(solution.timeOptimized, param2, param22, expected=expect2)","text":""},{"location":"interview/string_substitute#print_and_assert_newsolutiontimeoptimized-param3-param33-expectedexpect3_1","title":"print_and_assert_new(solution.timeOptimized, param3, param33, expected=expect3)","text":""},{"location":"interview/string_substitute#gettestresultstringsubstitute-optimal","title":"getTestResult('StringSubstitute - Optimal')","text":""},{"location":"interview/string_substitute#timecomplexityon-m-desc_goes_here","title":"timeComplexity('O(n + m)', 'desc_goes_here')","text":""},{"location":"interview/string_substitute#spacecomplexityon-m-desc_goes_here","title":"spaceComplexity('O(n + m)', 'desc_goes_here')```","text":""},{"location":"leetcode","title":"Leetcode","text":"<p>This section covers leetcode.</p> <ul> <li>680_valid_palindrom_II_remove_one_char.py</li> <li>template.py</li> <li>add_strings.py</li> <li>first_unique_character.py</li> <li>palindrome.py</li> <li>palindrome_number.py</li> <li>palindrome_remove_one_char.py</li> <li>two_sum.py</li> <li>valid_number.py</li> <li>valid_paranthesis.py</li> </ul>"},{"location":"leetcode/680_valid_palindrom_II_remove_one_char","title":"680 Valid Palindrom Ii Remove One Char","text":"<p>File Name: 680_valid_palindrom_II_remove_one_char.py ```python from utilities.testUtils import solution_title, print_and_assert_new, getTestResult from utilities.commonUtils import timeComplexity, spaceComplexity</p> <p>print('\\n &gt;&gt;&gt; 680. Valid Palindrome II By Remove One Char') print(''' Given a string s, return true if the s can be palindrome after deleting at most one character from it. Example 1:</p> <p>Input: s = \"aba\" Output: true Example 2:</p> <p>Input: s = \"abca\" Output: true Explanation: You could delete the character 'c'. Example 3:</p> <p>Input: s = \"abc\" Output: false ''')</p> <p>class ValidPalindrome2ByRemoveOneChar(object):     def quick(self, s):         pass     def brute_force(self, s):         pass     def sub_optimal(self, s):         pass     def optimal(self, s):         pass</p>"},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#parameters-and-expected-values","title":"Parameters and Expected Values.","text":"<p>param1 = 'aba' expect1 = True</p> <p>param2 = 'abca' expect2 = True</p> <p>param3 = 'abc' expect3 = False</p> <p>solution = ValidPalindrome2ByRemoveOneChar() solution_title('ValidPalindrome2ByRemoveOneChar - Quick One by Initialize two pointers') print_and_assert_new(solution.quick, param1, expected=expect1) print_and_assert_new(solution.quick, param2, expected=expect2) print_and_assert_new(solution.quick, param3, expected=expect3) getTestResult('ValidPalindrome2ByRemoveOneChar - Quick One')</p> <p>timeComplexity('O(n)', 'desc_goes_here') spaceComplexity('O(n)', 'desc_goes_here')</p>"},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#solution_titlevalidpalindrome2byremoveonechar-brute-force","title":"solution_title('ValidPalindrome2ByRemoveOneChar - Brute Force')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutionbrute_force-param1-expectedexpect1","title":"print_and_assert_new(solution.brute_force, param1, expected=expect1)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutionbrute_force-param2-expectedexpect2","title":"print_and_assert_new(solution.brute_force, param2, expected=expect2)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutionbrute_force-param3-expectedexpect3","title":"print_and_assert_new(solution.brute_force, param3, expected=expect3)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#gettestresultvalidpalindrome2byremoveonechar-brute-force","title":"getTestResult('ValidPalindrome2ByRemoveOneChar - Brute Force')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#timecomplexityon-desc_goes_here","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#spacecomplexityon-desc_goes_here","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#solution_titlevalidpalindrome2byremoveonechar-sub-optimal","title":"solution_title('ValidPalindrome2ByRemoveOneChar - Sub Optimal')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutiontimeoptimized-param1-expectedexpect1","title":"print_and_assert_new(solution.timeOptimized, param1, expected=expect1)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutiontimeoptimized-param2-expectedexpect2","title":"print_and_assert_new(solution.timeOptimized, param2, expected=expect2)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutiontimeoptimized-param3-expectedexpect3","title":"print_and_assert_new(solution.timeOptimized, param3, expected=expect3)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#gettestresultvalidpalindrome2byremoveonechar-sub-optimal","title":"getTestResult('ValidPalindrome2ByRemoveOneChar - Sub Optimal')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#timecomplexityon-desc_goes_here_1","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#spacecomplexityon-desc_goes_here_1","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#solution_titlevalidpalindrome2byremoveonechar-optimal","title":"solution_title('ValidPalindrome2ByRemoveOneChar - Optimal')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutiontimeoptimized-param1-expectedexpect1_1","title":"print_and_assert_new(solution.timeOptimized, param1, expected=expect1)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutiontimeoptimized-param2-expectedexpect2_1","title":"print_and_assert_new(solution.timeOptimized, param2, expected=expect2)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#print_and_assert_newsolutiontimeoptimized-param3-expectedexpect3_1","title":"print_and_assert_new(solution.timeOptimized, param3, expected=expect3)","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#gettestresultvalidpalindrome2byremoveonechar-optimal","title":"getTestResult('ValidPalindrome2ByRemoveOneChar - Optimal')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#timecomplexityon-m-desc_goes_here","title":"timeComplexity('O(n + m)', 'desc_goes_here')","text":""},{"location":"leetcode/680_valid_palindrom_II_remove_one_char#spacecomplexityon-m-desc_goes_here","title":"spaceComplexity('O(n + m)', 'desc_goes_here')```","text":""},{"location":"leetcode/__template__","title":"template","text":"<p>File Name: template.py ```python from utilities.testUtils import solution_title, print_and_assert_new, getTestResult from utilities.commonUtils import timeComplexity, spaceComplexity</p> <p>print('\\n &gt;&gt;&gt; 00. ') print(''' Desc goes here ''') <p>class ProblemName(object):     def quick(self, s):         pass     def brute_force(self, s):         pass     def sub_optimal(self, s):         pass     def optimal(self, s):         pass</p>"},{"location":"leetcode/__template__#parameters-and-expected-values","title":"Parameters and Expected Values.","text":"<p>param1 = 'param1' param11 = 'param11' expect1 = 'expect1'</p> <p>param2 = 'param2' param22 = 'param22' expect2 = 'expect2'</p> <p>param3 = 'param3' param33 = 'param33' expect3 = 'expect3'</p> <p>solution = ProblemName() solution_title('ProblemName - Quick One') print_and_assert_new(solution.quick, param1, param11, expected=expect1) print_and_assert_new(solution.quick, param2, param22, expected=expect2) print_and_assert_new(solution.quick, param3, param33, expected=expect3) getTestResult('ProblemName - Quick One')</p> <p>timeComplexity('O(n)', 'desc_goes_here') spaceComplexity('O(n)', 'desc_goes_here')</p> <p>solution_title('ProblemName - Brute Force') print_and_assert_new(solution.brute_force, param1, param11, expected=expect1) print_and_assert_new(solution.brute_force, param2, param22, expected=expect2) print_and_assert_new(solution.brute_force, param3, param33, expected=expect3) getTestResult('ProblemName - Brute Force')</p> <p>timeComplexity('O(n)', 'desc_goes_here') spaceComplexity('O(n)', 'desc_goes_here')</p> <p>solution_title('ProblemName - Sub Optimal') print_and_assert_new(solution.sub_optimal, param1, param11, expected=expect1) print_and_assert_new(solution.sub_optimal, param2, param22, expected=expect2) print_and_assert_new(solution.sub_optimal, param3, param33, expected=expect3) getTestResult('ProblemName - Sub Optimal')</p> <p>timeComplexity('O(n)', 'desc_goes_here') spaceComplexity('O(n)', 'desc_goes_here')</p> <p>solution_title('ProblemName - Optimal') print_and_assert_new(solution.optimal, param1, param11, expected=expect1) print_and_assert_new(solution.optimal, param2, param22, expected=expect2) print_and_assert_new(solution.optimal, param3, param33, expected=expect3) getTestResult('ProblemName - Optimal')</p> <p>timeComplexity('O(n + m)', 'desc_goes_here') spaceComplexity('O(n + m)', 'desc_goes_here')```</p>"},{"location":"leetcode/add_strings","title":"Add Strings","text":"<p>File Name: add_strings.py ```python from utilities.testUtils import solution_title, print_and_assert_new, getTestResult from utilities.commonUtils import timeComplexity, spaceComplexity</p> <p>print('\\n &gt;&gt;&gt; 415. Add Two Strings') print(''' Given two non-negative integers, num1 and num2 represented as string, return the sum of num1 and num2 as a string.</p> <p>You must solve the problem without using any built-in library for handling large integers (such as BigInteger). You must also not convert the inputs to integers directly. ''')</p> <p>class addTwoStrings(object):     def quick(self, num1, num2):         result = str(int(num1) + int(num2))         return result     def brute_force(self, num1, num2):         result, carry = '', 0         num1_index, num2_index = len(num1) - 1, len(num2) - 1</p> <pre><code>    while(num1_index &gt;= 0 or num2_index &gt;= 0):\n        first_num = int(num1[num1_index]) if num1_index &gt;= 0 else 0\n        second_num = int(num2[num2_index]) if num2_index &gt;= 0 else 0\n        value = (first_num + second_num + carry) % 10\n        carry = (first_num + second_num + carry) // 10\n        result = f'{value}{result}'\n        num1_index -= 1\n        num2_index -= 1\n\n    if (carry != 0):\n        result = f'{carry}{result}'\n\n    return result\ndef timeOptimized(self, num1, num2):\n    result_list = []\n    carry = 0\n    num1_index, num2_index = len(num1) - 1, len(num2) - 1\n\n    while num1_index &gt;= 0 or num2_index &gt;= 0 or carry:\n        first_num = int(num1[num1_index]) if num1_index &gt;= 0 else 0\n        second_num = int(num2[num2_index]) if num2_index &gt;= 0 else 0\n\n        total = first_num + second_num + carry\n        carry = total // 10\n        result_list.append(str(total % 10))\n\n        num1_index -= 1\n        num2_index -= 1\n\n    return ''.join(reversed(result_list))\n</code></pre> <p>solution = addTwoStrings() solution_title('Add Two Strings - Quick One') print_and_assert_new(solution.quick, '11', '123', expected='134') print_and_assert_new(solution.quick, '456', '77', expected='533') print_and_assert_new(solution.quick, '0', '0', expected='0') getTestResult('Add Two Strings - Quick One')</p> <p>timeComplexity('O(n)', 'Near Linear but + Operators can be expensive for larger numbers') spaceComplexity('O(n)', 'Linear for storing the result string.')</p> <p>solution_title('Add Two Strings - Brute Force') print_and_assert_new(solution.brute_force, '11', '123', expected='134') print_and_assert_new(solution.brute_force, '456', '77', expected='533') print_and_assert_new(solution.brute_force, '0', '0', expected='0') getTestResult('Add Two Strings - Brute Force')</p> <p>solution_title('Add Two Strings - Time Optimized') print_and_assert_new(solution.timeOptimized, '11', '123', expected='134') print_and_assert_new(solution.timeOptimized, '456', '77', expected='533') print_and_assert_new(solution.timeOptimized, '0', '0', expected='0') getTestResult('Add Two Strings - Time Optimized')</p> <p>timeComplexity('O(n + m)', 'Linear by doing key changes like Using a List (result_list), reversed and joined into a single string.\\n    Reversing a list is O(n), and joining is also O(n), resulting in an overall O(n)') spaceComplexity('O(n + m)', 'Linear due to primary space consumption is from result_list, which grows to size O(n + m). ')```</p>"},{"location":"leetcode/first_unique_character","title":"First Unique Character","text":"<p>File Name: first_unique_character.py ```python from stylepy import h1,h2,h3,h4,h5,h6 from collections import Counter</p> <p>def first_uniq_char_brute1(s: str) -&gt; int:   count_char = {i: s.count(s[i])  for i in range(len(s))  }   for index, count  in count_char.items():     if count == 1:       return index   return -1</p> <p>def first_uniq_char_brute2(s: str) -&gt; int:   count_char = Counter(s)    stack = {}   for i in range(len(s)):     if s[i] not in stack:        stack[s[i]] = i   char = next((char for char, count  in count_char.items() if count == 1), -1 )   return stack[char] if char in stack  else -1 </p> <p>def first_uniq_char_optimised(s: str) -&gt; int:     result = next((i for i in range(len(s)) if s.count(s[i])==1), -1 )     return result</p> <p>def first_uniq_char_optimised2(s: str) -&gt; int:     for i in range(len(s)):        if s.count(s[i]) == 1:           return i     return -1</p> <p>h1(\"Brute-force 1\") s = 'leetcode' index = first_uniq_char_brute1(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>s = 'loveleetcode' index = first_uniq_char_brute1(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>s = 'aabb' index = first_uniq_char_brute1(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>h1(\"Brute-force 2\") s = 'leetcode' index = first_uniq_char_brute2(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>s = 'loveleetcode' index = first_uniq_char_brute2(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>s = 'aabb' index = first_uniq_char_brute2(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>h1(\"Optimised\") s = 'leetcode' index = first_uniq_char_optimised(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>s = 'loveleetcode' index = first_uniq_char_optimised(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>s = 'aabb' index = first_uniq_char_optimised(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>h1(\"Optimised 2 \") s = 'leetcode' index = first_uniq_char_optimised2(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>s = 'loveleetcode' index = first_uniq_char_optimised2(s) h3(f\"first non repeating character index {index} for {s} \")</p> <p>s = 'aabb' index = first_uniq_char_optimised2(s) h3(f\"first non repeating character index {index} for {s} \")```</p>"},{"location":"leetcode/palindrome","title":"Palindrome","text":"<p>File Name: palindrome.py ```python from tabulate import tabulate print(\"frute force solution\") print(\"\"\"===================\"\"\")</p> <p>def is_valid_polindrome(s: str) -&gt; bool:   string = keep_alphanumeric(s)   return  string == string[::-1]</p> <p>def keep_alphanumeric(s: str) -&gt; str :   string = ''.join(char.lower() for char in s if char.isalnum())   return string</p> <p>s = 'mam , () test' print(f\"given {s} { ' palindrome ' if is_valid_polindrome(s) else ' is not palindrome'}\") s = 'mam ()' print(f\"given {s} { ' palindrome ' if is_valid_polindrome(s) else ' is not palindrome'}\") print(\"\"\" \"\"\") print(\"Optimised solution\") print(\"\"\"===================\"\"\")</p> <p>def is_valid(s: str) -&gt; bool:   s = ''.join(char.lower() for char in s if char.isalnum())   left, right = 0 , len(s) - 1   while left &lt; right:     if s[left] != s[right]:       return False     else:       left += 1       right -= 1   return True</p> <p>s = 'mam , () test' print(f\"given {s} { ' palindrome ' if is_valid(s) else ' is not palindrome'}\") s = 'mam ()' print(f\"given {s} { ' palindrome ' if is_valid(s) else ' is not palindrome'}\")</p> <p>table_data = [     [\"Approach\", \"Time Complexity\", \"Example Code\"],     [\"Brute-Force\", \"O(n)\", \"is_palindrome_bruteforce_string(s)\"],     [\"Optimized\", \"O(n/2) = O(n)\", \"is_palindrome_optimized_string(s)\"] ]</p> <p>table = tabulate(table_data, headers=\"firstrow\", tablefmt=\"fancy_grid\")</p> <p>print(table)```</p>"},{"location":"leetcode/palindrome_number","title":"Palindrome Number","text":"<p>File Name: palindrome_number.py <pre><code>from tabulate import tabulate\nclass Solution:\n    #log10(n)\n    def brute_force(self, x: int) -&gt; bool:\n      number_str = str(number)\n      reversed_str = number_str[::-1]\n      return number_str == reversed_str\n\n    #log10(n)\n    def is_palindrome_suboptimal(number):\n      number_str = str(number)\n      for i in range(len(number_str) // 2):\n        if number_str[i] != number_str[len(number_str) - 1 - i]:\n          return False\n      return True\n\n    #log10(n))\n    def isPalindrome(self, x: int) -&gt; bool:\n        number = x\n        reversed = 0\n        while(x != 0 ):\n            digit = x % 10\n            reversed = reversed * 10 + digit\n            x = x // 10 \n        return reversed == number \n\na = Solution()\nnumber = 121\nis_valid = a.isPalindrome(x = number)\nprint(f\"given numbe {number} is {'Palindrome' if is_valid else 'Not palidrome'} \")\n\n\ndef print_solution_table(solutions_info):\n    table = tabulate(solutions_info, headers=\"keys\", tablefmt=\"pipe\")\n    print(table)\n\n# Example usage\nsolutions_info = [\n    {\"Solution\": \"Brute-Force (String Conversion)\", \"Time Complexity\": \"O(log10(n))\", \"Space Complexity\": \"O(log10(n))\", \"Notes\": \"Conversion to string and comparison of reversed string contribute to time and space.\"},\n    {\"Solution\": \"Suboptimal\", \"Time Complexity\": \"O(log10(n))\", \"Space Complexity\": \"O(1)\", \"Notes\": \"Iterating over half of the string, but potential issues with odd-length strings.\"},\n    {\"Solution\": \"Optimized\", \"Time Complexity\": \"O(log10(n))\", \"Space Complexity\": \"O(1)\", \"Notes\": \"Direct comparison of digits without converting to a string, more efficient overall.\"},\n]\nprint_solution_table(solutions_info)\n</code></pre></p>"},{"location":"leetcode/palindrome_remove_one_char","title":"Palindrome Remove One Char","text":"<p>File Name: palindrome_remove_one_char.py ```python</p> <p>def valid_palindrome(s):</p> <p>def is_valid(i, j ):     while i &lt; j:        if s[i] != s[j]:         return False       else:         i += 1         j -= 1     return True   def remove_one_from_range(i, j ):     return is_valid(i+1, j) or is_valid(i, j-1 )</p> <p>left, right = 0 , len(s) -1    while left &lt; right:     if s[left] != s[right]:       return remove_one_from_range(left, right )     else:       left += 1       right -= 1   return True</p> <p>s = 'aba' print(f\" {s} is {'palindrome' if valid_palindrome(s) else 'not a palindrome'} \") s = 'abac' print(f\" {s} is {'palindrome' if valid_palindrome(s) else 'not a palindrome'} \") s = 'abacd' print(f\" {s} is {'palindrome' if valid_palindrome(s) else 'not a palindrome'} \")```</p>"},{"location":"leetcode/two_sum","title":"Two Sum","text":"<p>File Name: two_sum.py ```python from stylepy import h1,h2,h3,h4,h5,h6 import numbers</p> <p>def brute_force(lst, target):   if type(target) != int :      return 0   for i in range(len(lst)):      for j in range(len(lst)):       if lst[i] + lst[j] == target:          return [i, j ]</p> <p>def time_optimized(lst, target):   if not isinstance(target, numbers.Number):     return 0   dicti = {}   for index, value in enumerate(lst):     dicti[value] = index</p> <p>h3(type(dicti), dicti)   for i in range(len(lst)):     complement = target - lst[i]      if complement in dicti and dicti[complement] != i:       return [i, dicti[complement]]</p> <p>h1(\"\"\"Brute-force solution\"\"\") h3(f\"list[2,5,7,4] and target 11 {brute_force([2,5,7,4], 11 )}\") h3(f\"list[2,5,7,4] and target 11 {time_optimized([2,5,7,4], 11 )}\")```</p>"},{"location":"leetcode/valid_number","title":"Valid Number","text":"<p>File Name: valid_number.py ```python from utilities.testUtils import solution_title, print_and_assert_new, getTestResult from utilities.commonUtils import timeComplexity, spaceComplexity</p> <p>print('\\n &gt;&gt;&gt; 65. Valid Number') print(''' A valid number can be split up into these components (in order):</p> <p>A decimal number or an integer. (Optional) An 'e' or 'E', followed by an integer.</p> <p>A decimal number can be split up into these components (in order):</p> <p>(Optional) A sign character (either '+' or '-'). One of the following formats: One or more digits, followed by a dot '.'. One or more digits, followed by a dot '.', followed by one or more digits. A dot '.', followed by one or more digits. An integer can be split up into these components (in order):</p> <p>(Optional) A sign character (either '+' or '-'). One or more digits. For example, all the following are valid numbers: [\"2\", \"0089\", \"-0.1\", \"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\", \"-123.456e789\"], while the following are not valid numbers: [\"abc\", \"1a\", \"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"].</p> <p>Given a string s, return true if s is a valid number.</p> <p>Example 1:</p> <p>Input: s = \"0\" Output: true Example 2:</p> <p>Input: s = \"e\" Output: false Example 3:</p> <p>Input: s = \".\" Output: false ''')</p> <p>class problemName(object):     def quick(self, s):         pass     def brute_force(self, s):         pass     def sub_optimal(self, s):         pass     def optimal(self, s):         pass</p>"},{"location":"leetcode/valid_number#parameters-and-expected-values","title":"Parameters and Expected Values.","text":"<p>param1 = '0' param11 = 'param11' expect1 = True</p> <p>param2 = 'e' param22 = 'param22' expect2 = False</p> <p>param3 = '.' param33 = 'param33' expect3 = False</p> <p>solution = problemName() solution_title('ProblemName - Quick One') print_and_assert_new(solution.quick, param1, expected=expect1) print_and_assert_new(solution.quick, param2, expected=expect2) print_and_assert_new(solution.quick, param3, expected=expect3) getTestResult('ProblemName - Quick One')</p> <p>timeComplexity('O(n)', 'desc_goes_here') spaceComplexity('O(n)', 'desc_goes_here')</p> <p>solution_title('ProblemName - Brute Force') print_and_assert_new(solution.brute_force, param1, expected=expect1) print_and_assert_new(solution.brute_force, param2, expected=expect2) print_and_assert_new(solution.brute_force, param3, expected=expect3) getTestResult('ProblemName - Brute Force')</p> <p>timeComplexity('O(n)', 'desc_goes_here') spaceComplexity('O(n)', 'desc_goes_here')</p> <p>solution_title('ProblemName - Sub Optimal') print_and_assert_new(solution.timeOptimized, param1, expected=expect1) print_and_assert_new(solution.timeOptimized, param2, expected=expect2) print_and_assert_new(solution.timeOptimized, param3, expected=expect3) getTestResult('ProblemName - Sub Optimal')</p> <p>timeComplexity('O(n)', 'desc_goes_here') spaceComplexity('O(n)', 'desc_goes_here')</p> <p>solution_title('ProblemName - Optimal') print_and_assert_new(solution.timeOptimized, param1, expected=expect1) print_and_assert_new(solution.timeOptimized, param2, expected=expect2) print_and_assert_new(solution.timeOptimized, param3, expected=expect3) getTestResult('ProblemName - Optimal')</p> <p>timeComplexity('O(n + m)', 'desc_goes_here') spaceComplexity('O(n + m)', 'desc_goes_here')```</p>"},{"location":"leetcode/valid_paranthesis","title":"Valid Paranthesis","text":"<p>File Name: valid_paranthesis.py <pre><code>from utilities.testUtils import solution_title, reason_points, print_and_assert_new, getTestResult\nfrom utilities.commonUtils import timeComplexity, spaceComplexity\n\nprint('\\n &gt;&gt;&gt; 20. Valid Parentheses')\nprint('''\nGiven a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\n\nAn input string is valid if:\n\nOpen brackets must be closed by the same type of brackets.\nOpen brackets must be closed in the correct order.\nEvery close bracket has a corresponding open bracket of the same type.\n''')\n\nclass ValidParenthesis(object):\n    def quick(self, s):\n         # Using length and replace function.\n        prev_length = -1\n        while prev_length != len(s):\n            prev_length = len(s)\n            s = s.replace('()', '').replace('{}', '').replace('[]', '')\n        return s == ''\n    def brute_force(self, s):\n        # Using replace function.\n        while '()' in s or '{}' in s or '[]' in s:\n            s = s.replace('()', '').replace('{}', '').replace('[]', '')\n        return s == ''\n    def sub_optimal(self, s):\n        # Using Stack DS through List.\n        stack = []\n        for char in s:\n            if char in ['(', '{', '[']:\n                stack.append(char)\n            else:\n                if not stack:\n                    return False\n                if char == ')' and stack[-1] != '(':\n                    return False\n                if char == '}' and stack[-1] != '{':\n                    return False\n                if char == ']' and stack[-1] != '[':\n                    return False\n                stack.pop()\n        return not stack\n    def optimal(self, s):\n      # Using Hash Map.\n      stack = []\n      bracket_map = {')': '(', '}': '{', ']': '['}\n      for char in s:\n          if char in bracket_map.values():\n              stack.append(char)\n          elif char in bracket_map.keys():\n              if stack == [] or bracket_map[char] != stack.pop():\n                  return False\n          else:\n              return False\n      return stack == []\n\n# Parameters and Expected Values.\nparam1 = '()'\nexpect1 = True\n\nparam2 = '()[]{}'\nexpect2 = True\n\nparam3 = '(]'\nexpect3 = False\n\nparam4 = '{[()]}'\nexpect4 = True\n\nparam5 = '{}()'\nexpect5 = True\n\nparam6 = '{(})'\nexpect6 = False\n\nparam7 = ')'\nexpect7 = False\n\nsolution = ValidParenthesis()\nsolution_title('Valid Parenthesis - Quick One')\nreason_points('''\n1. Uses a straightforward loop and string replacement to solve the problem.\n2. lacks the sophistication of using data structures like stacks.\n''')\nprint_and_assert_new(solution.quick, param1, expected=expect1)\nprint_and_assert_new(solution.quick, param2, expected=expect2)\nprint_and_assert_new(solution.quick, param3, expected=expect3)\nprint_and_assert_new(solution.quick, param4, expected=expect4)\nprint_and_assert_new(solution.quick, param5, expected=expect5)\nprint_and_assert_new(solution.quick, param6, expected=expect6)\nprint_and_assert_new(solution.quick, param7, expected=expect7)\ngetTestResult('Valid Parenthesis - Quick One')\n\ntimeComplexity('O(n^3)', 'Multiple passes through the string, each of which could be O(n^2)')\nspaceComplexity('O(n)', 'Need to store the entire string')\n\nsolution_title('Valid Parenthesis - Brute Force')\nreason_points('''\n1. It involves repeatedly scanning and modifying the string without any sophisticated method.\n2. It does redundant work for each pair of brackets.\n''')\nprint_and_assert_new(solution.brute_force, param1, expected=expect1)\nprint_and_assert_new(solution.brute_force, param2, expected=expect2)\nprint_and_assert_new(solution.brute_force, param3, expected=expect3)\nprint_and_assert_new(solution.brute_force, param4, expected=expect4)\nprint_and_assert_new(solution.brute_force, param5, expected=expect5)\nprint_and_assert_new(solution.brute_force, param6, expected=expect6)\nprint_and_assert_new(solution.brute_force, param7, expected=expect7)\ngetTestResult('Valid Parenthesis - Brute Force')\n\ntimeComplexity('O(n^3)', 'Each pair of brackets, we potentially scan through the entire string (O(n))')\nspaceComplexity('O(n)', 'In Worst case, might need to store the entire string in memory.')\n\nsolution_title('Valid Parenthesis - Sub Optimal')\nreason_points('''\n1. Efficient than the brute force approach.\n2. Not optimal because it might involve storing all characters in the stack in worst case.\n''')\nprint_and_assert_new(solution.sub_optimal, param1, expected=expect1)\nprint_and_assert_new(solution.sub_optimal, param2, expected=expect2)\nprint_and_assert_new(solution.sub_optimal, param3, expected=expect3)\nprint_and_assert_new(solution.sub_optimal, param4, expected=expect4)\nprint_and_assert_new(solution.sub_optimal, param5, expected=expect5)\nprint_and_assert_new(solution.sub_optimal, param6, expected=expect6)\nprint_and_assert_new(solution.sub_optimal, param7, expected=expect7)\ngetTestResult('Valid Parenthesis - Sub Optimal')\n\ntimeComplexity('O(n)', 'we go through each character in the string exactly once.')\nspaceComplexity('O(n)', 'all characters are opening brackets, and they all get pushed onto the stack.')\n\nsolution_title('Valid Parenthesis - Optimal')\nreason_points('''\n1. Efficiently verifies the string with a single pass\n2. Space usage is as minimal\n''')\nprint_and_assert_new(solution.optimal, param1, expected=expect1)\nprint_and_assert_new(solution.optimal, param2, expected=expect2)\nprint_and_assert_new(solution.optimal, param3, expected=expect3)\nprint_and_assert_new(solution.optimal, param4, expected=expect4)\nprint_and_assert_new(solution.optimal, param5, expected=expect5)\nprint_and_assert_new(solution.optimal, param6, expected=expect6)\nprint_and_assert_new(solution.optimal, param7, expected=expect7)\ngetTestResult('Valid Parenthesis - Optimal')\n\ntimeComplexity('O(n)', 'we scan each character once.')\nspaceComplexity('O(n)', 'O(n) for the stack and O(1) for the hashmap')\n</code></pre></p>"},{"location":"leetcode/arrays","title":"Arrays","text":"<p>This section covers arrays.</p> <ul> <li>283_move_zeroes_easy.py</li> </ul>"},{"location":"leetcode/arrays/283_move_zeroes_easy","title":"283 Move Zeroes Easy","text":"<p>File Name: 283_move_zeroes_easy.py ```python from utilities.testUtils import solution_title, print_and_assert_reference, getTestResult from utilities.commonUtils import timeComplexity, spaceComplexity</p> <p>print('\\n &gt;&gt;&gt; 283. Move Zeroes') print(''' Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.</p> <p>Note that you must do this in-place without making a copy of the array.</p> <p>Example 1:</p> <p>Input: nums = [0,1,0,3,12] Output: [1,3,12,0,0] Example 2:</p> <p>Input: nums = [0] Output: [0] ''')</p> <p>class MoveZeroesItemInArrayToLast(object):     def quick(self, nums):       j = 0       for num in nums:           if num != 0:               nums[j] = num               j += 1       for i in range(j, len(nums)):           nums[i] = 0     def brute_force(self, s):         pass     def sub_optimal(self, s):         pass     def optimal(self, s):         pass</p>"},{"location":"leetcode/arrays/283_move_zeroes_easy#parameters-and-expected-values","title":"Parameters and Expected Values.","text":"<p>param1 = [0,1,0,3,12] expect1 = [1,3,12,0,0]</p> <p>param2 = [0] expect2 = [0]</p> <p>param3 = [0,1,0] expect3 = [1,0,0]</p> <p>solution = MoveZeroesItemInArrayToLast() solution_title('MoveZeroesItemInArrayToLast - Quick One') print_and_assert_reference(solution.quick, param1, expected=expect1) print_and_assert_reference(solution.quick, param2, expected=expect2) print_and_assert_reference(solution.quick, param3, expected=expect3) getTestResult('MoveZeroesItemInArrayToLast - Quick One')</p> <p>timeComplexity('O(n)', 'desc_goes_here') spaceComplexity('O(n)', 'desc_goes_here')</p>"},{"location":"leetcode/arrays/283_move_zeroes_easy#solution_titlemovezeroesiteminarraytolast-brute-force","title":"solution_title('MoveZeroesItemInArrayToLast - Brute Force')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutionbrute_force-param1-expectedexpect1","title":"print_and_assert_reference(solution.brute_force, param1, expected=expect1)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutionbrute_force-param2-expectedexpect2","title":"print_and_assert_reference(solution.brute_force, param2, expected=expect2)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutionbrute_force-param3-expectedexpect3","title":"print_and_assert_reference(solution.brute_force, param3, expected=expect3)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#gettestresultmovezeroesiteminarraytolast-brute-force","title":"getTestResult('MoveZeroesItemInArrayToLast - Brute Force')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#timecomplexityon-desc_goes_here","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#spacecomplexityon-desc_goes_here","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#solution_titlemovezeroesiteminarraytolast-sub-optimal","title":"solution_title('MoveZeroesItemInArrayToLast - Sub Optimal')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutiontimeoptimized-param1-expectedexpect1","title":"print_and_assert_reference(solution.timeOptimized, param1, expected=expect1)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutiontimeoptimized-param2-expectedexpect2","title":"print_and_assert_reference(solution.timeOptimized, param2, expected=expect2)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutiontimeoptimized-param3-expectedexpect3","title":"print_and_assert_reference(solution.timeOptimized, param3, expected=expect3)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#gettestresultmovezeroesiteminarraytolast-sub-optimal","title":"getTestResult('MoveZeroesItemInArrayToLast - Sub Optimal')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#timecomplexityon-desc_goes_here_1","title":"timeComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#spacecomplexityon-desc_goes_here_1","title":"spaceComplexity('O(n)', 'desc_goes_here')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#solution_titlemovezeroesiteminarraytolast-optimal","title":"solution_title('MoveZeroesItemInArrayToLast - Optimal')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutiontimeoptimized-param1-expectedexpect1_1","title":"print_and_assert_reference(solution.timeOptimized, param1, expected=expect1)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutiontimeoptimized-param2-expectedexpect2_1","title":"print_and_assert_reference(solution.timeOptimized, param2, expected=expect2)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#print_and_assert_referencesolutiontimeoptimized-param3-expectedexpect3_1","title":"print_and_assert_reference(solution.timeOptimized, param3, expected=expect3)","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#gettestresultmovezeroesiteminarraytolast-optimal","title":"getTestResult('MoveZeroesItemInArrayToLast - Optimal')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#timecomplexityon-m-desc_goes_here","title":"timeComplexity('O(n + m)', 'desc_goes_here')","text":""},{"location":"leetcode/arrays/283_move_zeroes_easy#spacecomplexityon-m-desc_goes_here","title":"spaceComplexity('O(n + m)', 'desc_goes_here')```","text":""},{"location":"leetcode/strings","title":"Strings","text":"<p>This section covers strings.</p> <ul> <li>67_Add_Binary.py</li> </ul>"},{"location":"leetcode/strings/Add_Binary","title":"Add Binary","text":"<p>File Name: 67_Add_Binary.py ```python from utilities.testUtils import solution_title, print_and_assert_new, getTestResult from utilities.commonUtils import timeComplexity, spaceComplexity</p> <p>print('\\n &gt;&gt;&gt; 67. Add Binary') print(''' Given two binary strings a and b, return their sum as a binary string.</p> <p>Example 1:</p> <p>Input: a = \"11\", b = \"1\" Output: \"100\" Example 2:</p> <p>Input: a = \"1010\", b = \"1011\" Output: \"10101\"</p> <p>Constraints: 1 &lt;= a.length, b.length &lt;= 104 a and b consist only of '0' or '1' characters. Each string does not contain leading zeros except for the zero itself. ''')</p> <p>class AddBinary(object):     def quick(self, a, b):       sum = int(a, 2) + int(b, 2)       return bin(sum)[2:]     def brute_force(self, a, b):       result, carry, i, j = \"\", 0, len(a) - 1, len(b) - 1</p> <pre><code>  while i &gt;= 0 or j &gt;= 0 or carry:\n      total = carry\n      if i &gt;= 0:\n          total += int(a[i])\n          i -= 1\n      if j &gt;= 0:\n          total += int(b[j])\n          j -= 1\n      carry = total // 2\n      result = str(total % 2) + result\n\n  return result\ndef sub_optimal(self, a, b):\n  x, y = int(a, 2), int(b, 2)\n  while y:\n      answer = x ^ y\n      carry = (x &amp; y) &lt;&lt; 1\n      x, y = answer, carry\n  return bin(x)[2:]\ndef optimal(self, a, b):\n  result, carry = \"\", 0\n  p1, p2 = len(a) - 1, len(b) - 1\n\n  while p1 &gt;= 0 or p2 &gt;= 0 or carry:\n      if p1 &gt;= 0:\n          carry += int(a[p1])\n          p1 -= 1\n      if p2 &gt;= 0:\n          carry += int(b[p2])\n          p2 -= 1\n      carry, bit = divmod(carry, 2)\n      result = str(bit) + result\n\n  return result\n</code></pre>"},{"location":"leetcode/strings/Add_Binary#parameters-and-expected-values","title":"Parameters and Expected Values.","text":"<p>param1 = '11' param11 = '1' expect1 = '100'</p> <p>param2 = '1010' param22 = '1011' expect2 = '10101'</p> <p>param3 = '0' param33 = '0' expect3 = '0'</p> <p>solution = AddBinary() solution_title('AddBinary - Quick One') print_and_assert_new(solution.quick, param1, param11, expected=expect1) print_and_assert_new(solution.quick, param2, param22, expected=expect2) print_and_assert_new(solution.quick, param3, param33, expected=expect3) getTestResult('AddBinary - Quick One')</p> <p>timeComplexity('O(N + M)', 'where N and M are the lengths of strings a and b, respectively. The conversion functions (int and bin) run in linear time relative to the length of the input strings.') spaceComplexity('O(1)', 'as we only use a fixed amount of extra space.')</p> <p>solution_title('AddBinary - Brute Force') print_and_assert_new(solution.brute_force, param1, param11, expected=expect1) print_and_assert_new(solution.brute_force, param2, param22, expected=expect2) print_and_assert_new(solution.brute_force, param3, param33, expected=expect3) getTestResult('AddBinary - Brute Force')</p> <p>timeComplexity('O(max(N, M))', 'where N and M are the lengths of strings a and b.') spaceComplexity('O(max(N, M))', 'as we store the result which can be as long as the longer string plus one for the carry bit.')</p> <p>solution_title('AddBinary - Sub Optimal using Bit Manipulation') print_and_assert_new(solution.sub_optimal, param1, param11, expected=expect1) print_and_assert_new(solution.sub_optimal, param2, param22, expected=expect2) print_and_assert_new(solution.sub_optimal, param3, param33, expected=expect3) getTestResult('AddBinary - Sub Optimal using Bit Manipulation')</p> <p>timeComplexity('O(N + M)', 'depends on the lengths of the binary representations.') spaceComplexity('O(1)', 'space used does not depend on the input size.')</p> <p>solution_title('AddBinary - Optimal using Two-Pointer Approach') print_and_assert_new(solution.optimal, param1, param11, expected=expect1) print_and_assert_new(solution.optimal, param2, param22, expected=expect2) print_and_assert_new(solution.optimal, param3, param33, expected=expect3) getTestResult('AddBinary - Optimal using Two-Pointer Approach')</p> <p>timeComplexity('O(max(N, M))', 'optimal because we have to inspect each character of both strings in the worst case.') spaceComplexity('O(max(N, M))', 'resulting string size will be at most max(N, M) + 1')```</p>"},{"location":"math","title":"Math","text":"<p>This section covers math.</p> <ul> <li>fibonacci.py</li> </ul>"},{"location":"math/NumberSystem","title":"Numbersystem","text":""},{"location":"math/NumberSystem#number-system","title":"Number System","text":"Serial No. System Historical/Modern Base Digits Simple Example Real-Time Usage or First Known Usage 1 Binary Modern 2 0, 1 1011 (Binary) Fundamental in digital computing, electronic circuits 2 Ternary Historical 3 0, 1, 2 210 (Ternary) Historical and less common, not widely used in computing 3 Quaternary Historical 4 0, 1, 2, 3 32 (Quaternary) Ancient Mayans used a base-4 system in their calendar 4 Octal Modern 8 0, 1, 2, 3, 4, 5, 6, 7 765 (Octal) Early computers, Unix file permissions 5 Decimal Modern 10 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 456 (Decimal) Everyday arithmetic, used universally 6 Duodecimal Historical 12 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B 7A (Duodecimal) Historical, used in ancient cultures 7 Hexadecimal Modern 16 0-9, A-F 1A3 (Hexadecimal) Memory addressing in computing, color representation 8 Sexagesimal Historical 60 0-9, A-Z, a-z 2J (Sexagesimal) Time measurement, ancient Babylonian numeral system 9 Roman Numerals Historical - I, V, X, L, C, D, M XIV (Roman) Ancient Rome, used for numbering, timekeeping, inscriptions"},{"location":"math/fibonacci","title":"Fibonacci","text":"<p>File Name: fibonacci.py <pre><code>from tabulate import tabulate\ndef fibonacci_recursive(n: int): \n  if n &lt;= 1:\n    return n\n  return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n\nprint(\"Reccursive Fibonacci\")\nn = 10\nprint([fibonacci_recursive(value) for value in range(n)])\n\n\ndef fibonacci_memoized(n, memo={}):\n  if n &lt;= 1:\n    return n\n  if n not in memo:\n    memo[n] = fibonacci_memoized(n - 1, memo) + fibonacci_memoized(n - 2, memo)\n  return memo[n]\nprint(\"Reccursive memoized\")\nn = 10\nprint([fibonacci_memoized(value) for value in range(n)])\n\ndef fibonacci_optimised(n):\n  if n &lt;= 1:\n    return n\n  prev = 0\n  current = 1\n  for _ in range(2, n+1 ):\n    temp = current\n    current = current + prev\n    prev = temp\n  return current \n\nprint(\"Reccursive optimised\")\nn = 10\nprint([fibonacci_optimised(value) for value in range(n)])\n\ntable = ([\"Solution\", \"Time complexity\", \"Space complexity\"], \n         [\"Recursive\", \"O(2^n)\", \"O(2^n)\"], \n         [\"Recursive memoized\" , \"O(n)\" , \"O(n)\"],\n         [\"Optimised\" , \"O(n)\" , \"O(1)\"])\n\nprint(tabulate(table, headers=\"firstrow\"))\n</code></pre></p>"},{"location":"math/calculations","title":"Calculations","text":"<p>This section covers calculations.</p> <ul> <li>divide.py</li> <li>multiply.py</li> <li>number-system.py</li> </ul>"},{"location":"math/calculations/divide","title":"Divide","text":"<p>File Name: divide.py </p>"},{"location":"math/calculations/multiply","title":"Multiply","text":"<p>File Name: multiply.py <pre><code>from stylepy import h1,h2,h3,h4,h5,h6\ndef multiplyWithAddTest(a, b):\n    try:\n        # Perform an arithmetic operation that will fail for non-numeric types\n        test = (a + b) - b\n        return a * b\n    except TypeError as e:\n        # If an error occurs, return the error message\n        return f\"Invalid parameter value {a}, {b}\"\n\nh1(' &gt;&gt;&gt; multiplyWithAddTest')\nh4(multiplyWithAddTest(7, 5))      # Valid numerical input\nh4(multiplyWithAddTest(7, \"abc\"))  # Invalid input\nh4(multiplyWithAddTest(\"xyz\", 3))  # Invalid input\n\n\ndef multiplyWithTypeCheck(a, b):\n    try:\n        # Perform an arithmetic operation that will fail for non-numeric types\n        # if (isinstance(a, int) and isinstance(b, int)): #below is alternative check statement\n        if type(a) is int and type(b) is int:\n            return a * b\n        else:\n            raise TypeError('Parameter is not valid data type')\n    except TypeError as e:\n        # If an error occurs, return the error message\n        # return f\"Invalid parameter value {a}, {b}\"\n        return f\"{e}: {a}, {b}\"\n\nh1(' &gt;&gt;&gt; multiplyWithTypeCheck')\nh4(multiplyWithTypeCheck(7, 5))      # Valid numerical input\nh4(multiplyWithTypeCheck(7, \"abc\"))  # Invalid input\nh4(multiplyWithTypeCheck(\"xyz\", 3))  # Invalid input\nh4(multiplyWithTypeCheck(7.5, 3))  # Invalid input\n</code></pre></p>"},{"location":"math/calculations/number-system","title":"Number System","text":"<p>File Name: number-system.py </p>"},{"location":"math/number-systems","title":"Number-systems","text":"<p>This section covers number-systems.</p> <ul> <li>binary_to_decimal.py</li> <li>decimal_to_binary.py</li> <li>decimal_to_hexadecimal.py</li> <li>hexadecimal_to_decimal.py</li> <li>octal_to_decimal.py</li> <li>problems.py</li> </ul>"},{"location":"math/number-systems/binary_to_decimal","title":"Binary To Decimal","text":"<p>File Name: binary_to_decimal.py ```python def binary_to_decimal(binary):     decimal = 0     power = 0     for digit in reversed(binary):  # Process digits from right to left         decimal += int(digit) * (2 ** power)         power += 1     return decimal</p> <p>binary=input(\"Enter the binary:\")   # For example: 1011 decimal = binary_to_decimal(binary) print(f\"The decimal equivalent of binary {binary} is {decimal}\")```</p>"},{"location":"math/number-systems/decimal_to_binary","title":"Decimal To Binary","text":"<p>File Name: decimal_to_binary.py <pre><code>def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal &gt; 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal //= 2\n    return binary\n\n\ndecimal_number = int(input(\"Enter the decimal number: \"))  # for example : 10\n\nbinary_number = decimal_to_binary(decimal_number)\n\nprint(f\"The binary equivalent of decimal {decimal_number} is {binary_number}.\")\n</code></pre></p>"},{"location":"math/number-systems/decimal_to_hexadecimal","title":"Decimal To Hexadecimal","text":"<p>File Name: decimal_to_hexadecimal.py <pre><code>def decimal_to_hexadecimal(decimal):\n    hex_digits = \"0123456789ABCDEF\"\n    hexadecimal = \"\"\n    while decimal &gt; 0:\n        remainder = decimal % 16\n        hexadecimal = hex_digits[remainder] + hexadecimal\n        decimal //= 16\n    return hexadecimal\n\ndecimal_number = int(input(\"Enter the number: \"))  # For example: 76\nhexadecimal_number = decimal_to_hexadecimal(decimal_number)\nprint(f\"The hexadecimal equivalent of decimal {decimal_number} is {hexadecimal_number}.\")\n</code></pre></p>"},{"location":"math/number-systems/hexadecimal_to_decimal","title":"Hexadecimal To Decimal","text":"<p>File Name: hexadecimal_to_decimal.py <pre><code>def hexadecimal_to_decimal(hexadecimal):\n    hex_digits = \"0123456789ABCDEF\"\n    decimal = 0\n    power = 0\n    for digit in reversed(hexadecimal.upper()): \n        decimal += hex_digits.index(digit) * (16 ** power)\n        power += 1\n    return decimal\n\n\nhexadecimal_number=input(\"Enter the hexadecimal_number:\")      # For example:  1A\ndecimal_number = hexadecimal_to_decimal(hexadecimal_number)\nprint(f\"The decimal equivalent of hexadecimal {hexadecimal_number} is {decimal_number}.\")\n</code></pre></p>"},{"location":"math/number-systems/octal_to_decimal","title":"Octal To Decimal","text":"<p>File Name: octal_to_decimal.py <pre><code>def octal_to_decimal(octal):\n    decimal = 0\n    power = 0\n    for digit in reversed(octal):  \n        decimal += int(digit) * (8 ** power)\n        power += 1\n    return decimal\n\n\noctal_number = input(\"Enter the octal number: \")    # For example: 56\ndecimal_number = octal_to_decimal(octal_number) \nprint(f\"The decimal equivalent of octal {octal_number} is {decimal_number}.\")\n</code></pre></p>"},{"location":"math/number-systems/problems","title":"Problems","text":"<p>File Name: problems.py ```python</p>"},{"location":"math/number-systems/problems#binary-to-deciamal","title":"binary to deciamal","text":""},{"location":"math/number-systems/problems#decimal-to-binary","title":"decimal to binary","text":""},{"location":"math/number-systems/problems#hexadecimal-to-deciamal","title":"hexadecimal to deciamal","text":""},{"location":"math/number-systems/problems#decimal-to-hexadecimal","title":"decimal to hexadecimal","text":""},{"location":"math/number-systems/problems#octal-to-decimal","title":"octal to decimal","text":""},{"location":"math/number-systems/problems#decimal-to-octal","title":"decimal to octal","text":""},{"location":"math/number-systems/problems#binary-to-hexadecimal","title":"binary to hexadecimal","text":""},{"location":"math/number-systems/problems#decimal-to-roman","title":"decimal to roman","text":""},{"location":"math/number-systems/problems#roman-to-decimal","title":"roman to decimal```","text":""},{"location":"operators/bit_wise/shift_left","title":"Shift Left","text":"<p>This section covers shift_left.</p> <ul> <li>basics.py</li> </ul>"},{"location":"operators/bit_wise/shift_left/basics","title":"Basics","text":"<p>File Name: basics.py ```python</p>"},{"location":"operators/bit_wise/shift_left/basics#python-modulepy-operatorsbit_wiseshift_leftbasicspy","title":"python module.py operators/bit_wise/shift_left/basics.py","text":"<p>import data_types.commonUtils as utils</p> <p>utils.print_h1('Shift Left Basics')</p> <p>utils.print_h2('Shift Left can be used in ..') utils.print_ordered_list([     'Efficient Multiplication',     'Power of Two Operations',     'Setting and Clearing Bits' ])</p> <p>utils.print_h2('Using Leet code problems ..') utils.print_ordered_list([     'Two Sum',     'Valid Parentheses',     'Maximum Subarray',     'LRU Cache',     'Middle of Linked List' ])</p> <p>n = 1 original_value = 3</p>"},{"location":"operators/bit_wise/shift_left/basics#original_value-2n","title":"original_value * (2^n)","text":"<p>multiplication_without_shift_operator = original_value * 2**n multiplication_with_shift_left_operator = original_value &lt;&lt; n</p> <p>print('\\n') print('n is', n, ' = multiplication_without_shift_operator: ', multiplication_without_shift_operator) print('n is', n, ' = multiplication_with_shift_left_operator: ', multiplication_with_shift_left_operator)</p> <p>m = 2 multiplication_without_shift_operator_m = original_value * 2**m multiplication_with_shift_operator_m = original_value &lt;&lt; m</p> <p>print('m is', m, ' = multiplication_without_shift_operator_m: ', multiplication_without_shift_operator_m) print('m is', m, ' = multiplication_with_shift_operator_m: ', multiplication_with_shift_operator_m)</p> <p>print(''' | Decimal | Binary | |---------|--------| | 0       | 0000   | | 1       | 0001   | | 2       | 0010   | | 3       | 0011   | | 4       | 0100   | | 5       | 0101   | | 6       | 0110   | | 7       | 0111   | | 8       | 1000   | | 9       | 1001   | | 10      | 1010   | | 11      | 1011   | | 12      | 1100   | ''')```</p>"},{"location":"problems","title":"Problems","text":"<p>This section covers problems.</p> <ul> <li>fibonacci.py</li> <li>number_length.py</li> <li>palindrome.py</li> <li>string_length.py</li> <li>testUtils.py</li> </ul>"},{"location":"problems/fibonacci","title":"Fibonacci","text":"<p>File Name: fibonacci.py <pre><code>from stylepy import h1,h2,h3,h4,h5,h6\nimport time\n\ndef getMinutes(elapsed_time):\n    minutes = int(elapsed_time // 60)\n    return minutes\n\ndef getSeconds(elapsed_time):\n    seconds = elapsed_time % 60\n    return seconds\n\n# recursive_fibonacci Function\nh1('\\n &gt;&gt;&gt;&gt; recursive_fibonacci Function to return fibonacci until n');\nh3('\\n This one time complexity is O(2^n) Exponential and have redundant calculations');\n\ndef recursive_fibonacci(n):\n    if (n &lt; 2):\n        return n;\n\n    return recursive_fibonacci(n - 1) + recursive_fibonacci(n - 2);\n\nstart_time = time.time() # Start time\nn = 41;\nh4('Note: Recursive approach without memoization is highly inefficient for large values of n due to the exponential growth of recursive calls and redundant computations.');\nh5(f\"recursive_fibonacci({n}) is {recursive_fibonacci(n)}\");\nend_time = time.time() # End time\n\nprint(f\"This function took {getMinutes(end_time - start_time)} minutes and {getSeconds(end_time - start_time):.2f} seconds\")\n\n# memoized_recursive_fibonacci Function\nh1('\\n &gt;&gt;&gt;&gt; memoized_recursive_fibonacci Function to return fibonacci until n')\nh4('\\n This one optimized now so Time and Space Complexity is O(n)')\n\ndef memoized_recursive_fibonacci(n, memoized={0: 0, 1:1}):\n    if n not in memoized:\n        memoized[n] = memoized_recursive_fibonacci(n - 1, memoized) + memoized_recursive_fibonacci(n - 2, memoized)\n    return memoized[n]\n\nstart_time = time.time() # Start time\nn = 41\nh4(f\"memoized_recursive_fibonacci({n}) is {recursive_fibonacci(n)}\")\nend_time = time.time() # End time\nh5(f\"This function took {getMinutes(end_time - start_time)} minutes and {getSeconds(end_time - start_time):.2f} seconds\")\n\n# iterative_fibonacci Function\n\"\"\"\n\"\"\"\nh1('\\n &gt;&gt;&gt;&gt; iterative_fibonacci Function to return fibonacci until n')\ndef iterative_fibonacci(n):\n    \"\"\"\n    Calculate the nth Fibonacci number using an iterative approach.\n\n    :param n: The position in the Fibonacci sequence.\n    :return: The Fibonacci number at position n.\n    \"\"\"\n    if n &lt;= 1:\n        return n\n\n    prev, curr = 0, 1 # Start with zero and increment by 1.\n    for i in range(2, n + 1): # iterate until n + 1 if n is 7 it will be 2 to 8 = 6 times\n        prev, curr = curr, prev + curr\n        # print(f\"prev: {prev} and curr: {curr}\")\n\n    return curr\n\nstart_time = time.time() # Start time\nn = 7\nh4(f\"iterative_fibonacci({n}) is {iterative_fibonacci(n)}\")\nh5('\\n This one optimized now so Time Complexity is O(n) and Space Complexity is O(1)');\nend_time = time.time() # End time\nh6(f\"This function took {getMinutes(end_time - start_time)} minutes and {getSeconds(end_time - start_time):.2f} seconds\")\n</code></pre></p>"},{"location":"problems/fibonacci#documentation","title":"Documentation","text":"<p>h1('\\n &gt;&gt;&gt;&gt; iterative_fibonacci Function to return fibonacci until n') def iterative_fibonacci(n):     Calculate the nth Fibonacci number using an iterative approach.</p> <pre><code>:param n: The position in the Fibonacci sequence.\n:return: The Fibonacci number at position n.\nif n &lt;= 1:\n    return n\n\nprev, curr = 0, 1 # Start with zero and increment by 1.\nfor i in range(2, n + 1): # iterate until n + 1 if n is 7 it will be 2 to 8 = 6 times\n    prev, curr = curr, prev + curr\n    # print(f\"prev: {prev} and curr: {curr}\")\n\nreturn curr\n</code></pre> <p>start_time = time.time() # Start time n = 7 h4(f\"iterative_fibonacci({n}) is {iterative_fibonacci(n)}\") h5('\\n This one optimized now so Time Complexity is O(n) and Space Complexity is O(1)'); end_time = time.time() # End time h6(f\"This function took {getMinutes(end_time - start_time)} minutes and {getSeconds(end_time - start_time):.2f} seconds\")</p>"},{"location":"problems/number_length","title":"Number Length","text":"<p>File Name: number_length.py <pre><code>from testUtils import print_and_assert, getTestResult\nfrom stylepy import h1,h2,h3,h4\nh2('\\n &gt;&gt;&gt; Number Length Example without using len() def')\nh3(' &gt;&gt;&gt; number_length(0)')\n\ndef number_length(number):\n    if number == 0:\n        return 1\n    count = 0\n\n    while number:\n        number //= 10\n        count += 1\n\n    return count;\n\nprint('\\n &gt;&gt;&gt; Number Length Test Cases')\nprint_and_assert(number_length, 0, 2)\nprint_and_assert(number_length, 25, 2)\nprint_and_assert(number_length, 725, 3)\nprint_and_assert(number_length, 4325, 4)\nprint_and_assert(number_length, 734250, 6)\nprint_and_assert(number_length, 52734250, 8)\n\ngetTestResult('Number Length')\n</code></pre></p>"},{"location":"problems/palindrome","title":"Palindrome","text":"<p>File Name: palindrome.py <pre><code>from testUtils import print_and_assert, getTestResult, solution_title\nfrom stylepy import h1,h2,h3,h4\nh1('\\n &gt;&gt;&gt; Is Palindrome Example')\nh2('\\n &gt;&gt;&gt; The concept of a palindrome focuses solely on the sequence of characters, disregarding spaces and letter casing.')\nh3(' &gt;&gt;&gt; palindrome(word)')\n\nclass palindromSolutions(object):\n    def using_string_solution(self, word):\n        return word[::-1]\n\n    def using_iteration_with_range(self, word):\n        last_index = len(word) - 1\n        text = ''\n        for i in range(last_index, -1, -1):\n            text += word[i]\n        return text\n\npalindrome = palindromSolutions()\nusing_string_solution = palindrome.using_string_solution\nsolution_title('Using String Slicing')\nprint_and_assert(using_string_solution, 'madam', 'madam')\nprint_and_assert(using_string_solution, 'kayak', 'kayak')\n# print_and_assert(using_string_solution, 'EVIL OLIVE', 'EVIL OLIVE')\n# print_and_assert(using_string_solution, 'DO GEESE SEE GOD', 'DO GEESE SEE GOD')\n\ngetTestResult('Simple Palindrome')\n\n# using_iteration_with_range = palindrome.using_iteration_with_range\n# solution_title('Using Iteration with Range')\n# print_and_assert(using_iteration_with_range, 'madam', 'madam')\n# print_and_assert(using_string_solution, 'kayak', 'kayak')\n# print_and_assert(using_string_solution, 'EVIL OLIVE', 'EVIL OLIVE')\n# # print_and_assert(using_string_solution, 'DO GEESE SEE GOD', 'DO GEESE SEE GOD')\n\n# getTestResult('Using Iteration with Range')\n</code></pre></p>"},{"location":"problems/string_length","title":"String Length","text":"<p>File Name: string_length.py ```python from stylepy import h1,h2,h3 from testUtils import print_and_assert, getTestResult</p> <p>h1('\\n &gt;&gt;&gt; String Length Example without using len() def') h2(' &gt;&gt;&gt; string_length()') def string_length(text):     count = 0;     for character in text:         count += 1     return count;</p> <p>h3('\\n &gt;&gt;&gt; String Length Test Cases') print_and_assert(string_length, 'Venkat', 6) print_and_assert(string_length, 'R.Venkat', 8) print_and_assert(string_length, 'Python', 6) print_and_assert(string_length, 'Full Stack Development', 10) print_and_assert(string_length, '734250', 6) print_and_assert(string_length, '52734250', 9);</p> <p>getTestResult('String Length')```</p>"},{"location":"problems/testUtils","title":"Testutils","text":"<p>File Name: testUtils.py ```python from stylepy import h1,h2,h3,h4,h5,h6 failures = 0</p> <p>def flag_failure():     global failures     failures = (failures or 0) + 1</p> <p>def failure_count():     return failures</p> <p>def solution_title(title):     print('=' * 70)     print(f'&gt;&gt;&gt; {title}')     print('=' * 70)</p> <p>def print_and_assert(function_name, param, expected):     try:         assert function_name(param) == expected         h4(f'\u2705 Pass: {function_name.name}({param}) is returning {expected} as expected')     except AssertionError:         flag_failure()         h4(f'\u274c AssertionError: {function_name.name}({param}) is returning {function_name(param)} but <code>{expected}</code> is expected')</p> <p>def print_and_assert_new(function_name, params, expected):     try:         assert function_name(params) == expected         h4(f'\u2705 Pass: {function_name.name}{params} is returning {expected} as expected')     except AssertionError:         flag_failure()         h4(f'\u274c AssertionError: {function_name.name}{params} is returning {function_name(*params)} but <code>{expected}</code> is expected')</p> <p>def getTestResult(testName):     if (failure_count() &gt; 0):         h5(f\"{failure_count()} Failure in {testName} tests\")     else:         h6(f\"{testName} tests are passed!\")```</p>"},{"location":"recursive","title":"Recursive","text":"<p>This section covers recursive.</p> <ul> <li>recursive_error.py</li> <li>stack_frames.py</li> </ul>"},{"location":"recursive/recursive_error","title":"Recursive Error","text":"<p>File Name: recursive_error.py ```python from stylepy import h4 call_count = 0</p> <p>def greet():     global call_count     call_count += 1     h4(call_count,'. hello buddy!')     greet()</p> <p>greet()```</p>"},{"location":"recursive/stack_frames","title":"Stack Frames","text":"<p>File Name: stack_frames.py <pre><code>import sys\nimport inspect\n\n# Set the recursion limit to a lower value for demonstration\nsys.setrecursionlimit(30)\n\ndef print_stack_frames():\n    # Iterate over the stack frames\n    for frame_info in inspect.stack():\n        frame = frame_info.frame  # Get the frame object\n        print(f\"Frame: {frame.f_lineno} line - {frame.f_code.co_name}\") # Print information about each frame\n\ndef greet(count=0):\n    if count &lt; 5:  # Limiting recursion depth for demonstration\n        print(f\"Recursion count: {count}\")\n        print_stack_frames()\n        print(\"----------------------\")\n        greet(count + 1)\n\ngreet()\n</code></pre></p>"},{"location":"sorting","title":"Sorting","text":"<p>This section covers sorting.</p> <ul> <li>quick_sort.py</li> </ul>"},{"location":"sorting/quick_sort","title":"Quick Sort","text":"<p>File Name: quick_sort.py <pre><code>from stylepy import h1,h2,h3,h4,h5,h6\ndef quick_sort(arr):\n    if len(arr) &lt;= 1:\n        return arr\n\n    pivot = arr[-1]\n    lesser_than_pivot = []\n    equal_to_pivot = []\n    greater_than_pivot = []\n\n    for value in arr[:-1]:\n        if value &lt; pivot:\n            lesser_than_pivot.append(value)\n        elif value == pivot:\n            equal_to_pivot.append(value)\n        else:\n            greater_than_pivot.append(value)\n\n    if lesser_than_pivot and greater_than_pivot:\n        return quick_sort(lesser_than_pivot) + [pivot] + equal_to_pivot + quick_sort(greater_than_pivot)\n    elif lesser_than_pivot:\n        return quick_sort(lesser_than_pivot) + [pivot] + equal_to_pivot\n    else:\n        return [pivot] + equal_to_pivot + quick_sort(greater_than_pivot)\n\n\nh4('Sorted', quick_sort([5,3,1,8]));\nh4('Sorted with duplicates', quick_sort([8,1,1,8,1,1,1,1]));\n</code></pre></p>"},{"location":"utilities","title":"Utilities","text":"<p>This section covers utilities.</p> <ul> <li>commonUtils.py</li> <li>testUtils.py</li> </ul>"},{"location":"utilities/commonUtils","title":"Commonutils","text":"<p>File Name: commonUtils.py <pre><code>import pprint\n\ndef timeComplexity(value, desc):\n    result = f'\\n \ud83d\udd52 Time Complexity: Approximately {value}'\n\n    if (desc):\n        result += f'\\n    Description: {desc}'\n    print(result)\n\n\ndef spaceComplexity(value, desc):\n    result = f' \ud83d\udcbe Space Complexity: Approximately {value}'\n\n    if (desc):\n        result += f'\\n    Description: {desc}'\n    print(result)\n\n\ndef print_h1(text):\n    print(f\"\\n{'=' * 40}\\n{text}\\n{'=' * 40}\")\n\n\ndef print_h2(text):\n    print(f\"\\n{'-' * 35}\\n{text}\\n{'-' * 35}\")\n\n\ndef print_h3(text):\n    print(f\"\\n{text}\\n{'-' * 30}\")\n\n\ndef print_h4(*text):\n    combined_text = \" \".join(str(t) for t in text)  # Join all elements of text into one string\n    print(f\"\\n{combined_text}\\n{'-' * 25}\")\n\ndef print_h5(text):\n    print(f\"\\n{text}\\n{'-' * 20}\")\n\ndef print_h6(text):\n    print(f\"\\n{text}\\n{'-' * 15}\")\n\ndef print_span(*text):\n    combined_text = \" \".join(str(t) for t in text)  # Join all elements of text into one string\n    # Using ANSI escape code for bold text\n    print(f\"\\033[1m{combined_text}\\033[0m\")\n\ndef print_ordered_list(items):\n    for i, item in enumerate(items, start=1):\n        print(f\"{i}. {item}\")\n\n\ndef print_bullet_list(items, bullet_char='*'):\n    for item in items:\n        print(f\"{bullet_char} {item}\")\n\n\ndef print_blockquote(items, indent_char='&gt; ', emoji='\ud83d\udcac', new_line = False):\n    if (new_line):\n        print('\\n')\n    for item in items:\n        print(f\"{emoji} {indent_char}{item}\")\n\n\ndef pretty_json(input):\n    pprint.pprint(input, width=50, indent=2)\n\n\ndef print_tabular_list(data, col_widths = [15, 45]):\n    \"\"\"\n    Print data in a tabular format with horizontal lines, differentiating the header.\n\n    :param data: List of tuples, where each tuple represents a row.\n    :param col_widths: List of integers representing the width of each column.\n    \"\"\"\n    def print_divider():\n        # Create and print a divider line with '+'\n        line = \"+\" + \"+\".join(\"-\" * width for width in col_widths) + \"+\"\n        print(line)\n\n    def print_header_divider():\n        # Create and print a simple divider line without '+' for the header\n        line = \"-\" * (sum(col_widths) + len(col_widths) - 1)\n        print(line)\n\n    # Print the header row\n    print_divider()\n    header = data[0]\n    formatted_header = \"|\".join(\n        f\"{item:&lt;{col_widths[i]}}\" for i, item in enumerate(header))\n    print(\"|\" + formatted_header + \"|\")\n    print_header_divider()\n\n    # Print the rest of the rows\n    for row in data[1:]:\n        formatted_row = \"|\".join(\n            f\"{item:&lt;{col_widths[i]}}\" for i, item in enumerate(row))\n        print(\"|\" + formatted_row + \"|\")\n        print_header_divider()\n</code></pre></p>"},{"location":"utilities/commonUtils#documentation","title":"Documentation","text":"<pre><code>Print data in a tabular format with horizontal lines, differentiating the header.\n\n:param data: List of tuples, where each tuple represents a row.\n:param col_widths: List of integers representing the width of each column.\ndef print_divider():\n    # Create and print a divider line with '+'\n    line = \"+\" + \"+\".join(\"-\" * width for width in col_widths) + \"+\"\n    print(line)\n\ndef print_header_divider():\n    # Create and print a simple divider line without '+' for the header\n    line = \"-\" * (sum(col_widths) + len(col_widths) - 1)\n    print(line)\n\n# Print the header row\nprint_divider()\nheader = data[0]\nformatted_header = \"|\".join(\n    f\"{item:&lt;{col_widths[i]}}\" for i, item in enumerate(header))\nprint(\"|\" + formatted_header + \"|\")\nprint_header_divider()\n\n# Print the rest of the rows\nfor row in data[1:]:\n    formatted_row = \"|\".join(\n        f\"{item:&lt;{col_widths[i]}}\" for i, item in enumerate(row))\n    print(\"|\" + formatted_row + \"|\")\n    print_header_divider()\n</code></pre>"},{"location":"utilities/testUtils","title":"Testutils","text":"<p>File Name: testUtils.py ```python failures = 0</p> <p>def flag_failure():     global failures     failures = (failures or 0) + 1</p> <p>def failure_count():     return failures</p> <p>def solution_title(title):     print('=' * 70)     print(f'&gt;&gt;&gt; {title}')     print('=' * 70)</p> <p>def reason_points(title):     print(f'How ?{title}')</p> <p>def print_and_assert(function_name, param, expected):     try:         assert function_name(param) == expected         print(f'\u2705 Pass: {function_name.name}({param}) is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}({param}) is returning {function_name(param)} but <code>{expected}</code> is expected')</p> <p>def print_and_assert_new(function_name, params, expected):     try:         assert function_name(params) == expected         print(f'\u2705 Pass: {function_name.name}{params} is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}{params} is returning {function_name(*params)} but <code>{expected}</code> is expected')</p> <p>def print_and_assert_reference(function_name, params, expected, param_index = 0):     try:         function_name(params)         assert params[param_index] == expected         print(f'\u2705 Pass: {function_name.name}{params} is returning {expected} as expected')     except AssertionError:         flag_failure()         print(f'\u274c AssertionError: {function_name.name}{params} is returning {params[param_index]} but <code>{expected}</code> is expected')</p> <p>def getTestResult(testName):     if (failure_count() &gt; 0):         print(f\"{failure_count()} Failure in {testName} tests\")     else:         print(f\"{testName} tests are passed!\")```</p>"}]}